{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/helpers/field-group-utils.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FieldGroupUtils",
          "members": [
            {
              "kind": "method",
              "name": "getReferenceList",
              "static": true,
              "parameters": [
                {
                  "name": "pConn",
                  "description": "pConnect object of the view",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "buildView",
              "static": true,
              "parameters": [
                {
                  "name": "pConn",
                  "description": "pConnect object of the view",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "index",
                  "description": "index of the fieldGroup item",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "viewConfigPath",
                  "description": "boolean value to check for children in config",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "creates and returns react element of the view",
              "return": {
                "type": {
                  "text": "*"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FieldGroupUtils",
          "declaration": {
            "name": "FieldGroupUtils",
            "module": "src/helpers/field-group-utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/helpers/instructions-utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "updateNewInstructions",
          "parameters": [
            {
              "name": "c11nEnv"
            },
            {
              "name": "selectionList"
            }
          ]
        },
        {
          "kind": "function",
          "name": "insertInstruction",
          "parameters": [
            {
              "name": "c11nEnv"
            },
            {
              "name": "selectionList"
            },
            {
              "name": "selectionKey"
            },
            {
              "name": "primaryField"
            },
            {
              "name": "item"
            }
          ]
        },
        {
          "kind": "function",
          "name": "deleteInstruction",
          "parameters": [
            {
              "name": "c11nEnv"
            },
            {
              "name": "selectionList"
            },
            {
              "name": "selectionKey"
            },
            {
              "name": "item"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "updateNewInstructions",
          "declaration": {
            "name": "updateNewInstructions",
            "module": "src/helpers/instructions-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "insertInstruction",
          "declaration": {
            "name": "insertInstruction",
            "module": "src/helpers/instructions-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "deleteInstruction",
          "declaration": {
            "name": "deleteInstruction",
            "module": "src/helpers/instructions-utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/helpers/utils.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Utils",
          "members": [
            {
              "kind": "field",
              "name": "lastControlID",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "0"
            },
            {
              "kind": "method",
              "name": "getUniqueControlID",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "getSDKStaticContentUrl",
              "static": true
            },
            {
              "kind": "method",
              "name": "getOptionList",
              "static": true,
              "return": {
                "type": {
                  "text": "any[]"
                }
              },
              "parameters": [
                {
                  "name": "configProps",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "dataObject",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getInitials",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "userName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getImageSrc",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "serverUrl",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getIconPath",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "serverUrl",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getBooleanValue",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "inValue",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "generateDate",
              "static": true,
              "parameters": [
                {
                  "name": "dateVal"
                },
                {
                  "name": "dateFormat"
                }
              ]
            },
            {
              "kind": "method",
              "name": "generateDateTime",
              "static": true,
              "parameters": [
                {
                  "name": "dateTimeVal"
                },
                {
                  "name": "dateFormat"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getIconFromFileType",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "fileType"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getIconForAttachment",
              "static": true,
              "parameters": [
                {
                  "name": "attachment"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getTagName",
              "static": true,
              "parameters": [
                {
                  "name": "lionTagName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isObject",
              "static": true,
              "parameters": [
                {
                  "name": "objValue"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Utils",
          "declaration": {
            "name": "Utils",
            "module": "src/helpers/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Utils",
            "module": "src/helpers/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/helpers/versionHelpers.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "sdkVersion",
          "type": {
            "text": "string"
          },
          "default": "'8.7'"
        },
        {
          "kind": "function",
          "name": "compareSdkPCoreVersions"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sdkVersion",
          "declaration": {
            "name": "sdkVersion",
            "module": "src/helpers/versionHelpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "compareSdkPCoreVersions",
          "declaration": {
            "name": "compareSdkPCoreVersions",
            "module": "src/helpers/versionHelpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/sampleCommon.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "sampleMainInit",
          "parameters": [
            {
              "name": "elMain"
            },
            {
              "name": "startingComp"
            },
            {
              "name": "mainElName"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sampleMainInit",
          "declaration": {
            "name": "sampleMainInit",
            "module": "src/samples/sampleCommon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/bridge/BridgeBase/bootstrap-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "bootstrapStyles",
          "default": "css`\n  /*!\n * Bootstrap v4.6.0 (https://getbootstrap.com/)\n * Copyright 2011-2021 The Bootstrap Authors\n * Copyright 2011-2021 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n */\n  :root {\n    --blue: #007bff;\n    --indigo: #6610f2;\n    --purple: #6f42c1;\n    --pink: #e83e8c;\n    --red: #dc3545;\n    --orange: #fd7e14;\n    --yellow: #ffc107;\n    --green: #28a745;\n    --teal: #20c997;\n    --cyan: #17a2b8;\n    --white: #fff;\n    --gray: #6c757d;\n    --gray-dark: #343a40;\n    --primary: #007bff;\n    --secondary: #6c757d;\n    --success: #28a745;\n    --info: #17a2b8;\n    --warning: #ffc107;\n    --danger: #dc3545;\n    --light: #f8f9fa;\n    --dark: #343a40;\n    --breakpoint-xs: 0;\n    --breakpoint-sm: 576px;\n    --breakpoint-md: 768px;\n    --breakpoint-lg: 992px;\n    --breakpoint-xl: 1200px;\n    --font-family-sans-serif: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', 'Liberation Sans',\n      sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n    --font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;\n  }\n  *,\n  ::after,\n  ::before {\n    box-sizing: border-box;\n  }\n  html {\n    font-family: sans-serif;\n    line-height: 1.15;\n    -webkit-text-size-adjust: 100%;\n    -webkit-tap-highlight-color: transparent;\n  }\n  article,\n  aside,\n  figcaption,\n  figure,\n  footer,\n  header,\n  hgroup,\n  main,\n  nav,\n  section {\n    display: block;\n  }\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', 'Liberation Sans', sans-serif,\n      'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.5;\n    color: #212529;\n    text-align: left;\n    background-color: #fff;\n  }\n  [tabindex='-1']:focus:not(:focus-visible) {\n    outline: 0 !important;\n  }\n  hr {\n    box-sizing: content-box;\n    height: 0;\n    overflow: visible;\n  }\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n  }\n  p {\n    margin-top: 0;\n    margin-bottom: 1rem;\n  }\n  abbr[data-original-title],\n  abbr[title] {\n    text-decoration: underline;\n    -webkit-text-decoration: underline dotted;\n    text-decoration: underline dotted;\n    cursor: help;\n    border-bottom: 0;\n    -webkit-text-decoration-skip-ink: none;\n    text-decoration-skip-ink: none;\n  }\n  address {\n    margin-bottom: 1rem;\n    font-style: normal;\n    line-height: inherit;\n  }\n  dl,\n  ol,\n  ul {\n    margin-top: 0;\n    margin-bottom: 1rem;\n  }\n  ol ol,\n  ol ul,\n  ul ol,\n  ul ul {\n    margin-bottom: 0;\n  }\n  dt {\n    font-weight: 700;\n  }\n  dd {\n    margin-bottom: 0.5rem;\n    margin-left: 0;\n  }\n  blockquote {\n    margin: 0 0 1rem;\n  }\n  b,\n  strong {\n    font-weight: bolder;\n  }\n  small {\n    font-size: 80%;\n  }\n  sub,\n  sup {\n    position: relative;\n    font-size: 75%;\n    line-height: 0;\n    vertical-align: baseline;\n  }\n  sub {\n    bottom: -0.25em;\n  }\n  sup {\n    top: -0.5em;\n  }\n  a {\n    color: #007bff;\n    text-decoration: none;\n    background-color: transparent;\n  }\n  a:hover {\n    color: #0056b3;\n    text-decoration: underline;\n  }\n  a:not([href]):not([class]) {\n    color: inherit;\n    text-decoration: none;\n  }\n  a:not([href]):not([class]):hover {\n    color: inherit;\n    text-decoration: none;\n  }\n  code,\n  kbd,\n  pre,\n  samp {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;\n    font-size: 1em;\n  }\n  pre {\n    margin-top: 0;\n    margin-bottom: 1rem;\n    overflow: auto;\n    -ms-overflow-style: scrollbar;\n  }\n  figure {\n    margin: 0 0 1rem;\n  }\n  img {\n    vertical-align: middle;\n    border-style: none;\n  }\n  svg {\n    overflow: hidden;\n    vertical-align: middle;\n  }\n  table {\n    border-collapse: collapse;\n  }\n  caption {\n    padding-top: 0.75rem;\n    padding-bottom: 0.75rem;\n    color: #6c757d;\n    text-align: left;\n    caption-side: bottom;\n  }\n  th {\n    text-align: inherit;\n    text-align: -webkit-match-parent;\n  }\n  label {\n    display: inline-block;\n    margin-bottom: 0.5rem;\n  }\n  button {\n    border-radius: 0;\n  }\n  button:focus:not(:focus-visible) {\n    outline: 0;\n  }\n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    margin: 0;\n    font-family: inherit;\n    font-size: inherit;\n    line-height: inherit;\n  }\n  button,\n  input {\n    overflow: visible;\n  }\n  button,\n  select {\n    text-transform: none;\n  }\n  [role='button'] {\n    cursor: pointer;\n  }\n  select {\n    word-wrap: normal;\n  }\n  [type='button'],\n  [type='reset'],\n  [type='submit'],\n  button {\n    -webkit-appearance: button;\n  }\n  [type='button']:not(:disabled),\n  [type='reset']:not(:disabled),\n  [type='submit']:not(:disabled),\n  button:not(:disabled) {\n    cursor: pointer;\n  }\n  [type='button']::-moz-focus-inner,\n  [type='reset']::-moz-focus-inner,\n  [type='submit']::-moz-focus-inner,\n  button::-moz-focus-inner {\n    padding: 0;\n    border-style: none;\n  }\n  input[type='checkbox'],\n  input[type='radio'] {\n    box-sizing: border-box;\n    padding: 0;\n  }\n  textarea {\n    overflow: auto;\n    resize: vertical;\n  }\n  fieldset {\n    min-width: 0;\n    padding: 0;\n    margin: 0;\n    border: 0;\n  }\n  legend {\n    display: block;\n    width: 100%;\n    max-width: 100%;\n    padding: 0;\n    margin-bottom: 0.5rem;\n    font-size: 1.5rem;\n    line-height: inherit;\n    color: inherit;\n    white-space: normal;\n  }\n  progress {\n    vertical-align: baseline;\n  }\n  [type='number']::-webkit-inner-spin-button,\n  [type='number']::-webkit-outer-spin-button {\n    height: auto;\n  }\n  [type='search'] {\n    outline-offset: -2px;\n    -webkit-appearance: none;\n  }\n  [type='search']::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n  ::-webkit-file-upload-button {\n    font: inherit;\n    -webkit-appearance: button;\n  }\n  output {\n    display: inline-block;\n  }\n  summary {\n    display: list-item;\n    cursor: pointer;\n  }\n  template {\n    display: none;\n  }\n  [hidden] {\n    display: none !important;\n  }\n  .h1,\n  .h2,\n  .h3,\n  .h4,\n  .h5,\n  .h6,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin-bottom: 0.5rem;\n    font-weight: 500;\n    line-height: 1.2;\n  }\n  .h1,\n  h1 {\n    font-size: 2.5rem;\n  }\n  .h2,\n  h2 {\n    font-size: 2rem;\n  }\n  .h3,\n  h3 {\n    font-size: 1.75rem;\n  }\n  .h4,\n  h4 {\n    font-size: 1.5rem;\n  }\n  .h5,\n  h5 {\n    font-size: 1.25rem;\n  }\n  .h6,\n  h6 {\n    font-size: 1rem;\n  }\n  .lead {\n    font-size: 1.25rem;\n    font-weight: 300;\n  }\n  .display-1 {\n    font-size: 6rem;\n    font-weight: 300;\n    line-height: 1.2;\n  }\n  .display-2 {\n    font-size: 5.5rem;\n    font-weight: 300;\n    line-height: 1.2;\n  }\n  .display-3 {\n    font-size: 4.5rem;\n    font-weight: 300;\n    line-height: 1.2;\n  }\n  .display-4 {\n    font-size: 3.5rem;\n    font-weight: 300;\n    line-height: 1.2;\n  }\n  hr {\n    margin-top: 1rem;\n    margin-bottom: 1rem;\n    border: 0;\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\n  }\n  .small,\n  small {\n    font-size: 80%;\n    font-weight: 400;\n  }\n  .mark,\n  mark {\n    padding: 0.2em;\n    background-color: #fcf8e3;\n  }\n  .list-unstyled {\n    padding-left: 0;\n    list-style: none;\n  }\n  .list-inline {\n    padding-left: 0;\n    list-style: none;\n  }\n  .list-inline-item {\n    display: inline-block;\n  }\n  .list-inline-item:not(:last-child) {\n    margin-right: 0.5rem;\n  }\n  .initialism {\n    font-size: 90%;\n    text-transform: uppercase;\n  }\n  .blockquote {\n    margin-bottom: 1rem;\n    font-size: 1.25rem;\n  }\n  .blockquote-footer {\n    display: block;\n    font-size: 80%;\n    color: #6c757d;\n  }\n  .blockquote-footer::before {\n    content: '\\\\2014\\\\00A0';\n  }\n  .img-fluid {\n    max-width: 100%;\n    height: auto;\n  }\n  .img-thumbnail {\n    padding: 0.25rem;\n    background-color: #fff;\n    border: 1px solid #dee2e6;\n    border-radius: 0.25rem;\n    max-width: 100%;\n    height: auto;\n  }\n  .figure {\n    display: inline-block;\n  }\n  .figure-img {\n    margin-bottom: 0.5rem;\n    line-height: 1;\n  }\n  .figure-caption {\n    font-size: 90%;\n    color: #6c757d;\n  }\n  code {\n    font-size: 87.5%;\n    color: #e83e8c;\n    word-wrap: break-word;\n  }\n  a > code {\n    color: inherit;\n  }\n  kbd {\n    padding: 0.2rem 0.4rem;\n    font-size: 87.5%;\n    color: #fff;\n    background-color: #212529;\n    border-radius: 0.2rem;\n  }\n  kbd kbd {\n    padding: 0;\n    font-size: 100%;\n    font-weight: 700;\n  }\n  pre {\n    display: block;\n    font-size: 87.5%;\n    color: #212529;\n  }\n  pre code {\n    font-size: inherit;\n    color: inherit;\n    word-break: normal;\n  }\n  .pre-scrollable {\n    max-height: 340px;\n    overflow-y: scroll;\n  }\n  .container,\n  .container-fluid,\n  .container-lg,\n  .container-md,\n  .container-sm,\n  .container-xl {\n    width: 100%;\n    padding-right: 15px;\n    padding-left: 15px;\n    margin-right: auto;\n    margin-left: auto;\n  }\n  @media (min-width: 576px) {\n    .container,\n    .container-sm {\n      max-width: 540px;\n    }\n  }\n  @media (min-width: 768px) {\n    .container,\n    .container-md,\n    .container-sm {\n      max-width: 720px;\n    }\n  }\n  @media (min-width: 992px) {\n    .container,\n    .container-lg,\n    .container-md,\n    .container-sm {\n      max-width: 960px;\n    }\n  }\n  @media (min-width: 1200px) {\n    .container,\n    .container-lg,\n    .container-md,\n    .container-sm,\n    .container-xl {\n      max-width: 1140px;\n    }\n  }\n  .row {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    margin-right: -15px;\n    margin-left: -15px;\n  }\n  .no-gutters {\n    margin-right: 0;\n    margin-left: 0;\n  }\n  .no-gutters > .col,\n  .no-gutters > [class*='col-'] {\n    padding-right: 0;\n    padding-left: 0;\n  }\n  .col,\n  .col-1,\n  .col-10,\n  .col-11,\n  .col-12,\n  .col-2,\n  .col-3,\n  .col-4,\n  .col-5,\n  .col-6,\n  .col-7,\n  .col-8,\n  .col-9,\n  .col-auto,\n  .col-lg,\n  .col-lg-1,\n  .col-lg-10,\n  .col-lg-11,\n  .col-lg-12,\n  .col-lg-2,\n  .col-lg-3,\n  .col-lg-4,\n  .col-lg-5,\n  .col-lg-6,\n  .col-lg-7,\n  .col-lg-8,\n  .col-lg-9,\n  .col-lg-auto,\n  .col-md,\n  .col-md-1,\n  .col-md-10,\n  .col-md-11,\n  .col-md-12,\n  .col-md-2,\n  .col-md-3,\n  .col-md-4,\n  .col-md-5,\n  .col-md-6,\n  .col-md-7,\n  .col-md-8,\n  .col-md-9,\n  .col-md-auto,\n  .col-sm,\n  .col-sm-1,\n  .col-sm-10,\n  .col-sm-11,\n  .col-sm-12,\n  .col-sm-2,\n  .col-sm-3,\n  .col-sm-4,\n  .col-sm-5,\n  .col-sm-6,\n  .col-sm-7,\n  .col-sm-8,\n  .col-sm-9,\n  .col-sm-auto,\n  .col-xl,\n  .col-xl-1,\n  .col-xl-10,\n  .col-xl-11,\n  .col-xl-12,\n  .col-xl-2,\n  .col-xl-3,\n  .col-xl-4,\n  .col-xl-5,\n  .col-xl-6,\n  .col-xl-7,\n  .col-xl-8,\n  .col-xl-9,\n  .col-xl-auto {\n    position: relative;\n    width: 100%;\n    padding-right: 15px;\n    padding-left: 15px;\n  }\n  .col {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .row-cols-1 > * {\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .row-cols-2 > * {\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .row-cols-3 > * {\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .row-cols-4 > * {\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .row-cols-5 > * {\n    -ms-flex: 0 0 20%;\n    flex: 0 0 20%;\n    max-width: 20%;\n  }\n  .row-cols-6 > * {\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-auto {\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: 100%;\n  }\n  .col-1 {\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-2 {\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-3 {\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-4 {\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-5 {\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-6 {\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-7 {\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-8 {\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-9 {\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-10 {\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-11 {\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-12 {\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-first {\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-last {\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-0 {\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-1 {\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-2 {\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-3 {\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-4 {\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-5 {\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-6 {\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-7 {\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-8 {\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-9 {\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-10 {\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-11 {\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-12 {\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-3 {\n    margin-left: 25%;\n  }\n  .offset-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-6 {\n    margin-left: 50%;\n  }\n  .offset-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-9 {\n    margin-left: 75%;\n  }\n  .offset-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-11 {\n    margin-left: 91.666667%;\n  }\n  @media (min-width: 576px) {\n    .col-sm {\n      -ms-flex-preferred-size: 0;\n      flex-basis: 0;\n      -ms-flex-positive: 1;\n      flex-grow: 1;\n      max-width: 100%;\n    }\n    .row-cols-sm-1 > * {\n      -ms-flex: 0 0 100%;\n      flex: 0 0 100%;\n      max-width: 100%;\n    }\n    .row-cols-sm-2 > * {\n      -ms-flex: 0 0 50%;\n      flex: 0 0 50%;\n      max-width: 50%;\n    }\n    .row-cols-sm-3 > * {\n      -ms-flex: 0 0 33.333333%;\n      flex: 0 0 33.333333%;\n      max-width: 33.333333%;\n    }\n    .row-cols-sm-4 > * {\n      -ms-flex: 0 0 25%;\n      flex: 0 0 25%;\n      max-width: 25%;\n    }\n    .row-cols-sm-5 > * {\n      -ms-flex: 0 0 20%;\n      flex: 0 0 20%;\n      max-width: 20%;\n    }\n    .row-cols-sm-6 > * {\n      -ms-flex: 0 0 16.666667%;\n      flex: 0 0 16.666667%;\n      max-width: 16.666667%;\n    }\n    .col-sm-auto {\n      -ms-flex: 0 0 auto;\n      flex: 0 0 auto;\n      width: auto;\n      max-width: 100%;\n    }\n    .col-sm-1 {\n      -ms-flex: 0 0 8.333333%;\n      flex: 0 0 8.333333%;\n      max-width: 8.333333%;\n    }\n    .col-sm-2 {\n      -ms-flex: 0 0 16.666667%;\n      flex: 0 0 16.666667%;\n      max-width: 16.666667%;\n    }\n    .col-sm-3 {\n      -ms-flex: 0 0 25%;\n      flex: 0 0 25%;\n      max-width: 25%;\n    }\n    .col-sm-4 {\n      -ms-flex: 0 0 33.333333%;\n      flex: 0 0 33.333333%;\n      max-width: 33.333333%;\n    }\n    .col-sm-5 {\n      -ms-flex: 0 0 41.666667%;\n      flex: 0 0 41.666667%;\n      max-width: 41.666667%;\n    }\n    .col-sm-6 {\n      -ms-flex: 0 0 50%;\n      flex: 0 0 50%;\n      max-width: 50%;\n    }\n    .col-sm-7 {\n      -ms-flex: 0 0 58.333333%;\n      flex: 0 0 58.333333%;\n      max-width: 58.333333%;\n    }\n    .col-sm-8 {\n      -ms-flex: 0 0 66.666667%;\n      flex: 0 0 66.666667%;\n      max-width: 66.666667%;\n    }\n    .col-sm-9 {\n      -ms-flex: 0 0 75%;\n      flex: 0 0 75%;\n      max-width: 75%;\n    }\n    .col-sm-10 {\n      -ms-flex: 0 0 83.333333%;\n      flex: 0 0 83.333333%;\n      max-width: 83.333333%;\n    }\n    .col-sm-11 {\n      -ms-flex: 0 0 91.666667%;\n      flex: 0 0 91.666667%;\n      max-width: 91.666667%;\n    }\n    .col-sm-12 {\n      -ms-flex: 0 0 100%;\n      flex: 0 0 100%;\n      max-width: 100%;\n    }\n    .order-sm-first {\n      -ms-flex-order: -1;\n      order: -1;\n    }\n    .order-sm-last {\n      -ms-flex-order: 13;\n      order: 13;\n    }\n    .order-sm-0 {\n      -ms-flex-order: 0;\n      order: 0;\n    }\n    .order-sm-1 {\n      -ms-flex-order: 1;\n      order: 1;\n    }\n    .order-sm-2 {\n      -ms-flex-order: 2;\n      order: 2;\n    }\n    .order-sm-3 {\n      -ms-flex-order: 3;\n      order: 3;\n    }\n    .order-sm-4 {\n      -ms-flex-order: 4;\n      order: 4;\n    }\n    .order-sm-5 {\n      -ms-flex-order: 5;\n      order: 5;\n    }\n    .order-sm-6 {\n      -ms-flex-order: 6;\n      order: 6;\n    }\n    .order-sm-7 {\n      -ms-flex-order: 7;\n      order: 7;\n    }\n    .order-sm-8 {\n      -ms-flex-order: 8;\n      order: 8;\n    }\n    .order-sm-9 {\n      -ms-flex-order: 9;\n      order: 9;\n    }\n    .order-sm-10 {\n      -ms-flex-order: 10;\n      order: 10;\n    }\n    .order-sm-11 {\n      -ms-flex-order: 11;\n      order: 11;\n    }\n    .order-sm-12 {\n      -ms-flex-order: 12;\n      order: 12;\n    }\n    .offset-sm-0 {\n      margin-left: 0;\n    }\n    .offset-sm-1 {\n      margin-left: 8.333333%;\n    }\n    .offset-sm-2 {\n      margin-left: 16.666667%;\n    }\n    .offset-sm-3 {\n      margin-left: 25%;\n    }\n    .offset-sm-4 {\n      margin-left: 33.333333%;\n    }\n    .offset-sm-5 {\n      margin-left: 41.666667%;\n    }\n    .offset-sm-6 {\n      margin-left: 50%;\n    }\n    .offset-sm-7 {\n      margin-left: 58.333333%;\n    }\n    .offset-sm-8 {\n      margin-left: 66.666667%;\n    }\n    .offset-sm-9 {\n      margin-left: 75%;\n    }\n    .offset-sm-10 {\n      margin-left: 83.333333%;\n    }\n    .offset-sm-11 {\n      margin-left: 91.666667%;\n    }\n  }\n  @media (min-width: 768px) {\n    .col-md {\n      -ms-flex-preferred-size: 0;\n      flex-basis: 0;\n      -ms-flex-positive: 1;\n      flex-grow: 1;\n      max-width: 100%;\n    }\n    .row-cols-md-1 > * {\n      -ms-flex: 0 0 100%;\n      flex: 0 0 100%;\n      max-width: 100%;\n    }\n    .row-cols-md-2 > * {\n      -ms-flex: 0 0 50%;\n      flex: 0 0 50%;\n      max-width: 50%;\n    }\n    .row-cols-md-3 > * {\n      -ms-flex: 0 0 33.333333%;\n      flex: 0 0 33.333333%;\n      max-width: 33.333333%;\n    }\n    .row-cols-md-4 > * {\n      -ms-flex: 0 0 25%;\n      flex: 0 0 25%;\n      max-width: 25%;\n    }\n    .row-cols-md-5 > * {\n      -ms-flex: 0 0 20%;\n      flex: 0 0 20%;\n      max-width: 20%;\n    }\n    .row-cols-md-6 > * {\n      -ms-flex: 0 0 16.666667%;\n      flex: 0 0 16.666667%;\n      max-width: 16.666667%;\n    }\n    .col-md-auto {\n      -ms-flex: 0 0 auto;\n      flex: 0 0 auto;\n      width: auto;\n      max-width: 100%;\n    }\n    .col-md-1 {\n      -ms-flex: 0 0 8.333333%;\n      flex: 0 0 8.333333%;\n      max-width: 8.333333%;\n    }\n    .col-md-2 {\n      -ms-flex: 0 0 16.666667%;\n      flex: 0 0 16.666667%;\n      max-width: 16.666667%;\n    }\n    .col-md-3 {\n      -ms-flex: 0 0 25%;\n      flex: 0 0 25%;\n      max-width: 25%;\n    }\n    .col-md-4 {\n      -ms-flex: 0 0 33.333333%;\n      flex: 0 0 33.333333%;\n      max-width: 33.333333%;\n    }\n    .col-md-5 {\n      -ms-flex: 0 0 41.666667%;\n      flex: 0 0 41.666667%;\n      max-width: 41.666667%;\n    }\n    .col-md-6 {\n      -ms-flex: 0 0 50%;\n      flex: 0 0 50%;\n      max-width: 50%;\n    }\n    .col-md-7 {\n      -ms-flex: 0 0 58.333333%;\n      flex: 0 0 58.333333%;\n      max-width: 58.333333%;\n    }\n    .col-md-8 {\n      -ms-flex: 0 0 66.666667%;\n      flex: 0 0 66.666667%;\n      max-width: 66.666667%;\n    }\n    .col-md-9 {\n      -ms-flex: 0 0 75%;\n      flex: 0 0 75%;\n      max-width: 75%;\n    }\n    .col-md-10 {\n      -ms-flex: 0 0 83.333333%;\n      flex: 0 0 83.333333%;\n      max-width: 83.333333%;\n    }\n    .col-md-11 {\n      -ms-flex: 0 0 91.666667%;\n      flex: 0 0 91.666667%;\n      max-width: 91.666667%;\n    }\n    .col-md-12 {\n      -ms-flex: 0 0 100%;\n      flex: 0 0 100%;\n      max-width: 100%;\n    }\n    .order-md-first {\n      -ms-flex-order: -1;\n      order: -1;\n    }\n    .order-md-last {\n      -ms-flex-order: 13;\n      order: 13;\n    }\n    .order-md-0 {\n      -ms-flex-order: 0;\n      order: 0;\n    }\n    .order-md-1 {\n      -ms-flex-order: 1;\n      order: 1;\n    }\n    .order-md-2 {\n      -ms-flex-order: 2;\n      order: 2;\n    }\n    .order-md-3 {\n      -ms-flex-order: 3;\n      order: 3;\n    }\n    .order-md-4 {\n      -ms-flex-order: 4;\n      order: 4;\n    }\n    .order-md-5 {\n      -ms-flex-order: 5;\n      order: 5;\n    }\n    .order-md-6 {\n      -ms-flex-order: 6;\n      order: 6;\n    }\n    .order-md-7 {\n      -ms-flex-order: 7;\n      order: 7;\n    }\n    .order-md-8 {\n      -ms-flex-order: 8;\n      order: 8;\n    }\n    .order-md-9 {\n      -ms-flex-order: 9;\n      order: 9;\n    }\n    .order-md-10 {\n      -ms-flex-order: 10;\n      order: 10;\n    }\n    .order-md-11 {\n      -ms-flex-order: 11;\n      order: 11;\n    }\n    .order-md-12 {\n      -ms-flex-order: 12;\n      order: 12;\n    }\n    .offset-md-0 {\n      margin-left: 0;\n    }\n    .offset-md-1 {\n      margin-left: 8.333333%;\n    }\n    .offset-md-2 {\n      margin-left: 16.666667%;\n    }\n    .offset-md-3 {\n      margin-left: 25%;\n    }\n    .offset-md-4 {\n      margin-left: 33.333333%;\n    }\n    .offset-md-5 {\n      margin-left: 41.666667%;\n    }\n    .offset-md-6 {\n      margin-left: 50%;\n    }\n    .offset-md-7 {\n      margin-left: 58.333333%;\n    }\n    .offset-md-8 {\n      margin-left: 66.666667%;\n    }\n    .offset-md-9 {\n      margin-left: 75%;\n    }\n    .offset-md-10 {\n      margin-left: 83.333333%;\n    }\n    .offset-md-11 {\n      margin-left: 91.666667%;\n    }\n  }\n  @media (min-width: 992px) {\n    .col-lg {\n      -ms-flex-preferred-size: 0;\n      flex-basis: 0;\n      -ms-flex-positive: 1;\n      flex-grow: 1;\n      max-width: 100%;\n    }\n    .row-cols-lg-1 > * {\n      -ms-flex: 0 0 100%;\n      flex: 0 0 100%;\n      max-width: 100%;\n    }\n    .row-cols-lg-2 > * {\n      -ms-flex: 0 0 50%;\n      flex: 0 0 50%;\n      max-width: 50%;\n    }\n    .row-cols-lg-3 > * {\n      -ms-flex: 0 0 33.333333%;\n      flex: 0 0 33.333333%;\n      max-width: 33.333333%;\n    }\n    .row-cols-lg-4 > * {\n      -ms-flex: 0 0 25%;\n      flex: 0 0 25%;\n      max-width: 25%;\n    }\n    .row-cols-lg-5 > * {\n      -ms-flex: 0 0 20%;\n      flex: 0 0 20%;\n      max-width: 20%;\n    }\n    .row-cols-lg-6 > * {\n      -ms-flex: 0 0 16.666667%;\n      flex: 0 0 16.666667%;\n      max-width: 16.666667%;\n    }\n    .col-lg-auto {\n      -ms-flex: 0 0 auto;\n      flex: 0 0 auto;\n      width: auto;\n      max-width: 100%;\n    }\n    .col-lg-1 {\n      -ms-flex: 0 0 8.333333%;\n      flex: 0 0 8.333333%;\n      max-width: 8.333333%;\n    }\n    .col-lg-2 {\n      -ms-flex: 0 0 16.666667%;\n      flex: 0 0 16.666667%;\n      max-width: 16.666667%;\n    }\n    .col-lg-3 {\n      -ms-flex: 0 0 25%;\n      flex: 0 0 25%;\n      max-width: 25%;\n    }\n    .col-lg-4 {\n      -ms-flex: 0 0 33.333333%;\n      flex: 0 0 33.333333%;\n      max-width: 33.333333%;\n    }\n    .col-lg-5 {\n      -ms-flex: 0 0 41.666667%;\n      flex: 0 0 41.666667%;\n      max-width: 41.666667%;\n    }\n    .col-lg-6 {\n      -ms-flex: 0 0 50%;\n      flex: 0 0 50%;\n      max-width: 50%;\n    }\n    .col-lg-7 {\n      -ms-flex: 0 0 58.333333%;\n      flex: 0 0 58.333333%;\n      max-width: 58.333333%;\n    }\n    .col-lg-8 {\n      -ms-flex: 0 0 66.666667%;\n      flex: 0 0 66.666667%;\n      max-width: 66.666667%;\n    }\n    .col-lg-9 {\n      -ms-flex: 0 0 75%;\n      flex: 0 0 75%;\n      max-width: 75%;\n    }\n    .col-lg-10 {\n      -ms-flex: 0 0 83.333333%;\n      flex: 0 0 83.333333%;\n      max-width: 83.333333%;\n    }\n    .col-lg-11 {\n      -ms-flex: 0 0 91.666667%;\n      flex: 0 0 91.666667%;\n      max-width: 91.666667%;\n    }\n    .col-lg-12 {\n      -ms-flex: 0 0 100%;\n      flex: 0 0 100%;\n      max-width: 100%;\n    }\n    .order-lg-first {\n      -ms-flex-order: -1;\n      order: -1;\n    }\n    .order-lg-last {\n      -ms-flex-order: 13;\n      order: 13;\n    }\n    .order-lg-0 {\n      -ms-flex-order: 0;\n      order: 0;\n    }\n    .order-lg-1 {\n      -ms-flex-order: 1;\n      order: 1;\n    }\n    .order-lg-2 {\n      -ms-flex-order: 2;\n      order: 2;\n    }\n    .order-lg-3 {\n      -ms-flex-order: 3;\n      order: 3;\n    }\n    .order-lg-4 {\n      -ms-flex-order: 4;\n      order: 4;\n    }\n    .order-lg-5 {\n      -ms-flex-order: 5;\n      order: 5;\n    }\n    .order-lg-6 {\n      -ms-flex-order: 6;\n      order: 6;\n    }\n    .order-lg-7 {\n      -ms-flex-order: 7;\n      order: 7;\n    }\n    .order-lg-8 {\n      -ms-flex-order: 8;\n      order: 8;\n    }\n    .order-lg-9 {\n      -ms-flex-order: 9;\n      order: 9;\n    }\n    .order-lg-10 {\n      -ms-flex-order: 10;\n      order: 10;\n    }\n    .order-lg-11 {\n      -ms-flex-order: 11;\n      order: 11;\n    }\n    .order-lg-12 {\n      -ms-flex-order: 12;\n      order: 12;\n    }\n    .offset-lg-0 {\n      margin-left: 0;\n    }\n    .offset-lg-1 {\n      margin-left: 8.333333%;\n    }\n    .offset-lg-2 {\n      margin-left: 16.666667%;\n    }\n    .offset-lg-3 {\n      margin-left: 25%;\n    }\n    .offset-lg-4 {\n      margin-left: 33.333333%;\n    }\n    .offset-lg-5 {\n      margin-left: 41.666667%;\n    }\n    .offset-lg-6 {\n      margin-left: 50%;\n    }\n    .offset-lg-7 {\n      margin-left: 58.333333%;\n    }\n    .offset-lg-8 {\n      margin-left: 66.666667%;\n    }\n    .offset-lg-9 {\n      margin-left: 75%;\n    }\n    .offset-lg-10 {\n      margin-left: 83.333333%;\n    }\n    .offset-lg-11 {\n      margin-left: 91.666667%;\n    }\n  }\n  @media (min-width: 1200px) {\n    .col-xl {\n      -ms-flex-preferred-size: 0;\n      flex-basis: 0;\n      -ms-flex-positive: 1;\n      flex-grow: 1;\n      max-width: 100%;\n    }\n    .row-cols-xl-1 > * {\n      -ms-flex: 0 0 100%;\n      flex: 0 0 100%;\n      max-width: 100%;\n    }\n    .row-cols-xl-2 > * {\n      -ms-flex: 0 0 50%;\n      flex: 0 0 50%;\n      max-width: 50%;\n    }\n    .row-cols-xl-3 > * {\n      -ms-flex: 0 0 33.333333%;\n      flex: 0 0 33.333333%;\n      max-width: 33.333333%;\n    }\n    .row-cols-xl-4 > * {\n      -ms-flex: 0 0 25%;\n      flex: 0 0 25%;\n      max-width: 25%;\n    }\n    .row-cols-xl-5 > * {\n      -ms-flex: 0 0 20%;\n      flex: 0 0 20%;\n      max-width: 20%;\n    }\n    .row-cols-xl-6 > * {\n      -ms-flex: 0 0 16.666667%;\n      flex: 0 0 16.666667%;\n      max-width: 16.666667%;\n    }\n    .col-xl-auto {\n      -ms-flex: 0 0 auto;\n      flex: 0 0 auto;\n      width: auto;\n      max-width: 100%;\n    }\n    .col-xl-1 {\n      -ms-flex: 0 0 8.333333%;\n      flex: 0 0 8.333333%;\n      max-width: 8.333333%;\n    }\n    .col-xl-2 {\n      -ms-flex: 0 0 16.666667%;\n      flex: 0 0 16.666667%;\n      max-width: 16.666667%;\n    }\n    .col-xl-3 {\n      -ms-flex: 0 0 25%;\n      flex: 0 0 25%;\n      max-width: 25%;\n    }\n    .col-xl-4 {\n      -ms-flex: 0 0 33.333333%;\n      flex: 0 0 33.333333%;\n      max-width: 33.333333%;\n    }\n    .col-xl-5 {\n      -ms-flex: 0 0 41.666667%;\n      flex: 0 0 41.666667%;\n      max-width: 41.666667%;\n    }\n    .col-xl-6 {\n      -ms-flex: 0 0 50%;\n      flex: 0 0 50%;\n      max-width: 50%;\n    }\n    .col-xl-7 {\n      -ms-flex: 0 0 58.333333%;\n      flex: 0 0 58.333333%;\n      max-width: 58.333333%;\n    }\n    .col-xl-8 {\n      -ms-flex: 0 0 66.666667%;\n      flex: 0 0 66.666667%;\n      max-width: 66.666667%;\n    }\n    .col-xl-9 {\n      -ms-flex: 0 0 75%;\n      flex: 0 0 75%;\n      max-width: 75%;\n    }\n    .col-xl-10 {\n      -ms-flex: 0 0 83.333333%;\n      flex: 0 0 83.333333%;\n      max-width: 83.333333%;\n    }\n    .col-xl-11 {\n      -ms-flex: 0 0 91.666667%;\n      flex: 0 0 91.666667%;\n      max-width: 91.666667%;\n    }\n    .col-xl-12 {\n      -ms-flex: 0 0 100%;\n      flex: 0 0 100%;\n      max-width: 100%;\n    }\n    .order-xl-first {\n      -ms-flex-order: -1;\n      order: -1;\n    }\n    .order-xl-last {\n      -ms-flex-order: 13;\n      order: 13;\n    }\n    .order-xl-0 {\n      -ms-flex-order: 0;\n      order: 0;\n    }\n    .order-xl-1 {\n      -ms-flex-order: 1;\n      order: 1;\n    }\n    .order-xl-2 {\n      -ms-flex-order: 2;\n      order: 2;\n    }\n    .order-xl-3 {\n      -ms-flex-order: 3;\n      order: 3;\n    }\n    .order-xl-4 {\n      -ms-flex-order: 4;\n      order: 4;\n    }\n    .order-xl-5 {\n      -ms-flex-order: 5;\n      order: 5;\n    }\n    .order-xl-6 {\n      -ms-flex-order: 6;\n      order: 6;\n    }\n    .order-xl-7 {\n      -ms-flex-order: 7;\n      order: 7;\n    }\n    .order-xl-8 {\n      -ms-flex-order: 8;\n      order: 8;\n    }\n    .order-xl-9 {\n      -ms-flex-order: 9;\n      order: 9;\n    }\n    .order-xl-10 {\n      -ms-flex-order: 10;\n      order: 10;\n    }\n    .order-xl-11 {\n      -ms-flex-order: 11;\n      order: 11;\n    }\n    .order-xl-12 {\n      -ms-flex-order: 12;\n      order: 12;\n    }\n    .offset-xl-0 {\n      margin-left: 0;\n    }\n    .offset-xl-1 {\n      margin-left: 8.333333%;\n    }\n    .offset-xl-2 {\n      margin-left: 16.666667%;\n    }\n    .offset-xl-3 {\n      margin-left: 25%;\n    }\n    .offset-xl-4 {\n      margin-left: 33.333333%;\n    }\n    .offset-xl-5 {\n      margin-left: 41.666667%;\n    }\n    .offset-xl-6 {\n      margin-left: 50%;\n    }\n    .offset-xl-7 {\n      margin-left: 58.333333%;\n    }\n    .offset-xl-8 {\n      margin-left: 66.666667%;\n    }\n    .offset-xl-9 {\n      margin-left: 75%;\n    }\n    .offset-xl-10 {\n      margin-left: 83.333333%;\n    }\n    .offset-xl-11 {\n      margin-left: 91.666667%;\n    }\n  }\n  .table {\n    width: 100%;\n    margin-bottom: 1rem;\n    color: #212529;\n  }\n  .table td,\n  .table th {\n    padding: 0.75rem;\n    vertical-align: top;\n    border-top: 1px solid #dee2e6;\n  }\n  .table thead th {\n    vertical-align: bottom;\n    border-bottom: 2px solid #dee2e6;\n  }\n  .table tbody + tbody {\n    border-top: 2px solid #dee2e6;\n  }\n  .table-sm td,\n  .table-sm th {\n    padding: 0.3rem;\n  }\n  .table-bordered {\n    border: 1px solid #dee2e6;\n  }\n  .table-bordered td,\n  .table-bordered th {\n    border: 1px solid #dee2e6;\n  }\n  .table-bordered thead td,\n  .table-bordered thead th {\n    border-bottom-width: 2px;\n  }\n  .table-borderless tbody + tbody,\n  .table-borderless td,\n  .table-borderless th,\n  .table-borderless thead th {\n    border: 0;\n  }\n  .table-striped tbody tr:nth-of-type(odd) {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  .table-hover tbody tr:hover {\n    color: #212529;\n    background-color: rgba(0, 0, 0, 0.075);\n  }\n  .table-primary,\n  .table-primary > td,\n  .table-primary > th {\n    background-color: #b8daff;\n  }\n  .table-primary tbody + tbody,\n  .table-primary td,\n  .table-primary th,\n  .table-primary thead th {\n    border-color: #7abaff;\n  }\n  .table-hover .table-primary:hover {\n    background-color: #9fcdff;\n  }\n  .table-hover .table-primary:hover > td,\n  .table-hover .table-primary:hover > th {\n    background-color: #9fcdff;\n  }\n  .table-secondary,\n  .table-secondary > td,\n  .table-secondary > th {\n    background-color: #d6d8db;\n  }\n  .table-secondary tbody + tbody,\n  .table-secondary td,\n  .table-secondary th,\n  .table-secondary thead th {\n    border-color: #b3b7bb;\n  }\n  .table-hover .table-secondary:hover {\n    background-color: #c8cbcf;\n  }\n  .table-hover .table-secondary:hover > td,\n  .table-hover .table-secondary:hover > th {\n    background-color: #c8cbcf;\n  }\n  .table-success,\n  .table-success > td,\n  .table-success > th {\n    background-color: #c3e6cb;\n  }\n  .table-success tbody + tbody,\n  .table-success td,\n  .table-success th,\n  .table-success thead th {\n    border-color: #8fd19e;\n  }\n  .table-hover .table-success:hover {\n    background-color: #b1dfbb;\n  }\n  .table-hover .table-success:hover > td,\n  .table-hover .table-success:hover > th {\n    background-color: #b1dfbb;\n  }\n  .table-info,\n  .table-info > td,\n  .table-info > th {\n    background-color: #bee5eb;\n  }\n  .table-info tbody + tbody,\n  .table-info td,\n  .table-info th,\n  .table-info thead th {\n    border-color: #86cfda;\n  }\n  .table-hover .table-info:hover {\n    background-color: #abdde5;\n  }\n  .table-hover .table-info:hover > td,\n  .table-hover .table-info:hover > th {\n    background-color: #abdde5;\n  }\n  .table-warning,\n  .table-warning > td,\n  .table-warning > th {\n    background-color: #ffeeba;\n  }\n  .table-warning tbody + tbody,\n  .table-warning td,\n  .table-warning th,\n  .table-warning thead th {\n    border-color: #ffdf7e;\n  }\n  .table-hover .table-warning:hover {\n    background-color: #ffe8a1;\n  }\n  .table-hover .table-warning:hover > td,\n  .table-hover .table-warning:hover > th {\n    background-color: #ffe8a1;\n  }\n  .table-danger,\n  .table-danger > td,\n  .table-danger > th {\n    background-color: #f5c6cb;\n  }\n  .table-danger tbody + tbody,\n  .table-danger td,\n  .table-danger th,\n  .table-danger thead th {\n    border-color: #ed969e;\n  }\n  .table-hover .table-danger:hover {\n    background-color: #f1b0b7;\n  }\n  .table-hover .table-danger:hover > td,\n  .table-hover .table-danger:hover > th {\n    background-color: #f1b0b7;\n  }\n  .table-light,\n  .table-light > td,\n  .table-light > th {\n    background-color: #fdfdfe;\n  }\n  .table-light tbody + tbody,\n  .table-light td,\n  .table-light th,\n  .table-light thead th {\n    border-color: #fbfcfc;\n  }\n  .table-hover .table-light:hover {\n    background-color: #ececf6;\n  }\n  .table-hover .table-light:hover > td,\n  .table-hover .table-light:hover > th {\n    background-color: #ececf6;\n  }\n  .table-dark,\n  .table-dark > td,\n  .table-dark > th {\n    background-color: #c6c8ca;\n  }\n  .table-dark tbody + tbody,\n  .table-dark td,\n  .table-dark th,\n  .table-dark thead th {\n    border-color: #95999c;\n  }\n  .table-hover .table-dark:hover {\n    background-color: #b9bbbe;\n  }\n  .table-hover .table-dark:hover > td,\n  .table-hover .table-dark:hover > th {\n    background-color: #b9bbbe;\n  }\n  .table-active,\n  .table-active > td,\n  .table-active > th {\n    background-color: rgba(0, 0, 0, 0.075);\n  }\n  .table-hover .table-active:hover {\n    background-color: rgba(0, 0, 0, 0.075);\n  }\n  .table-hover .table-active:hover > td,\n  .table-hover .table-active:hover > th {\n    background-color: rgba(0, 0, 0, 0.075);\n  }\n  .table .thead-dark th {\n    color: #fff;\n    background-color: #343a40;\n    border-color: #454d55;\n  }\n  .table .thead-light th {\n    color: #495057;\n    background-color: #e9ecef;\n    border-color: #dee2e6;\n  }\n  .table-dark {\n    color: #fff;\n    background-color: #343a40;\n  }\n  .table-dark td,\n  .table-dark th,\n  .table-dark thead th {\n    border-color: #454d55;\n  }\n  .table-dark.table-bordered {\n    border: 0;\n  }\n  .table-dark.table-striped tbody tr:nth-of-type(odd) {\n    background-color: rgba(255, 255, 255, 0.05);\n  }\n  .table-dark.table-hover tbody tr:hover {\n    color: #fff;\n    background-color: rgba(255, 255, 255, 0.075);\n  }\n  @media (max-width: 575.98px) {\n    .table-responsive-sm {\n      display: block;\n      width: 100%;\n      overflow-x: auto;\n      -webkit-overflow-scrolling: touch;\n    }\n    .table-responsive-sm > .table-bordered {\n      border: 0;\n    }\n  }\n  @media (max-width: 767.98px) {\n    .table-responsive-md {\n      display: block;\n      width: 100%;\n      overflow-x: auto;\n      -webkit-overflow-scrolling: touch;\n    }\n    .table-responsive-md > .table-bordered {\n      border: 0;\n    }\n  }\n  @media (max-width: 991.98px) {\n    .table-responsive-lg {\n      display: block;\n      width: 100%;\n      overflow-x: auto;\n      -webkit-overflow-scrolling: touch;\n    }\n    .table-responsive-lg > .table-bordered {\n      border: 0;\n    }\n  }\n  @media (max-width: 1199.98px) {\n    .table-responsive-xl {\n      display: block;\n      width: 100%;\n      overflow-x: auto;\n      -webkit-overflow-scrolling: touch;\n    }\n    .table-responsive-xl > .table-bordered {\n      border: 0;\n    }\n  }\n  .table-responsive {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n  }\n  .table-responsive > .table-bordered {\n    border: 0;\n  }\n  .form-control {\n    display: block;\n    width: 100%;\n    height: calc(1.5em + 0.75rem + 2px);\n    padding: 0.375rem 0.75rem;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.5;\n    color: #495057;\n    background-color: #fff;\n    background-clip: padding-box;\n    border: 1px solid #ced4da;\n    border-radius: 0.25rem;\n    transition:\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .form-control {\n      transition: none;\n    }\n  }\n  .form-control::-ms-expand {\n    background-color: transparent;\n    border: 0;\n  }\n  .form-control:-moz-focusring {\n    color: transparent;\n    text-shadow: 0 0 0 #495057;\n  }\n  .form-control:focus {\n    color: #495057;\n    background-color: #fff;\n    border-color: #80bdff;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  .form-control::-webkit-input-placeholder {\n    color: #6c757d;\n    opacity: 1;\n  }\n  .form-control::-moz-placeholder {\n    color: #6c757d;\n    opacity: 1;\n  }\n  .form-control:-ms-input-placeholder {\n    color: #6c757d;\n    opacity: 1;\n  }\n  .form-control::-ms-input-placeholder {\n    color: #6c757d;\n    opacity: 1;\n  }\n  .form-control::placeholder {\n    color: #6c757d;\n    opacity: 1;\n  }\n  .form-control:disabled,\n  .form-control[readonly] {\n    background-color: #e9ecef;\n    opacity: 1;\n  }\n  input[type='date'].form-control,\n  input[type='datetime-local'].form-control,\n  input[type='month'].form-control,\n  input[type='time'].form-control {\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n  }\n  select.form-control:focus::-ms-value {\n    color: #495057;\n    background-color: #fff;\n  }\n  .form-control-file,\n  .form-control-range {\n    display: block;\n    width: 100%;\n  }\n  .col-form-label {\n    padding-top: calc(0.375rem + 1px);\n    padding-bottom: calc(0.375rem + 1px);\n    margin-bottom: 0;\n    font-size: inherit;\n    line-height: 1.5;\n  }\n  .col-form-label-lg {\n    padding-top: calc(0.5rem + 1px);\n    padding-bottom: calc(0.5rem + 1px);\n    font-size: 1.25rem;\n    line-height: 1.5;\n  }\n  .col-form-label-sm {\n    padding-top: calc(0.25rem + 1px);\n    padding-bottom: calc(0.25rem + 1px);\n    font-size: 0.875rem;\n    line-height: 1.5;\n  }\n  .form-control-plaintext {\n    display: block;\n    width: 100%;\n    padding: 0.375rem 0;\n    margin-bottom: 0;\n    font-size: 1rem;\n    line-height: 1.5;\n    color: #212529;\n    background-color: transparent;\n    border: solid transparent;\n    border-width: 1px 0;\n  }\n  .form-control-plaintext.form-control-lg,\n  .form-control-plaintext.form-control-sm {\n    padding-right: 0;\n    padding-left: 0;\n  }\n  .form-control-sm {\n    height: calc(1.5em + 0.5rem + 2px);\n    padding: 0.25rem 0.5rem;\n    font-size: 0.875rem;\n    line-height: 1.5;\n    border-radius: 0.2rem;\n  }\n  .form-control-lg {\n    height: calc(1.5em + 1rem + 2px);\n    padding: 0.5rem 1rem;\n    font-size: 1.25rem;\n    line-height: 1.5;\n    border-radius: 0.3rem;\n  }\n  select.form-control[multiple],\n  select.form-control[size] {\n    height: auto;\n  }\n  textarea.form-control {\n    height: auto;\n  }\n  .form-group {\n    margin-bottom: 1rem;\n  }\n  .form-text {\n    display: block;\n    margin-top: 0.25rem;\n  }\n  .form-row {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    margin-right: -5px;\n    margin-left: -5px;\n  }\n  .form-row > .col,\n  .form-row > [class*='col-'] {\n    padding-right: 5px;\n    padding-left: 5px;\n  }\n  .form-check {\n    position: relative;\n    display: block;\n    padding-left: 1.25rem;\n  }\n  .form-check-input {\n    position: absolute;\n    margin-top: 0.3rem;\n    margin-left: -1.25rem;\n  }\n  .form-check-input:disabled ~ .form-check-label,\n  .form-check-input[disabled] ~ .form-check-label {\n    color: #6c757d;\n  }\n  .form-check-label {\n    margin-bottom: 0;\n  }\n  .form-check-inline {\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n    -ms-flex-align: center;\n    align-items: center;\n    padding-left: 0;\n    margin-right: 0.75rem;\n  }\n  .form-check-inline .form-check-input {\n    position: static;\n    margin-top: 0;\n    margin-right: 0.3125rem;\n    margin-left: 0;\n  }\n  .valid-feedback {\n    display: none;\n    width: 100%;\n    margin-top: 0.25rem;\n    font-size: 80%;\n    color: #28a745;\n  }\n  .valid-tooltip {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    z-index: 5;\n    display: none;\n    max-width: 100%;\n    padding: 0.25rem 0.5rem;\n    margin-top: 0.1rem;\n    font-size: 0.875rem;\n    line-height: 1.5;\n    color: #fff;\n    background-color: rgba(40, 167, 69, 0.9);\n    border-radius: 0.25rem;\n  }\n  .form-row > .col > .valid-tooltip,\n  .form-row > [class*='col-'] > .valid-tooltip {\n    left: 5px;\n  }\n  .is-valid ~ .valid-feedback,\n  .is-valid ~ .valid-tooltip,\n  .was-validated :valid ~ .valid-feedback,\n  .was-validated :valid ~ .valid-tooltip {\n    display: block;\n  }\n  .form-control.is-valid,\n  .was-validated .form-control:valid {\n    border-color: #28a745;\n    padding-right: calc(1.5em + 0.75rem);\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\");\n    background-repeat: no-repeat;\n    background-position: right calc(0.375em + 0.1875rem) center;\n    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);\n  }\n  .form-control.is-valid:focus,\n  .was-validated .form-control:valid:focus {\n    border-color: #28a745;\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n  }\n  .was-validated textarea.form-control:valid,\n  textarea.form-control.is-valid {\n    padding-right: calc(1.5em + 0.75rem);\n    background-position: top calc(0.375em + 0.1875rem) right calc(0.375em + 0.1875rem);\n  }\n  .custom-select.is-valid,\n  .was-validated .custom-select:valid {\n    border-color: #28a745;\n    padding-right: calc(0.75em + 2.3125rem);\n    background:\n      url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='4' height='5' viewBox='0 0 4 5'%3e%3cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3e%3c/svg%3e\")\n        right 0.75rem center/8px 10px no-repeat,\n      #fff\n        url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\")\n        center right 1.75rem / calc(0.75em + 0.375rem) calc(0.75em + 0.375rem) no-repeat;\n  }\n  .custom-select.is-valid:focus,\n  .was-validated .custom-select:valid:focus {\n    border-color: #28a745;\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n  }\n  .form-check-input.is-valid ~ .form-check-label,\n  .was-validated .form-check-input:valid ~ .form-check-label {\n    color: #28a745;\n  }\n  .form-check-input.is-valid ~ .valid-feedback,\n  .form-check-input.is-valid ~ .valid-tooltip,\n  .was-validated .form-check-input:valid ~ .valid-feedback,\n  .was-validated .form-check-input:valid ~ .valid-tooltip {\n    display: block;\n  }\n  .custom-control-input.is-valid ~ .custom-control-label,\n  .was-validated .custom-control-input:valid ~ .custom-control-label {\n    color: #28a745;\n  }\n  .custom-control-input.is-valid ~ .custom-control-label::before,\n  .was-validated .custom-control-input:valid ~ .custom-control-label::before {\n    border-color: #28a745;\n  }\n  .custom-control-input.is-valid:checked ~ .custom-control-label::before,\n  .was-validated .custom-control-input:valid:checked ~ .custom-control-label::before {\n    border-color: #34ce57;\n    background-color: #34ce57;\n  }\n  .custom-control-input.is-valid:focus ~ .custom-control-label::before,\n  .was-validated .custom-control-input:valid:focus ~ .custom-control-label::before {\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n  }\n  .custom-control-input.is-valid:focus:not(:checked) ~ .custom-control-label::before,\n  .was-validated .custom-control-input:valid:focus:not(:checked) ~ .custom-control-label::before {\n    border-color: #28a745;\n  }\n  .custom-file-input.is-valid ~ .custom-file-label,\n  .was-validated .custom-file-input:valid ~ .custom-file-label {\n    border-color: #28a745;\n  }\n  .custom-file-input.is-valid:focus ~ .custom-file-label,\n  .was-validated .custom-file-input:valid:focus ~ .custom-file-label {\n    border-color: #28a745;\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n  }\n  .invalid-feedback {\n    display: none;\n    width: 100%;\n    margin-top: 0.25rem;\n    font-size: 80%;\n    color: #dc3545;\n  }\n  .invalid-tooltip {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    z-index: 5;\n    display: none;\n    max-width: 100%;\n    padding: 0.25rem 0.5rem;\n    margin-top: 0.1rem;\n    font-size: 0.875rem;\n    line-height: 1.5;\n    color: #fff;\n    background-color: rgba(220, 53, 69, 0.9);\n    border-radius: 0.25rem;\n  }\n  .form-row > .col > .invalid-tooltip,\n  .form-row > [class*='col-'] > .invalid-tooltip {\n    left: 5px;\n  }\n  .is-invalid ~ .invalid-feedback,\n  .is-invalid ~ .invalid-tooltip,\n  .was-validated :invalid ~ .invalid-feedback,\n  .was-validated :invalid ~ .invalid-tooltip {\n    display: block;\n  }\n  .form-control.is-invalid,\n  .was-validated .form-control:invalid {\n    border-color: #dc3545;\n    padding-right: calc(1.5em + 0.75rem);\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e\");\n    background-repeat: no-repeat;\n    background-position: right calc(0.375em + 0.1875rem) center;\n    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);\n  }\n  .form-control.is-invalid:focus,\n  .was-validated .form-control:invalid:focus {\n    border-color: #dc3545;\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n  }\n  .was-validated textarea.form-control:invalid,\n  textarea.form-control.is-invalid {\n    padding-right: calc(1.5em + 0.75rem);\n    background-position: top calc(0.375em + 0.1875rem) right calc(0.375em + 0.1875rem);\n  }\n  .custom-select.is-invalid,\n  .was-validated .custom-select:invalid {\n    border-color: #dc3545;\n    padding-right: calc(0.75em + 2.3125rem);\n    background:\n      url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='4' height='5' viewBox='0 0 4 5'%3e%3cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3e%3c/svg%3e\")\n        right 0.75rem center/8px 10px no-repeat,\n      #fff\n        url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e\")\n        center right 1.75rem / calc(0.75em + 0.375rem) calc(0.75em + 0.375rem) no-repeat;\n  }\n  .custom-select.is-invalid:focus,\n  .was-validated .custom-select:invalid:focus {\n    border-color: #dc3545;\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n  }\n  .form-check-input.is-invalid ~ .form-check-label,\n  .was-validated .form-check-input:invalid ~ .form-check-label {\n    color: #dc3545;\n  }\n  .form-check-input.is-invalid ~ .invalid-feedback,\n  .form-check-input.is-invalid ~ .invalid-tooltip,\n  .was-validated .form-check-input:invalid ~ .invalid-feedback,\n  .was-validated .form-check-input:invalid ~ .invalid-tooltip {\n    display: block;\n  }\n  .custom-control-input.is-invalid ~ .custom-control-label,\n  .was-validated .custom-control-input:invalid ~ .custom-control-label {\n    color: #dc3545;\n  }\n  .custom-control-input.is-invalid ~ .custom-control-label::before,\n  .was-validated .custom-control-input:invalid ~ .custom-control-label::before {\n    border-color: #dc3545;\n  }\n  .custom-control-input.is-invalid:checked ~ .custom-control-label::before,\n  .was-validated .custom-control-input:invalid:checked ~ .custom-control-label::before {\n    border-color: #e4606d;\n    background-color: #e4606d;\n  }\n  .custom-control-input.is-invalid:focus ~ .custom-control-label::before,\n  .was-validated .custom-control-input:invalid:focus ~ .custom-control-label::before {\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n  }\n  .custom-control-input.is-invalid:focus:not(:checked) ~ .custom-control-label::before,\n  .was-validated .custom-control-input:invalid:focus:not(:checked) ~ .custom-control-label::before {\n    border-color: #dc3545;\n  }\n  .custom-file-input.is-invalid ~ .custom-file-label,\n  .was-validated .custom-file-input:invalid ~ .custom-file-label {\n    border-color: #dc3545;\n  }\n  .custom-file-input.is-invalid:focus ~ .custom-file-label,\n  .was-validated .custom-file-input:invalid:focus ~ .custom-file-label {\n    border-color: #dc3545;\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n  }\n  .form-inline {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-flow: row wrap;\n    flex-flow: row wrap;\n    -ms-flex-align: center;\n    align-items: center;\n  }\n  .form-inline .form-check {\n    width: 100%;\n  }\n  @media (min-width: 576px) {\n    .form-inline label {\n      display: -ms-flexbox;\n      display: flex;\n      -ms-flex-align: center;\n      align-items: center;\n      -ms-flex-pack: center;\n      justify-content: center;\n      margin-bottom: 0;\n    }\n    .form-inline .form-group {\n      display: -ms-flexbox;\n      display: flex;\n      -ms-flex: 0 0 auto;\n      flex: 0 0 auto;\n      -ms-flex-flow: row wrap;\n      flex-flow: row wrap;\n      -ms-flex-align: center;\n      align-items: center;\n      margin-bottom: 0;\n    }\n    .form-inline .form-control {\n      display: inline-block;\n      width: auto;\n      vertical-align: middle;\n    }\n    .form-inline .form-control-plaintext {\n      display: inline-block;\n    }\n    .form-inline .custom-select,\n    .form-inline .input-group {\n      width: auto;\n    }\n    .form-inline .form-check {\n      display: -ms-flexbox;\n      display: flex;\n      -ms-flex-align: center;\n      align-items: center;\n      -ms-flex-pack: center;\n      justify-content: center;\n      width: auto;\n      padding-left: 0;\n    }\n    .form-inline .form-check-input {\n      position: relative;\n      -ms-flex-negative: 0;\n      flex-shrink: 0;\n      margin-top: 0;\n      margin-right: 0.25rem;\n      margin-left: 0;\n    }\n    .form-inline .custom-control {\n      -ms-flex-align: center;\n      align-items: center;\n      -ms-flex-pack: center;\n      justify-content: center;\n    }\n    .form-inline .custom-control-label {\n      margin-bottom: 0;\n    }\n  }\n  .btn {\n    display: inline-block;\n    font-weight: 400;\n    color: #212529;\n    text-align: center;\n    vertical-align: middle;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    background-color: transparent;\n    border: 1px solid transparent;\n    padding: 0.375rem 0.75rem;\n    font-size: 1rem;\n    line-height: 1.5;\n    border-radius: 0.25rem;\n    transition:\n      color 0.15s ease-in-out,\n      background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .btn {\n      transition: none;\n    }\n  }\n  .btn:hover {\n    color: #212529;\n    text-decoration: none;\n  }\n  .btn.focus,\n  .btn:focus {\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  .btn.disabled,\n  .btn:disabled {\n    opacity: 0.65;\n  }\n  .btn:not(:disabled):not(.disabled) {\n    cursor: pointer;\n  }\n  a.btn.disabled,\n  fieldset:disabled a.btn {\n    pointer-events: none;\n  }\n  .btn-primary {\n    color: #fff;\n    background-color: #007bff;\n    border-color: #007bff;\n  }\n  .btn-primary:hover {\n    color: #fff;\n    background-color: #0069d9;\n    border-color: #0062cc;\n  }\n  .btn-primary.focus,\n  .btn-primary:focus {\n    color: #fff;\n    background-color: #0069d9;\n    border-color: #0062cc;\n    box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.5);\n  }\n  .btn-primary.disabled,\n  .btn-primary:disabled {\n    color: #fff;\n    background-color: #007bff;\n    border-color: #007bff;\n  }\n  .btn-primary:not(:disabled):not(.disabled).active,\n  .btn-primary:not(:disabled):not(.disabled):active,\n  .show > .btn-primary.dropdown-toggle {\n    color: #fff;\n    background-color: #0062cc;\n    border-color: #005cbf;\n  }\n  .btn-primary:not(:disabled):not(.disabled).active:focus,\n  .btn-primary:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-primary.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.5);\n  }\n  .btn-secondary {\n    color: #fff;\n    background-color: #6c757d;\n    border-color: #6c757d;\n  }\n  .btn-secondary:hover {\n    color: #fff;\n    background-color: #5a6268;\n    border-color: #545b62;\n  }\n  .btn-secondary.focus,\n  .btn-secondary:focus {\n    color: #fff;\n    background-color: #5a6268;\n    border-color: #545b62;\n    box-shadow: 0 0 0 0.2rem rgba(130, 138, 145, 0.5);\n  }\n  .btn-secondary.disabled,\n  .btn-secondary:disabled {\n    color: #fff;\n    background-color: #6c757d;\n    border-color: #6c757d;\n  }\n  .btn-secondary:not(:disabled):not(.disabled).active,\n  .btn-secondary:not(:disabled):not(.disabled):active,\n  .show > .btn-secondary.dropdown-toggle {\n    color: #fff;\n    background-color: #545b62;\n    border-color: #4e555b;\n  }\n  .btn-secondary:not(:disabled):not(.disabled).active:focus,\n  .btn-secondary:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-secondary.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(130, 138, 145, 0.5);\n  }\n  .btn-success {\n    color: #fff;\n    background-color: #28a745;\n    border-color: #28a745;\n  }\n  .btn-success:hover {\n    color: #fff;\n    background-color: #218838;\n    border-color: #1e7e34;\n  }\n  .btn-success.focus,\n  .btn-success:focus {\n    color: #fff;\n    background-color: #218838;\n    border-color: #1e7e34;\n    box-shadow: 0 0 0 0.2rem rgba(72, 180, 97, 0.5);\n  }\n  .btn-success.disabled,\n  .btn-success:disabled {\n    color: #fff;\n    background-color: #28a745;\n    border-color: #28a745;\n  }\n  .btn-success:not(:disabled):not(.disabled).active,\n  .btn-success:not(:disabled):not(.disabled):active,\n  .show > .btn-success.dropdown-toggle {\n    color: #fff;\n    background-color: #1e7e34;\n    border-color: #1c7430;\n  }\n  .btn-success:not(:disabled):not(.disabled).active:focus,\n  .btn-success:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-success.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(72, 180, 97, 0.5);\n  }\n  .btn-info {\n    color: #fff;\n    background-color: #17a2b8;\n    border-color: #17a2b8;\n  }\n  .btn-info:hover {\n    color: #fff;\n    background-color: #138496;\n    border-color: #117a8b;\n  }\n  .btn-info.focus,\n  .btn-info:focus {\n    color: #fff;\n    background-color: #138496;\n    border-color: #117a8b;\n    box-shadow: 0 0 0 0.2rem rgba(58, 176, 195, 0.5);\n  }\n  .btn-info.disabled,\n  .btn-info:disabled {\n    color: #fff;\n    background-color: #17a2b8;\n    border-color: #17a2b8;\n  }\n  .btn-info:not(:disabled):not(.disabled).active,\n  .btn-info:not(:disabled):not(.disabled):active,\n  .show > .btn-info.dropdown-toggle {\n    color: #fff;\n    background-color: #117a8b;\n    border-color: #10707f;\n  }\n  .btn-info:not(:disabled):not(.disabled).active:focus,\n  .btn-info:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-info.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(58, 176, 195, 0.5);\n  }\n  .btn-warning {\n    color: #212529;\n    background-color: #ffc107;\n    border-color: #ffc107;\n  }\n  .btn-warning:hover {\n    color: #212529;\n    background-color: #e0a800;\n    border-color: #d39e00;\n  }\n  .btn-warning.focus,\n  .btn-warning:focus {\n    color: #212529;\n    background-color: #e0a800;\n    border-color: #d39e00;\n    box-shadow: 0 0 0 0.2rem rgba(222, 170, 12, 0.5);\n  }\n  .btn-warning.disabled,\n  .btn-warning:disabled {\n    color: #212529;\n    background-color: #ffc107;\n    border-color: #ffc107;\n  }\n  .btn-warning:not(:disabled):not(.disabled).active,\n  .btn-warning:not(:disabled):not(.disabled):active,\n  .show > .btn-warning.dropdown-toggle {\n    color: #212529;\n    background-color: #d39e00;\n    border-color: #c69500;\n  }\n  .btn-warning:not(:disabled):not(.disabled).active:focus,\n  .btn-warning:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-warning.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(222, 170, 12, 0.5);\n  }\n  .btn-danger {\n    color: #fff;\n    background-color: #dc3545;\n    border-color: #dc3545;\n  }\n  .btn-danger:hover {\n    color: #fff;\n    background-color: #c82333;\n    border-color: #bd2130;\n  }\n  .btn-danger.focus,\n  .btn-danger:focus {\n    color: #fff;\n    background-color: #c82333;\n    border-color: #bd2130;\n    box-shadow: 0 0 0 0.2rem rgba(225, 83, 97, 0.5);\n  }\n  .btn-danger.disabled,\n  .btn-danger:disabled {\n    color: #fff;\n    background-color: #dc3545;\n    border-color: #dc3545;\n  }\n  .btn-danger:not(:disabled):not(.disabled).active,\n  .btn-danger:not(:disabled):not(.disabled):active,\n  .show > .btn-danger.dropdown-toggle {\n    color: #fff;\n    background-color: #bd2130;\n    border-color: #b21f2d;\n  }\n  .btn-danger:not(:disabled):not(.disabled).active:focus,\n  .btn-danger:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-danger.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(225, 83, 97, 0.5);\n  }\n  .btn-light {\n    color: #212529;\n    background-color: #f8f9fa;\n    border-color: #f8f9fa;\n  }\n  .btn-light:hover {\n    color: #212529;\n    background-color: #e2e6ea;\n    border-color: #dae0e5;\n  }\n  .btn-light.focus,\n  .btn-light:focus {\n    color: #212529;\n    background-color: #e2e6ea;\n    border-color: #dae0e5;\n    box-shadow: 0 0 0 0.2rem rgba(216, 217, 219, 0.5);\n  }\n  .btn-light.disabled,\n  .btn-light:disabled {\n    color: #212529;\n    background-color: #f8f9fa;\n    border-color: #f8f9fa;\n  }\n  .btn-light:not(:disabled):not(.disabled).active,\n  .btn-light:not(:disabled):not(.disabled):active,\n  .show > .btn-light.dropdown-toggle {\n    color: #212529;\n    background-color: #dae0e5;\n    border-color: #d3d9df;\n  }\n  .btn-light:not(:disabled):not(.disabled).active:focus,\n  .btn-light:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-light.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(216, 217, 219, 0.5);\n  }\n  .btn-dark {\n    color: #fff;\n    background-color: #343a40;\n    border-color: #343a40;\n  }\n  .btn-dark:hover {\n    color: #fff;\n    background-color: #23272b;\n    border-color: #1d2124;\n  }\n  .btn-dark.focus,\n  .btn-dark:focus {\n    color: #fff;\n    background-color: #23272b;\n    border-color: #1d2124;\n    box-shadow: 0 0 0 0.2rem rgba(82, 88, 93, 0.5);\n  }\n  .btn-dark.disabled,\n  .btn-dark:disabled {\n    color: #fff;\n    background-color: #343a40;\n    border-color: #343a40;\n  }\n  .btn-dark:not(:disabled):not(.disabled).active,\n  .btn-dark:not(:disabled):not(.disabled):active,\n  .show > .btn-dark.dropdown-toggle {\n    color: #fff;\n    background-color: #1d2124;\n    border-color: #171a1d;\n  }\n  .btn-dark:not(:disabled):not(.disabled).active:focus,\n  .btn-dark:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-dark.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(82, 88, 93, 0.5);\n  }\n  .btn-outline-primary {\n    color: #007bff;\n    border-color: #007bff;\n  }\n  .btn-outline-primary:hover {\n    color: #fff;\n    background-color: #007bff;\n    border-color: #007bff;\n  }\n  .btn-outline-primary.focus,\n  .btn-outline-primary:focus {\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n  }\n  .btn-outline-primary.disabled,\n  .btn-outline-primary:disabled {\n    color: #007bff;\n    background-color: transparent;\n  }\n  .btn-outline-primary:not(:disabled):not(.disabled).active,\n  .btn-outline-primary:not(:disabled):not(.disabled):active,\n  .show > .btn-outline-primary.dropdown-toggle {\n    color: #fff;\n    background-color: #007bff;\n    border-color: #007bff;\n  }\n  .btn-outline-primary:not(:disabled):not(.disabled).active:focus,\n  .btn-outline-primary:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-outline-primary.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n  }\n  .btn-outline-secondary {\n    color: #6c757d;\n    border-color: #6c757d;\n  }\n  .btn-outline-secondary:hover {\n    color: #fff;\n    background-color: #6c757d;\n    border-color: #6c757d;\n  }\n  .btn-outline-secondary.focus,\n  .btn-outline-secondary:focus {\n    box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n  }\n  .btn-outline-secondary.disabled,\n  .btn-outline-secondary:disabled {\n    color: #6c757d;\n    background-color: transparent;\n  }\n  .btn-outline-secondary:not(:disabled):not(.disabled).active,\n  .btn-outline-secondary:not(:disabled):not(.disabled):active,\n  .show > .btn-outline-secondary.dropdown-toggle {\n    color: #fff;\n    background-color: #6c757d;\n    border-color: #6c757d;\n  }\n  .btn-outline-secondary:not(:disabled):not(.disabled).active:focus,\n  .btn-outline-secondary:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-outline-secondary.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n  }\n  .btn-outline-success {\n    color: #28a745;\n    border-color: #28a745;\n  }\n  .btn-outline-success:hover {\n    color: #fff;\n    background-color: #28a745;\n    border-color: #28a745;\n  }\n  .btn-outline-success.focus,\n  .btn-outline-success:focus {\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n  }\n  .btn-outline-success.disabled,\n  .btn-outline-success:disabled {\n    color: #28a745;\n    background-color: transparent;\n  }\n  .btn-outline-success:not(:disabled):not(.disabled).active,\n  .btn-outline-success:not(:disabled):not(.disabled):active,\n  .show > .btn-outline-success.dropdown-toggle {\n    color: #fff;\n    background-color: #28a745;\n    border-color: #28a745;\n  }\n  .btn-outline-success:not(:disabled):not(.disabled).active:focus,\n  .btn-outline-success:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-outline-success.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n  }\n  .btn-outline-info {\n    color: #17a2b8;\n    border-color: #17a2b8;\n  }\n  .btn-outline-info:hover {\n    color: #fff;\n    background-color: #17a2b8;\n    border-color: #17a2b8;\n  }\n  .btn-outline-info.focus,\n  .btn-outline-info:focus {\n    box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n  }\n  .btn-outline-info.disabled,\n  .btn-outline-info:disabled {\n    color: #17a2b8;\n    background-color: transparent;\n  }\n  .btn-outline-info:not(:disabled):not(.disabled).active,\n  .btn-outline-info:not(:disabled):not(.disabled):active,\n  .show > .btn-outline-info.dropdown-toggle {\n    color: #fff;\n    background-color: #17a2b8;\n    border-color: #17a2b8;\n  }\n  .btn-outline-info:not(:disabled):not(.disabled).active:focus,\n  .btn-outline-info:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-outline-info.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n  }\n  .btn-outline-warning {\n    color: #ffc107;\n    border-color: #ffc107;\n  }\n  .btn-outline-warning:hover {\n    color: #212529;\n    background-color: #ffc107;\n    border-color: #ffc107;\n  }\n  .btn-outline-warning.focus,\n  .btn-outline-warning:focus {\n    box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n  }\n  .btn-outline-warning.disabled,\n  .btn-outline-warning:disabled {\n    color: #ffc107;\n    background-color: transparent;\n  }\n  .btn-outline-warning:not(:disabled):not(.disabled).active,\n  .btn-outline-warning:not(:disabled):not(.disabled):active,\n  .show > .btn-outline-warning.dropdown-toggle {\n    color: #212529;\n    background-color: #ffc107;\n    border-color: #ffc107;\n  }\n  .btn-outline-warning:not(:disabled):not(.disabled).active:focus,\n  .btn-outline-warning:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-outline-warning.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n  }\n  .btn-outline-danger {\n    color: #dc3545;\n    border-color: #dc3545;\n  }\n  .btn-outline-danger:hover {\n    color: #fff;\n    background-color: #dc3545;\n    border-color: #dc3545;\n  }\n  .btn-outline-danger.focus,\n  .btn-outline-danger:focus {\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n  }\n  .btn-outline-danger.disabled,\n  .btn-outline-danger:disabled {\n    color: #dc3545;\n    background-color: transparent;\n  }\n  .btn-outline-danger:not(:disabled):not(.disabled).active,\n  .btn-outline-danger:not(:disabled):not(.disabled):active,\n  .show > .btn-outline-danger.dropdown-toggle {\n    color: #fff;\n    background-color: #dc3545;\n    border-color: #dc3545;\n  }\n  .btn-outline-danger:not(:disabled):not(.disabled).active:focus,\n  .btn-outline-danger:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-outline-danger.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n  }\n  .btn-outline-light {\n    color: #f8f9fa;\n    border-color: #f8f9fa;\n  }\n  .btn-outline-light:hover {\n    color: #212529;\n    background-color: #f8f9fa;\n    border-color: #f8f9fa;\n  }\n  .btn-outline-light.focus,\n  .btn-outline-light:focus {\n    box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n  }\n  .btn-outline-light.disabled,\n  .btn-outline-light:disabled {\n    color: #f8f9fa;\n    background-color: transparent;\n  }\n  .btn-outline-light:not(:disabled):not(.disabled).active,\n  .btn-outline-light:not(:disabled):not(.disabled):active,\n  .show > .btn-outline-light.dropdown-toggle {\n    color: #212529;\n    background-color: #f8f9fa;\n    border-color: #f8f9fa;\n  }\n  .btn-outline-light:not(:disabled):not(.disabled).active:focus,\n  .btn-outline-light:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-outline-light.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n  }\n  .btn-outline-dark {\n    color: #343a40;\n    border-color: #343a40;\n  }\n  .btn-outline-dark:hover {\n    color: #fff;\n    background-color: #343a40;\n    border-color: #343a40;\n  }\n  .btn-outline-dark.focus,\n  .btn-outline-dark:focus {\n    box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n  }\n  .btn-outline-dark.disabled,\n  .btn-outline-dark:disabled {\n    color: #343a40;\n    background-color: transparent;\n  }\n  .btn-outline-dark:not(:disabled):not(.disabled).active,\n  .btn-outline-dark:not(:disabled):not(.disabled):active,\n  .show > .btn-outline-dark.dropdown-toggle {\n    color: #fff;\n    background-color: #343a40;\n    border-color: #343a40;\n  }\n  .btn-outline-dark:not(:disabled):not(.disabled).active:focus,\n  .btn-outline-dark:not(:disabled):not(.disabled):active:focus,\n  .show > .btn-outline-dark.dropdown-toggle:focus {\n    box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n  }\n  .btn-link {\n    font-weight: 400;\n    color: #007bff;\n    text-decoration: none;\n  }\n  .btn-link:hover {\n    color: #0056b3;\n    text-decoration: underline;\n  }\n  .btn-link.focus,\n  .btn-link:focus {\n    text-decoration: underline;\n  }\n  .btn-link.disabled,\n  .btn-link:disabled {\n    color: #6c757d;\n    pointer-events: none;\n  }\n  .btn-group-lg > .btn,\n  .btn-lg {\n    padding: 0.5rem 1rem;\n    font-size: 1.25rem;\n    line-height: 1.5;\n    border-radius: 0.3rem;\n  }\n  .btn-group-sm > .btn,\n  .btn-sm {\n    padding: 0.25rem 0.5rem;\n    font-size: 0.875rem;\n    line-height: 1.5;\n    border-radius: 0.2rem;\n  }\n  .btn-block {\n    display: block;\n    width: 100%;\n  }\n  .btn-block + .btn-block {\n    margin-top: 0.5rem;\n  }\n  input[type='button'].btn-block,\n  input[type='reset'].btn-block,\n  input[type='submit'].btn-block {\n    width: 100%;\n  }\n  .fade {\n    transition: opacity 0.15s linear;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .fade {\n      transition: none;\n    }\n  }\n  .fade:not(.show) {\n    opacity: 0;\n  }\n  .collapse:not(.show) {\n    display: none;\n  }\n  .collapsing {\n    position: relative;\n    height: 0;\n    overflow: hidden;\n    transition: height 0.35s ease;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .collapsing {\n      transition: none;\n    }\n  }\n  .dropdown,\n  .dropleft,\n  .dropright,\n  .dropup {\n    position: relative;\n  }\n  .dropdown-toggle {\n    white-space: nowrap;\n  }\n  .dropdown-toggle::after {\n    display: inline-block;\n    margin-left: 0.255em;\n    vertical-align: 0.255em;\n    content: '';\n    border-top: 0.3em solid;\n    border-right: 0.3em solid transparent;\n    border-bottom: 0;\n    border-left: 0.3em solid transparent;\n  }\n  .dropdown-toggle:empty::after {\n    margin-left: 0;\n  }\n  .dropdown-menu {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    z-index: 1000;\n    display: none;\n    float: left;\n    min-width: 10rem;\n    padding: 0.5rem 0;\n    margin: 0.125rem 0 0;\n    font-size: 1rem;\n    color: #212529;\n    text-align: left;\n    list-style: none;\n    background-color: #fff;\n    background-clip: padding-box;\n    border: 1px solid rgba(0, 0, 0, 0.15);\n    border-radius: 0.25rem;\n  }\n  .dropdown-menu-left {\n    right: auto;\n    left: 0;\n  }\n  .dropdown-menu-right {\n    right: 0;\n    left: auto;\n  }\n  @media (min-width: 576px) {\n    .dropdown-menu-sm-left {\n      right: auto;\n      left: 0;\n    }\n    .dropdown-menu-sm-right {\n      right: 0;\n      left: auto;\n    }\n  }\n  @media (min-width: 768px) {\n    .dropdown-menu-md-left {\n      right: auto;\n      left: 0;\n    }\n    .dropdown-menu-md-right {\n      right: 0;\n      left: auto;\n    }\n  }\n  @media (min-width: 992px) {\n    .dropdown-menu-lg-left {\n      right: auto;\n      left: 0;\n    }\n    .dropdown-menu-lg-right {\n      right: 0;\n      left: auto;\n    }\n  }\n  @media (min-width: 1200px) {\n    .dropdown-menu-xl-left {\n      right: auto;\n      left: 0;\n    }\n    .dropdown-menu-xl-right {\n      right: 0;\n      left: auto;\n    }\n  }\n  .dropup .dropdown-menu {\n    top: auto;\n    bottom: 100%;\n    margin-top: 0;\n    margin-bottom: 0.125rem;\n  }\n  .dropup .dropdown-toggle::after {\n    display: inline-block;\n    margin-left: 0.255em;\n    vertical-align: 0.255em;\n    content: '';\n    border-top: 0;\n    border-right: 0.3em solid transparent;\n    border-bottom: 0.3em solid;\n    border-left: 0.3em solid transparent;\n  }\n  .dropup .dropdown-toggle:empty::after {\n    margin-left: 0;\n  }\n  .dropright .dropdown-menu {\n    top: 0;\n    right: auto;\n    left: 100%;\n    margin-top: 0;\n    margin-left: 0.125rem;\n  }\n  .dropright .dropdown-toggle::after {\n    display: inline-block;\n    margin-left: 0.255em;\n    vertical-align: 0.255em;\n    content: '';\n    border-top: 0.3em solid transparent;\n    border-right: 0;\n    border-bottom: 0.3em solid transparent;\n    border-left: 0.3em solid;\n  }\n  .dropright .dropdown-toggle:empty::after {\n    margin-left: 0;\n  }\n  .dropright .dropdown-toggle::after {\n    vertical-align: 0;\n  }\n  .dropleft .dropdown-menu {\n    top: 0;\n    right: 100%;\n    left: auto;\n    margin-top: 0;\n    margin-right: 0.125rem;\n  }\n  .dropleft .dropdown-toggle::after {\n    display: inline-block;\n    margin-left: 0.255em;\n    vertical-align: 0.255em;\n    content: '';\n  }\n  .dropleft .dropdown-toggle::after {\n    display: none;\n  }\n  .dropleft .dropdown-toggle::before {\n    display: inline-block;\n    margin-right: 0.255em;\n    vertical-align: 0.255em;\n    content: '';\n    border-top: 0.3em solid transparent;\n    border-right: 0.3em solid;\n    border-bottom: 0.3em solid transparent;\n  }\n  .dropleft .dropdown-toggle:empty::after {\n    margin-left: 0;\n  }\n  .dropleft .dropdown-toggle::before {\n    vertical-align: 0;\n  }\n  .dropdown-menu[x-placement^='bottom'],\n  .dropdown-menu[x-placement^='left'],\n  .dropdown-menu[x-placement^='right'],\n  .dropdown-menu[x-placement^='top'] {\n    right: auto;\n    bottom: auto;\n  }\n  .dropdown-divider {\n    height: 0;\n    margin: 0.5rem 0;\n    overflow: hidden;\n    border-top: 1px solid #e9ecef;\n  }\n  .dropdown-item {\n    display: block;\n    width: 100%;\n    padding: 0.25rem 1.5rem;\n    clear: both;\n    font-weight: 400;\n    color: #212529;\n    text-align: inherit;\n    white-space: nowrap;\n    background-color: transparent;\n    border: 0;\n  }\n  .dropdown-item:focus,\n  .dropdown-item:hover {\n    color: #16181b;\n    text-decoration: none;\n    background-color: #e9ecef;\n  }\n  .dropdown-item.active,\n  .dropdown-item:active {\n    color: #fff;\n    text-decoration: none;\n    background-color: #007bff;\n  }\n  .dropdown-item.disabled,\n  .dropdown-item:disabled {\n    color: #adb5bd;\n    pointer-events: none;\n    background-color: transparent;\n  }\n  .dropdown-menu.show {\n    display: block;\n  }\n  .dropdown-header {\n    display: block;\n    padding: 0.5rem 1.5rem;\n    margin-bottom: 0;\n    font-size: 0.875rem;\n    color: #6c757d;\n    white-space: nowrap;\n  }\n  .dropdown-item-text {\n    display: block;\n    padding: 0.25rem 1.5rem;\n    color: #212529;\n  }\n  .btn-group,\n  .btn-group-vertical {\n    position: relative;\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n    vertical-align: middle;\n  }\n  .btn-group-vertical > .btn,\n  .btn-group > .btn {\n    position: relative;\n    -ms-flex: 1 1 auto;\n    flex: 1 1 auto;\n  }\n  .btn-group-vertical > .btn:hover,\n  .btn-group > .btn:hover {\n    z-index: 1;\n  }\n  .btn-group-vertical > .btn.active,\n  .btn-group-vertical > .btn:active,\n  .btn-group-vertical > .btn:focus,\n  .btn-group > .btn.active,\n  .btn-group > .btn:active,\n  .btn-group > .btn:focus {\n    z-index: 1;\n  }\n  .btn-toolbar {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .btn-toolbar .input-group {\n    width: auto;\n  }\n  .btn-group > .btn-group:not(:first-child),\n  .btn-group > .btn:not(:first-child) {\n    margin-left: -1px;\n  }\n  .btn-group > .btn-group:not(:last-child) > .btn,\n  .btn-group > .btn:not(:last-child):not(.dropdown-toggle) {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n  .btn-group > .btn-group:not(:first-child) > .btn,\n  .btn-group > .btn:not(:first-child) {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n  .dropdown-toggle-split {\n    padding-right: 0.5625rem;\n    padding-left: 0.5625rem;\n  }\n  .dropdown-toggle-split::after,\n  .dropright .dropdown-toggle-split::after,\n  .dropup .dropdown-toggle-split::after {\n    margin-left: 0;\n  }\n  .dropleft .dropdown-toggle-split::before {\n    margin-right: 0;\n  }\n  .btn-group-sm > .btn + .dropdown-toggle-split,\n  .btn-sm + .dropdown-toggle-split {\n    padding-right: 0.375rem;\n    padding-left: 0.375rem;\n  }\n  .btn-group-lg > .btn + .dropdown-toggle-split,\n  .btn-lg + .dropdown-toggle-split {\n    padding-right: 0.75rem;\n    padding-left: 0.75rem;\n  }\n  .btn-group-vertical {\n    -ms-flex-direction: column;\n    flex-direction: column;\n    -ms-flex-align: start;\n    align-items: flex-start;\n    -ms-flex-pack: center;\n    justify-content: center;\n  }\n  .btn-group-vertical > .btn,\n  .btn-group-vertical > .btn-group {\n    width: 100%;\n  }\n  .btn-group-vertical > .btn-group:not(:first-child),\n  .btn-group-vertical > .btn:not(:first-child) {\n    margin-top: -1px;\n  }\n  .btn-group-vertical > .btn-group:not(:last-child) > .btn,\n  .btn-group-vertical > .btn:not(:last-child):not(.dropdown-toggle) {\n    border-bottom-right-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n  .btn-group-vertical > .btn-group:not(:first-child) > .btn,\n  .btn-group-vertical > .btn:not(:first-child) {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  }\n  .btn-group-toggle > .btn,\n  .btn-group-toggle > .btn-group > .btn {\n    margin-bottom: 0;\n  }\n  .btn-group-toggle > .btn input[type='checkbox'],\n  .btn-group-toggle > .btn input[type='radio'],\n  .btn-group-toggle > .btn-group > .btn input[type='checkbox'],\n  .btn-group-toggle > .btn-group > .btn input[type='radio'] {\n    position: absolute;\n    clip: rect(0, 0, 0, 0);\n    pointer-events: none;\n  }\n  .input-group {\n    position: relative;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    -ms-flex-align: stretch;\n    align-items: stretch;\n    width: 100%;\n  }\n  .input-group > .custom-file,\n  .input-group > .custom-select,\n  .input-group > .form-control,\n  .input-group > .form-control-plaintext {\n    position: relative;\n    -ms-flex: 1 1 auto;\n    flex: 1 1 auto;\n    width: 1%;\n    min-width: 0;\n    margin-bottom: 0;\n  }\n  .input-group > .custom-file + .custom-file,\n  .input-group > .custom-file + .custom-select,\n  .input-group > .custom-file + .form-control,\n  .input-group > .custom-select + .custom-file,\n  .input-group > .custom-select + .custom-select,\n  .input-group > .custom-select + .form-control,\n  .input-group > .form-control + .custom-file,\n  .input-group > .form-control + .custom-select,\n  .input-group > .form-control + .form-control,\n  .input-group > .form-control-plaintext + .custom-file,\n  .input-group > .form-control-plaintext + .custom-select,\n  .input-group > .form-control-plaintext + .form-control {\n    margin-left: -1px;\n  }\n  .input-group > .custom-file .custom-file-input:focus ~ .custom-file-label,\n  .input-group > .custom-select:focus,\n  .input-group > .form-control:focus {\n    z-index: 3;\n  }\n  .input-group > .custom-file .custom-file-input:focus {\n    z-index: 4;\n  }\n  .input-group > .custom-select:not(:first-child),\n  .input-group > .form-control:not(:first-child) {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n  .input-group > .custom-file {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n    align-items: center;\n  }\n  .input-group > .custom-file:not(:first-child) .custom-file-label,\n  .input-group > .custom-file:not(:last-child) .custom-file-label {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n  .input-group:not(.has-validation) > .custom-file:not(:last-child) .custom-file-label::after,\n  .input-group:not(.has-validation) > .custom-select:not(:last-child),\n  .input-group:not(.has-validation) > .form-control:not(:last-child) {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n  .input-group.has-validation > .custom-file:nth-last-child(n + 3) .custom-file-label::after,\n  .input-group.has-validation > .custom-select:nth-last-child(n + 3),\n  .input-group.has-validation > .form-control:nth-last-child(n + 3) {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n  .input-group-append,\n  .input-group-prepend {\n    display: -ms-flexbox;\n    display: flex;\n  }\n  .input-group-append .btn,\n  .input-group-prepend .btn {\n    position: relative;\n    z-index: 2;\n  }\n  .input-group-append .btn:focus,\n  .input-group-prepend .btn:focus {\n    z-index: 3;\n  }\n  .input-group-append .btn + .btn,\n  .input-group-append .btn + .input-group-text,\n  .input-group-append .input-group-text + .btn,\n  .input-group-append .input-group-text + .input-group-text,\n  .input-group-prepend .btn + .btn,\n  .input-group-prepend .btn + .input-group-text,\n  .input-group-prepend .input-group-text + .btn,\n  .input-group-prepend .input-group-text + .input-group-text {\n    margin-left: -1px;\n  }\n  .input-group-prepend {\n    margin-right: -1px;\n  }\n  .input-group-append {\n    margin-left: -1px;\n  }\n  .input-group-text {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n    align-items: center;\n    padding: 0.375rem 0.75rem;\n    margin-bottom: 0;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.5;\n    color: #495057;\n    text-align: center;\n    white-space: nowrap;\n    background-color: #e9ecef;\n    border: 1px solid #ced4da;\n    border-radius: 0.25rem;\n  }\n  .input-group-text input[type='checkbox'],\n  .input-group-text input[type='radio'] {\n    margin-top: 0;\n  }\n  .input-group-lg > .custom-select,\n  .input-group-lg > .form-control:not(textarea) {\n    height: calc(1.5em + 1rem + 2px);\n  }\n  .input-group-lg > .custom-select,\n  .input-group-lg > .form-control,\n  .input-group-lg > .input-group-append > .btn,\n  .input-group-lg > .input-group-append > .input-group-text,\n  .input-group-lg > .input-group-prepend > .btn,\n  .input-group-lg > .input-group-prepend > .input-group-text {\n    padding: 0.5rem 1rem;\n    font-size: 1.25rem;\n    line-height: 1.5;\n    border-radius: 0.3rem;\n  }\n  .input-group-sm > .custom-select,\n  .input-group-sm > .form-control:not(textarea) {\n    height: calc(1.5em + 0.5rem + 2px);\n  }\n  .input-group-sm > .custom-select,\n  .input-group-sm > .form-control,\n  .input-group-sm > .input-group-append > .btn,\n  .input-group-sm > .input-group-append > .input-group-text,\n  .input-group-sm > .input-group-prepend > .btn,\n  .input-group-sm > .input-group-prepend > .input-group-text {\n    padding: 0.25rem 0.5rem;\n    font-size: 0.875rem;\n    line-height: 1.5;\n    border-radius: 0.2rem;\n  }\n  .input-group-lg > .custom-select,\n  .input-group-sm > .custom-select {\n    padding-right: 1.75rem;\n  }\n  .input-group.has-validation > .input-group-append:nth-last-child(n + 3) > .btn,\n  .input-group.has-validation > .input-group-append:nth-last-child(n + 3) > .input-group-text,\n  .input-group:not(.has-validation) > .input-group-append:not(:last-child) > .btn,\n  .input-group:not(.has-validation) > .input-group-append:not(:last-child) > .input-group-text,\n  .input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),\n  .input-group > .input-group-append:last-child > .input-group-text:not(:last-child),\n  .input-group > .input-group-prepend > .btn,\n  .input-group > .input-group-prepend > .input-group-text {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n  .input-group > .input-group-append > .btn,\n  .input-group > .input-group-append > .input-group-text,\n  .input-group > .input-group-prepend:first-child > .btn:not(:first-child),\n  .input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child),\n  .input-group > .input-group-prepend:not(:first-child) > .btn,\n  .input-group > .input-group-prepend:not(:first-child) > .input-group-text {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n  .custom-control {\n    position: relative;\n    z-index: 1;\n    display: block;\n    min-height: 1.5rem;\n    padding-left: 1.5rem;\n    -webkit-print-color-adjust: exact;\n    color-adjust: exact;\n  }\n  .custom-control-inline {\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n    margin-right: 1rem;\n  }\n  .custom-control-input {\n    position: absolute;\n    left: 0;\n    z-index: -1;\n    width: 1rem;\n    height: 1.25rem;\n    opacity: 0;\n  }\n  .custom-control-input:checked ~ .custom-control-label::before {\n    color: #fff;\n    border-color: #007bff;\n    background-color: #007bff;\n  }\n  .custom-control-input:focus ~ .custom-control-label::before {\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  .custom-control-input:focus:not(:checked) ~ .custom-control-label::before {\n    border-color: #80bdff;\n  }\n  .custom-control-input:not(:disabled):active ~ .custom-control-label::before {\n    color: #fff;\n    background-color: #b3d7ff;\n    border-color: #b3d7ff;\n  }\n  .custom-control-input:disabled ~ .custom-control-label,\n  .custom-control-input[disabled] ~ .custom-control-label {\n    color: #6c757d;\n  }\n  .custom-control-input:disabled ~ .custom-control-label::before,\n  .custom-control-input[disabled] ~ .custom-control-label::before {\n    background-color: #e9ecef;\n  }\n  .custom-control-label {\n    position: relative;\n    margin-bottom: 0;\n    vertical-align: top;\n  }\n  .custom-control-label::before {\n    position: absolute;\n    top: 0.25rem;\n    left: -1.5rem;\n    display: block;\n    width: 1rem;\n    height: 1rem;\n    pointer-events: none;\n    content: '';\n    background-color: #fff;\n    border: #adb5bd solid 1px;\n  }\n  .custom-control-label::after {\n    position: absolute;\n    top: 0.25rem;\n    left: -1.5rem;\n    display: block;\n    width: 1rem;\n    height: 1rem;\n    content: '';\n    background: 50%/50% 50% no-repeat;\n  }\n  .custom-checkbox .custom-control-label::before {\n    border-radius: 0.25rem;\n  }\n  .custom-checkbox .custom-control-input:checked ~ .custom-control-label::after {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26l2.974 2.99L8 2.193z'/%3e%3c/svg%3e\");\n  }\n  .custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::before {\n    border-color: #007bff;\n    background-color: #007bff;\n  }\n  .custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::after {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='4' height='4' viewBox='0 0 4 4'%3e%3cpath stroke='%23fff' d='M0 2h4'/%3e%3c/svg%3e\");\n  }\n  .custom-checkbox .custom-control-input:disabled:checked ~ .custom-control-label::before {\n    background-color: rgba(0, 123, 255, 0.5);\n  }\n  .custom-checkbox .custom-control-input:disabled:indeterminate ~ .custom-control-label::before {\n    background-color: rgba(0, 123, 255, 0.5);\n  }\n  .custom-radio .custom-control-label::before {\n    border-radius: 50%;\n  }\n  .custom-radio .custom-control-input:checked ~ .custom-control-label::after {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e\");\n  }\n  .custom-radio .custom-control-input:disabled:checked ~ .custom-control-label::before {\n    background-color: rgba(0, 123, 255, 0.5);\n  }\n  .custom-switch {\n    padding-left: 2.25rem;\n  }\n  .custom-switch .custom-control-label::before {\n    left: -2.25rem;\n    width: 1.75rem;\n    pointer-events: all;\n    border-radius: 0.5rem;\n  }\n  .custom-switch .custom-control-label::after {\n    top: calc(0.25rem + 2px);\n    left: calc(-2.25rem + 2px);\n    width: calc(1rem - 4px);\n    height: calc(1rem - 4px);\n    background-color: #adb5bd;\n    border-radius: 0.5rem;\n    transition:\n      background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out,\n      -webkit-transform 0.15s ease-in-out;\n    transition:\n      transform 0.15s ease-in-out,\n      background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out;\n    transition:\n      transform 0.15s ease-in-out,\n      background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out,\n      -webkit-transform 0.15s ease-in-out;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .custom-switch .custom-control-label::after {\n      transition: none;\n    }\n  }\n  .custom-switch .custom-control-input:checked ~ .custom-control-label::after {\n    background-color: #fff;\n    -webkit-transform: translateX(0.75rem);\n    transform: translateX(0.75rem);\n  }\n  .custom-switch .custom-control-input:disabled:checked ~ .custom-control-label::before {\n    background-color: rgba(0, 123, 255, 0.5);\n  }\n  .custom-select {\n    display: inline-block;\n    width: 100%;\n    height: calc(1.5em + 0.75rem + 2px);\n    padding: 0.375rem 1.75rem 0.375rem 0.75rem;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.5;\n    color: #495057;\n    vertical-align: middle;\n    background: #fff\n      url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='4' height='5' viewBox='0 0 4 5'%3e%3cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3e%3c/svg%3e\")\n      right 0.75rem center/8px 10px no-repeat;\n    border: 1px solid #ced4da;\n    border-radius: 0.25rem;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n  }\n  .custom-select:focus {\n    border-color: #80bdff;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  .custom-select:focus::-ms-value {\n    color: #495057;\n    background-color: #fff;\n  }\n  .custom-select[multiple],\n  .custom-select[size]:not([size='1']) {\n    height: auto;\n    padding-right: 0.75rem;\n    background-image: none;\n  }\n  .custom-select:disabled {\n    color: #6c757d;\n    background-color: #e9ecef;\n  }\n  .custom-select::-ms-expand {\n    display: none;\n  }\n  .custom-select:-moz-focusring {\n    color: transparent;\n    text-shadow: 0 0 0 #495057;\n  }\n  .custom-select-sm {\n    height: calc(1.5em + 0.5rem + 2px);\n    padding-top: 0.25rem;\n    padding-bottom: 0.25rem;\n    padding-left: 0.5rem;\n    font-size: 0.875rem;\n  }\n  .custom-select-lg {\n    height: calc(1.5em + 1rem + 2px);\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n    padding-left: 1rem;\n    font-size: 1.25rem;\n  }\n  .custom-file {\n    position: relative;\n    display: inline-block;\n    width: 100%;\n    height: calc(1.5em + 0.75rem + 2px);\n    margin-bottom: 0;\n  }\n  .custom-file-input {\n    position: relative;\n    z-index: 2;\n    width: 100%;\n    height: calc(1.5em + 0.75rem + 2px);\n    margin: 0;\n    overflow: hidden;\n    opacity: 0;\n  }\n  .custom-file-input:focus ~ .custom-file-label {\n    border-color: #80bdff;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  .custom-file-input:disabled ~ .custom-file-label,\n  .custom-file-input[disabled] ~ .custom-file-label {\n    background-color: #e9ecef;\n  }\n  .custom-file-input:lang(en) ~ .custom-file-label::after {\n    content: 'Browse';\n  }\n  .custom-file-input ~ .custom-file-label[data-browse]::after {\n    content: attr(data-browse);\n  }\n  .custom-file-label {\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 0;\n    z-index: 1;\n    height: calc(1.5em + 0.75rem + 2px);\n    padding: 0.375rem 0.75rem;\n    overflow: hidden;\n    font-weight: 400;\n    line-height: 1.5;\n    color: #495057;\n    background-color: #fff;\n    border: 1px solid #ced4da;\n    border-radius: 0.25rem;\n  }\n  .custom-file-label::after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 3;\n    display: block;\n    height: calc(1.5em + 0.75rem);\n    padding: 0.375rem 0.75rem;\n    line-height: 1.5;\n    color: #495057;\n    content: 'Browse';\n    background-color: #e9ecef;\n    border-left: inherit;\n    border-radius: 0 0.25rem 0.25rem 0;\n  }\n  .custom-range {\n    width: 100%;\n    height: 1.4rem;\n    padding: 0;\n    background-color: transparent;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n  }\n  .custom-range:focus {\n    outline: 0;\n  }\n  .custom-range:focus::-webkit-slider-thumb {\n    box-shadow:\n      0 0 0 1px #fff,\n      0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  .custom-range:focus::-moz-range-thumb {\n    box-shadow:\n      0 0 0 1px #fff,\n      0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  .custom-range:focus::-ms-thumb {\n    box-shadow:\n      0 0 0 1px #fff,\n      0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  .custom-range::-moz-focus-outer {\n    border: 0;\n  }\n  .custom-range::-webkit-slider-thumb {\n    width: 1rem;\n    height: 1rem;\n    margin-top: -0.25rem;\n    background-color: #007bff;\n    border: 0;\n    border-radius: 1rem;\n    -webkit-transition:\n      background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out;\n    transition:\n      background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out;\n    -webkit-appearance: none;\n    appearance: none;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .custom-range::-webkit-slider-thumb {\n      -webkit-transition: none;\n      transition: none;\n    }\n  }\n  .custom-range::-webkit-slider-thumb:active {\n    background-color: #b3d7ff;\n  }\n  .custom-range::-webkit-slider-runnable-track {\n    width: 100%;\n    height: 0.5rem;\n    color: transparent;\n    cursor: pointer;\n    background-color: #dee2e6;\n    border-color: transparent;\n    border-radius: 1rem;\n  }\n  .custom-range::-moz-range-thumb {\n    width: 1rem;\n    height: 1rem;\n    background-color: #007bff;\n    border: 0;\n    border-radius: 1rem;\n    -moz-transition:\n      background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out;\n    transition:\n      background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out;\n    -moz-appearance: none;\n    appearance: none;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .custom-range::-moz-range-thumb {\n      -moz-transition: none;\n      transition: none;\n    }\n  }\n  .custom-range::-moz-range-thumb:active {\n    background-color: #b3d7ff;\n  }\n  .custom-range::-moz-range-track {\n    width: 100%;\n    height: 0.5rem;\n    color: transparent;\n    cursor: pointer;\n    background-color: #dee2e6;\n    border-color: transparent;\n    border-radius: 1rem;\n  }\n  .custom-range::-ms-thumb {\n    width: 1rem;\n    height: 1rem;\n    margin-top: 0;\n    margin-right: 0.2rem;\n    margin-left: 0.2rem;\n    background-color: #007bff;\n    border: 0;\n    border-radius: 1rem;\n    -ms-transition:\n      background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out;\n    transition:\n      background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out;\n    appearance: none;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .custom-range::-ms-thumb {\n      -ms-transition: none;\n      transition: none;\n    }\n  }\n  .custom-range::-ms-thumb:active {\n    background-color: #b3d7ff;\n  }\n  .custom-range::-ms-track {\n    width: 100%;\n    height: 0.5rem;\n    color: transparent;\n    cursor: pointer;\n    background-color: transparent;\n    border-color: transparent;\n    border-width: 0.5rem;\n  }\n  .custom-range::-ms-fill-lower {\n    background-color: #dee2e6;\n    border-radius: 1rem;\n  }\n  .custom-range::-ms-fill-upper {\n    margin-right: 15px;\n    background-color: #dee2e6;\n    border-radius: 1rem;\n  }\n  .custom-range:disabled::-webkit-slider-thumb {\n    background-color: #adb5bd;\n  }\n  .custom-range:disabled::-webkit-slider-runnable-track {\n    cursor: default;\n  }\n  .custom-range:disabled::-moz-range-thumb {\n    background-color: #adb5bd;\n  }\n  .custom-range:disabled::-moz-range-track {\n    cursor: default;\n  }\n  .custom-range:disabled::-ms-thumb {\n    background-color: #adb5bd;\n  }\n  .custom-control-label::before,\n  .custom-file-label,\n  .custom-select {\n    transition:\n      background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .custom-control-label::before,\n    .custom-file-label,\n    .custom-select {\n      transition: none;\n    }\n  }\n  .nav {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    padding-left: 0;\n    margin-bottom: 0;\n    list-style: none;\n  }\n  .nav-link {\n    display: block;\n    padding: 0.5rem 1rem;\n  }\n  .nav-link:focus,\n  .nav-link:hover {\n    text-decoration: none;\n  }\n  .nav-link.disabled {\n    color: #6c757d;\n    pointer-events: none;\n    cursor: default;\n  }\n  .nav-tabs {\n    border-bottom: 1px solid #dee2e6;\n  }\n  .nav-tabs .nav-link {\n    margin-bottom: -1px;\n    border: 1px solid transparent;\n    border-top-left-radius: 0.25rem;\n    border-top-right-radius: 0.25rem;\n  }\n  .nav-tabs .nav-link:focus,\n  .nav-tabs .nav-link:hover {\n    border-color: #e9ecef #e9ecef #dee2e6;\n  }\n  .nav-tabs .nav-link.disabled {\n    color: #6c757d;\n    background-color: transparent;\n    border-color: transparent;\n  }\n  .nav-tabs .nav-item.show .nav-link,\n  .nav-tabs .nav-link.active {\n    color: #495057;\n    background-color: #fff;\n    border-color: #dee2e6 #dee2e6 #fff;\n  }\n  .nav-tabs .dropdown-menu {\n    margin-top: -1px;\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  }\n  .nav-pills .nav-link {\n    border-radius: 0.25rem;\n  }\n  .nav-pills .nav-link.active,\n  .nav-pills .show > .nav-link {\n    color: #fff;\n    background-color: #007bff;\n  }\n  .nav-fill .nav-item,\n  .nav-fill > .nav-link {\n    -ms-flex: 1 1 auto;\n    flex: 1 1 auto;\n    text-align: center;\n  }\n  .nav-justified .nav-item,\n  .nav-justified > .nav-link {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    text-align: center;\n  }\n  .tab-content > .tab-pane {\n    display: none;\n  }\n  .tab-content > .active {\n    display: block;\n  }\n  .navbar {\n    position: relative;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    -ms-flex-align: center;\n    align-items: center;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n    padding: 0.5rem 1rem;\n  }\n  .navbar .container,\n  .navbar .container-fluid,\n  .navbar .container-lg,\n  .navbar .container-md,\n  .navbar .container-sm,\n  .navbar .container-xl {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    -ms-flex-align: center;\n    align-items: center;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n  }\n  .navbar-brand {\n    display: inline-block;\n    padding-top: 0.3125rem;\n    padding-bottom: 0.3125rem;\n    margin-right: 1rem;\n    font-size: 1.25rem;\n    line-height: inherit;\n    white-space: nowrap;\n  }\n  .navbar-brand:focus,\n  .navbar-brand:hover {\n    text-decoration: none;\n  }\n  .navbar-nav {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    padding-left: 0;\n    margin-bottom: 0;\n    list-style: none;\n  }\n  .navbar-nav .nav-link {\n    padding-right: 0;\n    padding-left: 0;\n  }\n  .navbar-nav .dropdown-menu {\n    position: static;\n    float: none;\n  }\n  .navbar-text {\n    display: inline-block;\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n  }\n  .navbar-collapse {\n    -ms-flex-preferred-size: 100%;\n    flex-basis: 100%;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    -ms-flex-align: center;\n    align-items: center;\n  }\n  .navbar-toggler {\n    padding: 0.25rem 0.75rem;\n    font-size: 1.25rem;\n    line-height: 1;\n    background-color: transparent;\n    border: 1px solid transparent;\n    border-radius: 0.25rem;\n  }\n  .navbar-toggler:focus,\n  .navbar-toggler:hover {\n    text-decoration: none;\n  }\n  .navbar-toggler-icon {\n    display: inline-block;\n    width: 1.5em;\n    height: 1.5em;\n    vertical-align: middle;\n    content: '';\n    background: 50%/100% 100% no-repeat;\n  }\n  .navbar-nav-scroll {\n    max-height: 75vh;\n    overflow-y: auto;\n  }\n  @media (max-width: 575.98px) {\n    .navbar-expand-sm > .container,\n    .navbar-expand-sm > .container-fluid,\n    .navbar-expand-sm > .container-lg,\n    .navbar-expand-sm > .container-md,\n    .navbar-expand-sm > .container-sm,\n    .navbar-expand-sm > .container-xl {\n      padding-right: 0;\n      padding-left: 0;\n    }\n  }\n  @media (min-width: 576px) {\n    .navbar-expand-sm {\n      -ms-flex-flow: row nowrap;\n      flex-flow: row nowrap;\n      -ms-flex-pack: start;\n      justify-content: flex-start;\n    }\n    .navbar-expand-sm .navbar-nav {\n      -ms-flex-direction: row;\n      flex-direction: row;\n    }\n    .navbar-expand-sm .navbar-nav .dropdown-menu {\n      position: absolute;\n    }\n    .navbar-expand-sm .navbar-nav .nav-link {\n      padding-right: 0.5rem;\n      padding-left: 0.5rem;\n    }\n    .navbar-expand-sm > .container,\n    .navbar-expand-sm > .container-fluid,\n    .navbar-expand-sm > .container-lg,\n    .navbar-expand-sm > .container-md,\n    .navbar-expand-sm > .container-sm,\n    .navbar-expand-sm > .container-xl {\n      -ms-flex-wrap: nowrap;\n      flex-wrap: nowrap;\n    }\n    .navbar-expand-sm .navbar-nav-scroll {\n      overflow: visible;\n    }\n    .navbar-expand-sm .navbar-collapse {\n      display: -ms-flexbox !important;\n      display: flex !important;\n      -ms-flex-preferred-size: auto;\n      flex-basis: auto;\n    }\n    .navbar-expand-sm .navbar-toggler {\n      display: none;\n    }\n  }\n  @media (max-width: 767.98px) {\n    .navbar-expand-md > .container,\n    .navbar-expand-md > .container-fluid,\n    .navbar-expand-md > .container-lg,\n    .navbar-expand-md > .container-md,\n    .navbar-expand-md > .container-sm,\n    .navbar-expand-md > .container-xl {\n      padding-right: 0;\n      padding-left: 0;\n    }\n  }\n  @media (min-width: 768px) {\n    .navbar-expand-md {\n      -ms-flex-flow: row nowrap;\n      flex-flow: row nowrap;\n      -ms-flex-pack: start;\n      justify-content: flex-start;\n    }\n    .navbar-expand-md .navbar-nav {\n      -ms-flex-direction: row;\n      flex-direction: row;\n    }\n    .navbar-expand-md .navbar-nav .dropdown-menu {\n      position: absolute;\n    }\n    .navbar-expand-md .navbar-nav .nav-link {\n      padding-right: 0.5rem;\n      padding-left: 0.5rem;\n    }\n    .navbar-expand-md > .container,\n    .navbar-expand-md > .container-fluid,\n    .navbar-expand-md > .container-lg,\n    .navbar-expand-md > .container-md,\n    .navbar-expand-md > .container-sm,\n    .navbar-expand-md > .container-xl {\n      -ms-flex-wrap: nowrap;\n      flex-wrap: nowrap;\n    }\n    .navbar-expand-md .navbar-nav-scroll {\n      overflow: visible;\n    }\n    .navbar-expand-md .navbar-collapse {\n      display: -ms-flexbox !important;\n      display: flex !important;\n      -ms-flex-preferred-size: auto;\n      flex-basis: auto;\n    }\n    .navbar-expand-md .navbar-toggler {\n      display: none;\n    }\n  }\n  @media (max-width: 991.98px) {\n    .navbar-expand-lg > .container,\n    .navbar-expand-lg > .container-fluid,\n    .navbar-expand-lg > .container-lg,\n    .navbar-expand-lg > .container-md,\n    .navbar-expand-lg > .container-sm,\n    .navbar-expand-lg > .container-xl {\n      padding-right: 0;\n      padding-left: 0;\n    }\n  }\n  @media (min-width: 992px) {\n    .navbar-expand-lg {\n      -ms-flex-flow: row nowrap;\n      flex-flow: row nowrap;\n      -ms-flex-pack: start;\n      justify-content: flex-start;\n    }\n    .navbar-expand-lg .navbar-nav {\n      -ms-flex-direction: row;\n      flex-direction: row;\n    }\n    .navbar-expand-lg .navbar-nav .dropdown-menu {\n      position: absolute;\n    }\n    .navbar-expand-lg .navbar-nav .nav-link {\n      padding-right: 0.5rem;\n      padding-left: 0.5rem;\n    }\n    .navbar-expand-lg > .container,\n    .navbar-expand-lg > .container-fluid,\n    .navbar-expand-lg > .container-lg,\n    .navbar-expand-lg > .container-md,\n    .navbar-expand-lg > .container-sm,\n    .navbar-expand-lg > .container-xl {\n      -ms-flex-wrap: nowrap;\n      flex-wrap: nowrap;\n    }\n    .navbar-expand-lg .navbar-nav-scroll {\n      overflow: visible;\n    }\n    .navbar-expand-lg .navbar-collapse {\n      display: -ms-flexbox !important;\n      display: flex !important;\n      -ms-flex-preferred-size: auto;\n      flex-basis: auto;\n    }\n    .navbar-expand-lg .navbar-toggler {\n      display: none;\n    }\n  }\n  @media (max-width: 1199.98px) {\n    .navbar-expand-xl > .container,\n    .navbar-expand-xl > .container-fluid,\n    .navbar-expand-xl > .container-lg,\n    .navbar-expand-xl > .container-md,\n    .navbar-expand-xl > .container-sm,\n    .navbar-expand-xl > .container-xl {\n      padding-right: 0;\n      padding-left: 0;\n    }\n  }\n  @media (min-width: 1200px) {\n    .navbar-expand-xl {\n      -ms-flex-flow: row nowrap;\n      flex-flow: row nowrap;\n      -ms-flex-pack: start;\n      justify-content: flex-start;\n    }\n    .navbar-expand-xl .navbar-nav {\n      -ms-flex-direction: row;\n      flex-direction: row;\n    }\n    .navbar-expand-xl .navbar-nav .dropdown-menu {\n      position: absolute;\n    }\n    .navbar-expand-xl .navbar-nav .nav-link {\n      padding-right: 0.5rem;\n      padding-left: 0.5rem;\n    }\n    .navbar-expand-xl > .container,\n    .navbar-expand-xl > .container-fluid,\n    .navbar-expand-xl > .container-lg,\n    .navbar-expand-xl > .container-md,\n    .navbar-expand-xl > .container-sm,\n    .navbar-expand-xl > .container-xl {\n      -ms-flex-wrap: nowrap;\n      flex-wrap: nowrap;\n    }\n    .navbar-expand-xl .navbar-nav-scroll {\n      overflow: visible;\n    }\n    .navbar-expand-xl .navbar-collapse {\n      display: -ms-flexbox !important;\n      display: flex !important;\n      -ms-flex-preferred-size: auto;\n      flex-basis: auto;\n    }\n    .navbar-expand-xl .navbar-toggler {\n      display: none;\n    }\n  }\n  .navbar-expand {\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand > .container,\n  .navbar-expand > .container-fluid,\n  .navbar-expand > .container-lg,\n  .navbar-expand > .container-md,\n  .navbar-expand > .container-sm,\n  .navbar-expand > .container-xl {\n    padding-right: 0;\n    padding-left: 0;\n  }\n  .navbar-expand .navbar-nav {\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand > .container,\n  .navbar-expand > .container-fluid,\n  .navbar-expand > .container-lg,\n  .navbar-expand > .container-md,\n  .navbar-expand > .container-sm,\n  .navbar-expand > .container-xl {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand .navbar-nav-scroll {\n    overflow: visible;\n  }\n  .navbar-expand .navbar-collapse {\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand .navbar-toggler {\n    display: none;\n  }\n  .navbar-light .navbar-brand {\n    color: rgba(0, 0, 0, 0.9);\n  }\n  .navbar-light .navbar-brand:focus,\n  .navbar-light .navbar-brand:hover {\n    color: rgba(0, 0, 0, 0.9);\n  }\n  .navbar-light .navbar-nav .nav-link {\n    color: rgba(0, 0, 0, 0.5);\n  }\n  .navbar-light .navbar-nav .nav-link:focus,\n  .navbar-light .navbar-nav .nav-link:hover {\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar-light .navbar-nav .nav-link.disabled {\n    color: rgba(0, 0, 0, 0.3);\n  }\n  .navbar-light .navbar-nav .active > .nav-link,\n  .navbar-light .navbar-nav .nav-link.active,\n  .navbar-light .navbar-nav .nav-link.show,\n  .navbar-light .navbar-nav .show > .nav-link {\n    color: rgba(0, 0, 0, 0.9);\n  }\n  .navbar-light .navbar-toggler {\n    color: rgba(0, 0, 0, 0.5);\n    border-color: rgba(0, 0, 0, 0.1);\n  }\n  .navbar-light .navbar-toggler-icon {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%280, 0, 0, 0.5%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\");\n  }\n  .navbar-light .navbar-text {\n    color: rgba(0, 0, 0, 0.5);\n  }\n  .navbar-light .navbar-text a {\n    color: rgba(0, 0, 0, 0.9);\n  }\n  .navbar-light .navbar-text a:focus,\n  .navbar-light .navbar-text a:hover {\n    color: rgba(0, 0, 0, 0.9);\n  }\n  .navbar-dark .navbar-brand {\n    color: #fff;\n  }\n  .navbar-dark .navbar-brand:focus,\n  .navbar-dark .navbar-brand:hover {\n    color: #fff;\n  }\n  .navbar-dark .navbar-nav .nav-link {\n    color: rgba(255, 255, 255, 0.5);\n  }\n  .navbar-dark .navbar-nav .nav-link:focus,\n  .navbar-dark .navbar-nav .nav-link:hover {\n    color: rgba(255, 255, 255, 0.75);\n  }\n  .navbar-dark .navbar-nav .nav-link.disabled {\n    color: rgba(255, 255, 255, 0.25);\n  }\n  .navbar-dark .navbar-nav .active > .nav-link,\n  .navbar-dark .navbar-nav .nav-link.active,\n  .navbar-dark .navbar-nav .nav-link.show,\n  .navbar-dark .navbar-nav .show > .nav-link {\n    color: #fff;\n  }\n  .navbar-dark .navbar-toggler {\n    color: rgba(255, 255, 255, 0.5);\n    border-color: rgba(255, 255, 255, 0.1);\n  }\n  .navbar-dark .navbar-toggler-icon {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.5%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\");\n  }\n  .navbar-dark .navbar-text {\n    color: rgba(255, 255, 255, 0.5);\n  }\n  .navbar-dark .navbar-text a {\n    color: #fff;\n  }\n  .navbar-dark .navbar-text a:focus,\n  .navbar-dark .navbar-text a:hover {\n    color: #fff;\n  }\n  .card {\n    position: relative;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    min-width: 0;\n    word-wrap: break-word;\n    background-color: #fff;\n    background-clip: border-box;\n    border: 1px solid rgba(0, 0, 0, 0.125);\n    border-radius: 0.25rem;\n  }\n  .card > hr {\n    margin-right: 0;\n    margin-left: 0;\n  }\n  .card > .list-group {\n    border-top: inherit;\n    border-bottom: inherit;\n  }\n  .card > .list-group:first-child {\n    border-top-width: 0;\n    border-top-left-radius: calc(0.25rem - 1px);\n    border-top-right-radius: calc(0.25rem - 1px);\n  }\n  .card > .list-group:last-child {\n    border-bottom-width: 0;\n    border-bottom-right-radius: calc(0.25rem - 1px);\n    border-bottom-left-radius: calc(0.25rem - 1px);\n  }\n  .card > .card-header + .list-group,\n  .card > .list-group + .card-footer {\n    border-top: 0;\n  }\n  .card-body {\n    -ms-flex: 1 1 auto;\n    flex: 1 1 auto;\n    min-height: 1px;\n    padding: 1.25rem;\n  }\n  .card-title {\n    margin-bottom: 0.75rem;\n  }\n  .card-subtitle {\n    margin-top: -0.375rem;\n    margin-bottom: 0;\n  }\n  .card-text:last-child {\n    margin-bottom: 0;\n  }\n  .card-link:hover {\n    text-decoration: none;\n  }\n  .card-link + .card-link {\n    margin-left: 1.25rem;\n  }\n  .card-header {\n    padding: 0.75rem 1.25rem;\n    margin-bottom: 0;\n    background-color: rgba(0, 0, 0, 0.03);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.125);\n  }\n  .card-header:first-child {\n    border-radius: calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0;\n  }\n  .card-footer {\n    padding: 0.75rem 1.25rem;\n    background-color: rgba(0, 0, 0, 0.03);\n    border-top: 1px solid rgba(0, 0, 0, 0.125);\n  }\n  .card-footer:last-child {\n    border-radius: 0 0 calc(0.25rem - 1px) calc(0.25rem - 1px);\n  }\n  .card-header-tabs {\n    margin-right: -0.625rem;\n    margin-bottom: -0.75rem;\n    margin-left: -0.625rem;\n    border-bottom: 0;\n  }\n  .card-header-pills {\n    margin-right: -0.625rem;\n    margin-left: -0.625rem;\n  }\n  .card-img-overlay {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    padding: 1.25rem;\n    border-radius: calc(0.25rem - 1px);\n  }\n  .card-img,\n  .card-img-bottom,\n  .card-img-top {\n    -ms-flex-negative: 0;\n    flex-shrink: 0;\n    width: 100%;\n  }\n  .card-img,\n  .card-img-top {\n    border-top-left-radius: calc(0.25rem - 1px);\n    border-top-right-radius: calc(0.25rem - 1px);\n  }\n  .card-img,\n  .card-img-bottom {\n    border-bottom-right-radius: calc(0.25rem - 1px);\n    border-bottom-left-radius: calc(0.25rem - 1px);\n  }\n  .card-deck .card {\n    margin-bottom: 15px;\n  }\n  @media (min-width: 576px) {\n    .card-deck {\n      display: -ms-flexbox;\n      display: flex;\n      -ms-flex-flow: row wrap;\n      flex-flow: row wrap;\n      margin-right: -15px;\n      margin-left: -15px;\n    }\n    .card-deck .card {\n      -ms-flex: 1 0 0%;\n      flex: 1 0 0%;\n      margin-right: 15px;\n      margin-bottom: 0;\n      margin-left: 15px;\n    }\n  }\n  .card-group > .card {\n    margin-bottom: 15px;\n  }\n  @media (min-width: 576px) {\n    .card-group {\n      display: -ms-flexbox;\n      display: flex;\n      -ms-flex-flow: row wrap;\n      flex-flow: row wrap;\n    }\n    .card-group > .card {\n      -ms-flex: 1 0 0%;\n      flex: 1 0 0%;\n      margin-bottom: 0;\n    }\n    .card-group > .card + .card {\n      margin-left: 0;\n      border-left: 0;\n    }\n    .card-group > .card:not(:last-child) {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n    .card-group > .card:not(:last-child) .card-header,\n    .card-group > .card:not(:last-child) .card-img-top {\n      border-top-right-radius: 0;\n    }\n    .card-group > .card:not(:last-child) .card-footer,\n    .card-group > .card:not(:last-child) .card-img-bottom {\n      border-bottom-right-radius: 0;\n    }\n    .card-group > .card:not(:first-child) {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n    .card-group > .card:not(:first-child) .card-header,\n    .card-group > .card:not(:first-child) .card-img-top {\n      border-top-left-radius: 0;\n    }\n    .card-group > .card:not(:first-child) .card-footer,\n    .card-group > .card:not(:first-child) .card-img-bottom {\n      border-bottom-left-radius: 0;\n    }\n  }\n  .card-columns .card {\n    margin-bottom: 0.75rem;\n  }\n  @media (min-width: 576px) {\n    .card-columns {\n      -webkit-column-count: 3;\n      -moz-column-count: 3;\n      column-count: 3;\n      -webkit-column-gap: 1.25rem;\n      -moz-column-gap: 1.25rem;\n      column-gap: 1.25rem;\n      orphans: 1;\n      widows: 1;\n    }\n    .card-columns .card {\n      display: inline-block;\n      width: 100%;\n    }\n  }\n  .accordion {\n    overflow-anchor: none;\n  }\n  .accordion > .card {\n    overflow: hidden;\n  }\n  .accordion > .card:not(:last-of-type) {\n    border-bottom: 0;\n    border-bottom-right-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n  .accordion > .card:not(:first-of-type) {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  }\n  .accordion > .card > .card-header {\n    border-radius: 0;\n    margin-bottom: -1px;\n  }\n  .breadcrumb {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    padding: 0.75rem 1rem;\n    margin-bottom: 1rem;\n    list-style: none;\n    background-color: #e9ecef;\n    border-radius: 0.25rem;\n  }\n  .breadcrumb-item + .breadcrumb-item {\n    padding-left: 0.5rem;\n  }\n  .breadcrumb-item + .breadcrumb-item::before {\n    float: left;\n    padding-right: 0.5rem;\n    color: #6c757d;\n    content: '/';\n  }\n  .breadcrumb-item + .breadcrumb-item:hover::before {\n    text-decoration: underline;\n  }\n  .breadcrumb-item + .breadcrumb-item:hover::before {\n    text-decoration: none;\n  }\n  .breadcrumb-item.active {\n    color: #6c757d;\n  }\n  .pagination {\n    display: -ms-flexbox;\n    display: flex;\n    padding-left: 0;\n    list-style: none;\n    border-radius: 0.25rem;\n  }\n  .page-link {\n    position: relative;\n    display: block;\n    padding: 0.5rem 0.75rem;\n    margin-left: -1px;\n    line-height: 1.25;\n    color: #007bff;\n    background-color: #fff;\n    border: 1px solid #dee2e6;\n  }\n  .page-link:hover {\n    z-index: 2;\n    color: #0056b3;\n    text-decoration: none;\n    background-color: #e9ecef;\n    border-color: #dee2e6;\n  }\n  .page-link:focus {\n    z-index: 3;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  .page-item:first-child .page-link {\n    margin-left: 0;\n    border-top-left-radius: 0.25rem;\n    border-bottom-left-radius: 0.25rem;\n  }\n  .page-item:last-child .page-link {\n    border-top-right-radius: 0.25rem;\n    border-bottom-right-radius: 0.25rem;\n  }\n  .page-item.active .page-link {\n    z-index: 3;\n    color: #fff;\n    background-color: #007bff;\n    border-color: #007bff;\n  }\n  .page-item.disabled .page-link {\n    color: #6c757d;\n    pointer-events: none;\n    cursor: auto;\n    background-color: #fff;\n    border-color: #dee2e6;\n  }\n  .pagination-lg .page-link {\n    padding: 0.75rem 1.5rem;\n    font-size: 1.25rem;\n    line-height: 1.5;\n  }\n  .pagination-lg .page-item:first-child .page-link {\n    border-top-left-radius: 0.3rem;\n    border-bottom-left-radius: 0.3rem;\n  }\n  .pagination-lg .page-item:last-child .page-link {\n    border-top-right-radius: 0.3rem;\n    border-bottom-right-radius: 0.3rem;\n  }\n  .pagination-sm .page-link {\n    padding: 0.25rem 0.5rem;\n    font-size: 0.875rem;\n    line-height: 1.5;\n  }\n  .pagination-sm .page-item:first-child .page-link {\n    border-top-left-radius: 0.2rem;\n    border-bottom-left-radius: 0.2rem;\n  }\n  .pagination-sm .page-item:last-child .page-link {\n    border-top-right-radius: 0.2rem;\n    border-bottom-right-radius: 0.2rem;\n  }\n  .badge {\n    display: inline-block;\n    padding: 0.25em 0.4em;\n    font-size: 75%;\n    font-weight: 700;\n    line-height: 1;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: baseline;\n    border-radius: 0.25rem;\n    transition:\n      color 0.15s ease-in-out,\n      background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out,\n      box-shadow 0.15s ease-in-out;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .badge {\n      transition: none;\n    }\n  }\n  a.badge:focus,\n  a.badge:hover {\n    text-decoration: none;\n  }\n  .badge:empty {\n    display: none;\n  }\n  .btn .badge {\n    position: relative;\n    top: -1px;\n  }\n  .badge-pill {\n    padding-right: 0.6em;\n    padding-left: 0.6em;\n    border-radius: 10rem;\n  }\n  .badge-primary {\n    color: #fff;\n    background-color: #007bff;\n  }\n  a.badge-primary:focus,\n  a.badge-primary:hover {\n    color: #fff;\n    background-color: #0062cc;\n  }\n  a.badge-primary.focus,\n  a.badge-primary:focus {\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n  }\n  .badge-secondary {\n    color: #fff;\n    background-color: #6c757d;\n  }\n  a.badge-secondary:focus,\n  a.badge-secondary:hover {\n    color: #fff;\n    background-color: #545b62;\n  }\n  a.badge-secondary.focus,\n  a.badge-secondary:focus {\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n  }\n  .badge-success {\n    color: #fff;\n    background-color: #28a745;\n  }\n  a.badge-success:focus,\n  a.badge-success:hover {\n    color: #fff;\n    background-color: #1e7e34;\n  }\n  a.badge-success.focus,\n  a.badge-success:focus {\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n  }\n  .badge-info {\n    color: #fff;\n    background-color: #17a2b8;\n  }\n  a.badge-info:focus,\n  a.badge-info:hover {\n    color: #fff;\n    background-color: #117a8b;\n  }\n  a.badge-info.focus,\n  a.badge-info:focus {\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n  }\n  .badge-warning {\n    color: #212529;\n    background-color: #ffc107;\n  }\n  a.badge-warning:focus,\n  a.badge-warning:hover {\n    color: #212529;\n    background-color: #d39e00;\n  }\n  a.badge-warning.focus,\n  a.badge-warning:focus {\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n  }\n  .badge-danger {\n    color: #fff;\n    background-color: #dc3545;\n  }\n  a.badge-danger:focus,\n  a.badge-danger:hover {\n    color: #fff;\n    background-color: #bd2130;\n  }\n  a.badge-danger.focus,\n  a.badge-danger:focus {\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n  }\n  .badge-light {\n    color: #212529;\n    background-color: #f8f9fa;\n  }\n  a.badge-light:focus,\n  a.badge-light:hover {\n    color: #212529;\n    background-color: #dae0e5;\n  }\n  a.badge-light.focus,\n  a.badge-light:focus {\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n  }\n  .badge-dark {\n    color: #fff;\n    background-color: #343a40;\n  }\n  a.badge-dark:focus,\n  a.badge-dark:hover {\n    color: #fff;\n    background-color: #1d2124;\n  }\n  a.badge-dark.focus,\n  a.badge-dark:focus {\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n  }\n  .jumbotron {\n    padding: 2rem 1rem;\n    margin-bottom: 2rem;\n    background-color: #e9ecef;\n    border-radius: 0.3rem;\n  }\n  @media (min-width: 576px) {\n    .jumbotron {\n      padding: 4rem 2rem;\n    }\n  }\n  .jumbotron-fluid {\n    padding-right: 0;\n    padding-left: 0;\n    border-radius: 0;\n  }\n  .alert {\n    position: relative;\n    padding: 0.75rem 1.25rem;\n    margin-bottom: 1rem;\n    border: 1px solid transparent;\n    border-radius: 0.25rem;\n  }\n  .alert-heading {\n    color: inherit;\n  }\n  .alert-link {\n    font-weight: 700;\n  }\n  .alert-dismissible {\n    padding-right: 4rem;\n  }\n  .alert-dismissible .close {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 2;\n    padding: 0.75rem 1.25rem;\n    color: inherit;\n  }\n  .alert-primary {\n    color: #004085;\n    background-color: #cce5ff;\n    border-color: #b8daff;\n  }\n  .alert-primary hr {\n    border-top-color: #9fcdff;\n  }\n  .alert-primary .alert-link {\n    color: #002752;\n  }\n  .alert-secondary {\n    color: #383d41;\n    background-color: #e2e3e5;\n    border-color: #d6d8db;\n  }\n  .alert-secondary hr {\n    border-top-color: #c8cbcf;\n  }\n  .alert-secondary .alert-link {\n    color: #202326;\n  }\n  .alert-success {\n    color: #155724;\n    background-color: #d4edda;\n    border-color: #c3e6cb;\n  }\n  .alert-success hr {\n    border-top-color: #b1dfbb;\n  }\n  .alert-success .alert-link {\n    color: #0b2e13;\n  }\n  .alert-info {\n    color: #0c5460;\n    background-color: #d1ecf1;\n    border-color: #bee5eb;\n  }\n  .alert-info hr {\n    border-top-color: #abdde5;\n  }\n  .alert-info .alert-link {\n    color: #062c33;\n  }\n  .alert-warning {\n    color: #856404;\n    background-color: #fff3cd;\n    border-color: #ffeeba;\n  }\n  .alert-warning hr {\n    border-top-color: #ffe8a1;\n  }\n  .alert-warning .alert-link {\n    color: #533f03;\n  }\n  .alert-danger {\n    color: #721c24;\n    background-color: #f8d7da;\n    border-color: #f5c6cb;\n  }\n  .alert-danger hr {\n    border-top-color: #f1b0b7;\n  }\n  .alert-danger .alert-link {\n    color: #491217;\n  }\n  .alert-light {\n    color: #818182;\n    background-color: #fefefe;\n    border-color: #fdfdfe;\n  }\n  .alert-light hr {\n    border-top-color: #ececf6;\n  }\n  .alert-light .alert-link {\n    color: #686868;\n  }\n  .alert-dark {\n    color: #1b1e21;\n    background-color: #d6d8d9;\n    border-color: #c6c8ca;\n  }\n  .alert-dark hr {\n    border-top-color: #b9bbbe;\n  }\n  .alert-dark .alert-link {\n    color: #040505;\n  }\n  @-webkit-keyframes progress-bar-stripes {\n    from {\n      background-position: 1rem 0;\n    }\n    to {\n      background-position: 0 0;\n    }\n  }\n  @keyframes progress-bar-stripes {\n    from {\n      background-position: 1rem 0;\n    }\n    to {\n      background-position: 0 0;\n    }\n  }\n  .progress {\n    display: -ms-flexbox;\n    display: flex;\n    height: 1rem;\n    overflow: hidden;\n    line-height: 0;\n    font-size: 0.75rem;\n    background-color: #e9ecef;\n    border-radius: 0.25rem;\n  }\n  .progress-bar {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    -ms-flex-pack: center;\n    justify-content: center;\n    overflow: hidden;\n    color: #fff;\n    text-align: center;\n    white-space: nowrap;\n    background-color: #007bff;\n    transition: width 0.6s ease;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .progress-bar {\n      transition: none;\n    }\n  }\n  .progress-bar-striped {\n    background-image: linear-gradient(\n      45deg,\n      rgba(255, 255, 255, 0.15) 25%,\n      transparent 25%,\n      transparent 50%,\n      rgba(255, 255, 255, 0.15) 50%,\n      rgba(255, 255, 255, 0.15) 75%,\n      transparent 75%,\n      transparent\n    );\n    background-size: 1rem 1rem;\n  }\n  .progress-bar-animated {\n    -webkit-animation: 1s linear infinite progress-bar-stripes;\n    animation: 1s linear infinite progress-bar-stripes;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .progress-bar-animated {\n      -webkit-animation: none;\n      animation: none;\n    }\n  }\n  .media {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: start;\n    align-items: flex-start;\n  }\n  .media-body {\n    -ms-flex: 1;\n    flex: 1;\n  }\n  .list-group {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    padding-left: 0;\n    margin-bottom: 0;\n    border-radius: 0.25rem;\n  }\n  .list-group-item-action {\n    width: 100%;\n    color: #495057;\n    text-align: inherit;\n  }\n  .list-group-item-action:focus,\n  .list-group-item-action:hover {\n    z-index: 1;\n    color: #495057;\n    text-decoration: none;\n    background-color: #f8f9fa;\n  }\n  .list-group-item-action:active {\n    color: #212529;\n    background-color: #e9ecef;\n  }\n  .list-group-item {\n    position: relative;\n    display: block;\n    padding: 0.75rem 1.25rem;\n    background-color: #fff;\n    border: 1px solid rgba(0, 0, 0, 0.125);\n  }\n  .list-group-item:first-child {\n    border-top-left-radius: inherit;\n    border-top-right-radius: inherit;\n  }\n  .list-group-item:last-child {\n    border-bottom-right-radius: inherit;\n    border-bottom-left-radius: inherit;\n  }\n  .list-group-item.disabled,\n  .list-group-item:disabled {\n    color: #6c757d;\n    pointer-events: none;\n    background-color: #fff;\n  }\n  .list-group-item.active {\n    z-index: 2;\n    color: #fff;\n    background-color: #007bff;\n    border-color: #007bff;\n  }\n  .list-group-item + .list-group-item {\n    border-top-width: 0;\n  }\n  .list-group-item + .list-group-item.active {\n    margin-top: -1px;\n    border-top-width: 1px;\n  }\n  .list-group-horizontal {\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .list-group-horizontal > .list-group-item:first-child {\n    border-bottom-left-radius: 0.25rem;\n    border-top-right-radius: 0;\n  }\n  .list-group-horizontal > .list-group-item:last-child {\n    border-top-right-radius: 0.25rem;\n    border-bottom-left-radius: 0;\n  }\n  .list-group-horizontal > .list-group-item.active {\n    margin-top: 0;\n  }\n  .list-group-horizontal > .list-group-item + .list-group-item {\n    border-top-width: 1px;\n    border-left-width: 0;\n  }\n  .list-group-horizontal > .list-group-item + .list-group-item.active {\n    margin-left: -1px;\n    border-left-width: 1px;\n  }\n  @media (min-width: 576px) {\n    .list-group-horizontal-sm {\n      -ms-flex-direction: row;\n      flex-direction: row;\n    }\n    .list-group-horizontal-sm > .list-group-item:first-child {\n      border-bottom-left-radius: 0.25rem;\n      border-top-right-radius: 0;\n    }\n    .list-group-horizontal-sm > .list-group-item:last-child {\n      border-top-right-radius: 0.25rem;\n      border-bottom-left-radius: 0;\n    }\n    .list-group-horizontal-sm > .list-group-item.active {\n      margin-top: 0;\n    }\n    .list-group-horizontal-sm > .list-group-item + .list-group-item {\n      border-top-width: 1px;\n      border-left-width: 0;\n    }\n    .list-group-horizontal-sm > .list-group-item + .list-group-item.active {\n      margin-left: -1px;\n      border-left-width: 1px;\n    }\n  }\n  @media (min-width: 768px) {\n    .list-group-horizontal-md {\n      -ms-flex-direction: row;\n      flex-direction: row;\n    }\n    .list-group-horizontal-md > .list-group-item:first-child {\n      border-bottom-left-radius: 0.25rem;\n      border-top-right-radius: 0;\n    }\n    .list-group-horizontal-md > .list-group-item:last-child {\n      border-top-right-radius: 0.25rem;\n      border-bottom-left-radius: 0;\n    }\n    .list-group-horizontal-md > .list-group-item.active {\n      margin-top: 0;\n    }\n    .list-group-horizontal-md > .list-group-item + .list-group-item {\n      border-top-width: 1px;\n      border-left-width: 0;\n    }\n    .list-group-horizontal-md > .list-group-item + .list-group-item.active {\n      margin-left: -1px;\n      border-left-width: 1px;\n    }\n  }\n  @media (min-width: 992px) {\n    .list-group-horizontal-lg {\n      -ms-flex-direction: row;\n      flex-direction: row;\n    }\n    .list-group-horizontal-lg > .list-group-item:first-child {\n      border-bottom-left-radius: 0.25rem;\n      border-top-right-radius: 0;\n    }\n    .list-group-horizontal-lg > .list-group-item:last-child {\n      border-top-right-radius: 0.25rem;\n      border-bottom-left-radius: 0;\n    }\n    .list-group-horizontal-lg > .list-group-item.active {\n      margin-top: 0;\n    }\n    .list-group-horizontal-lg > .list-group-item + .list-group-item {\n      border-top-width: 1px;\n      border-left-width: 0;\n    }\n    .list-group-horizontal-lg > .list-group-item + .list-group-item.active {\n      margin-left: -1px;\n      border-left-width: 1px;\n    }\n  }\n  @media (min-width: 1200px) {\n    .list-group-horizontal-xl {\n      -ms-flex-direction: row;\n      flex-direction: row;\n    }\n    .list-group-horizontal-xl > .list-group-item:first-child {\n      border-bottom-left-radius: 0.25rem;\n      border-top-right-radius: 0;\n    }\n    .list-group-horizontal-xl > .list-group-item:last-child {\n      border-top-right-radius: 0.25rem;\n      border-bottom-left-radius: 0;\n    }\n    .list-group-horizontal-xl > .list-group-item.active {\n      margin-top: 0;\n    }\n    .list-group-horizontal-xl > .list-group-item + .list-group-item {\n      border-top-width: 1px;\n      border-left-width: 0;\n    }\n    .list-group-horizontal-xl > .list-group-item + .list-group-item.active {\n      margin-left: -1px;\n      border-left-width: 1px;\n    }\n  }\n  .list-group-flush {\n    border-radius: 0;\n  }\n  .list-group-flush > .list-group-item {\n    border-width: 0 0 1px;\n  }\n  .list-group-flush > .list-group-item:last-child {\n    border-bottom-width: 0;\n  }\n  .list-group-item-primary {\n    color: #004085;\n    background-color: #b8daff;\n  }\n  .list-group-item-primary.list-group-item-action:focus,\n  .list-group-item-primary.list-group-item-action:hover {\n    color: #004085;\n    background-color: #9fcdff;\n  }\n  .list-group-item-primary.list-group-item-action.active {\n    color: #fff;\n    background-color: #004085;\n    border-color: #004085;\n  }\n  .list-group-item-secondary {\n    color: #383d41;\n    background-color: #d6d8db;\n  }\n  .list-group-item-secondary.list-group-item-action:focus,\n  .list-group-item-secondary.list-group-item-action:hover {\n    color: #383d41;\n    background-color: #c8cbcf;\n  }\n  .list-group-item-secondary.list-group-item-action.active {\n    color: #fff;\n    background-color: #383d41;\n    border-color: #383d41;\n  }\n  .list-group-item-success {\n    color: #155724;\n    background-color: #c3e6cb;\n  }\n  .list-group-item-success.list-group-item-action:focus,\n  .list-group-item-success.list-group-item-action:hover {\n    color: #155724;\n    background-color: #b1dfbb;\n  }\n  .list-group-item-success.list-group-item-action.active {\n    color: #fff;\n    background-color: #155724;\n    border-color: #155724;\n  }\n  .list-group-item-info {\n    color: #0c5460;\n    background-color: #bee5eb;\n  }\n  .list-group-item-info.list-group-item-action:focus,\n  .list-group-item-info.list-group-item-action:hover {\n    color: #0c5460;\n    background-color: #abdde5;\n  }\n  .list-group-item-info.list-group-item-action.active {\n    color: #fff;\n    background-color: #0c5460;\n    border-color: #0c5460;\n  }\n  .list-group-item-warning {\n    color: #856404;\n    background-color: #ffeeba;\n  }\n  .list-group-item-warning.list-group-item-action:focus,\n  .list-group-item-warning.list-group-item-action:hover {\n    color: #856404;\n    background-color: #ffe8a1;\n  }\n  .list-group-item-warning.list-group-item-action.active {\n    color: #fff;\n    background-color: #856404;\n    border-color: #856404;\n  }\n  .list-group-item-danger {\n    color: #721c24;\n    background-color: #f5c6cb;\n  }\n  .list-group-item-danger.list-group-item-action:focus,\n  .list-group-item-danger.list-group-item-action:hover {\n    color: #721c24;\n    background-color: #f1b0b7;\n  }\n  .list-group-item-danger.list-group-item-action.active {\n    color: #fff;\n    background-color: #721c24;\n    border-color: #721c24;\n  }\n  .list-group-item-light {\n    color: #818182;\n    background-color: #fdfdfe;\n  }\n  .list-group-item-light.list-group-item-action:focus,\n  .list-group-item-light.list-group-item-action:hover {\n    color: #818182;\n    background-color: #ececf6;\n  }\n  .list-group-item-light.list-group-item-action.active {\n    color: #fff;\n    background-color: #818182;\n    border-color: #818182;\n  }\n  .list-group-item-dark {\n    color: #1b1e21;\n    background-color: #c6c8ca;\n  }\n  .list-group-item-dark.list-group-item-action:focus,\n  .list-group-item-dark.list-group-item-action:hover {\n    color: #1b1e21;\n    background-color: #b9bbbe;\n  }\n  .list-group-item-dark.list-group-item-action.active {\n    color: #fff;\n    background-color: #1b1e21;\n    border-color: #1b1e21;\n  }\n  .close {\n    float: right;\n    font-size: 1.5rem;\n    font-weight: 700;\n    line-height: 1;\n    color: #000;\n    text-shadow: 0 1px 0 #fff;\n    opacity: 0.5;\n  }\n  .close:hover {\n    color: #000;\n    text-decoration: none;\n  }\n  .close:not(:disabled):not(.disabled):focus,\n  .close:not(:disabled):not(.disabled):hover {\n    opacity: 0.75;\n  }\n  button.close {\n    padding: 0;\n    background-color: transparent;\n    border: 0;\n  }\n  a.close.disabled {\n    pointer-events: none;\n  }\n  .toast {\n    -ms-flex-preferred-size: 350px;\n    flex-basis: 350px;\n    max-width: 350px;\n    font-size: 0.875rem;\n    background-color: rgba(255, 255, 255, 0.85);\n    background-clip: padding-box;\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.1);\n    opacity: 0;\n    border-radius: 0.25rem;\n  }\n  .toast:not(:last-child) {\n    margin-bottom: 0.75rem;\n  }\n  .toast.showing {\n    opacity: 1;\n  }\n  .toast.show {\n    display: block;\n    opacity: 1;\n  }\n  .toast.hide {\n    display: none;\n  }\n  .toast-header {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n    align-items: center;\n    padding: 0.25rem 0.75rem;\n    color: #6c757d;\n    background-color: rgba(255, 255, 255, 0.85);\n    background-clip: padding-box;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n    border-top-left-radius: calc(0.25rem - 1px);\n    border-top-right-radius: calc(0.25rem - 1px);\n  }\n  .toast-body {\n    padding: 0.75rem;\n  }\n  .modal-open {\n    overflow: hidden;\n  }\n  .modal-open .modal {\n    overflow-x: hidden;\n    overflow-y: auto;\n  }\n  .modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: 1050;\n    display: none;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    outline: 0;\n  }\n  .modal-dialog {\n    position: relative;\n    width: auto;\n    margin: 0.5rem;\n    pointer-events: none;\n  }\n  .modal.fade .modal-dialog {\n    transition: -webkit-transform 0.3s ease-out;\n    transition: transform 0.3s ease-out;\n    transition:\n      transform 0.3s ease-out,\n      -webkit-transform 0.3s ease-out;\n    -webkit-transform: translate(0, -50px);\n    transform: translate(0, -50px);\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .modal.fade .modal-dialog {\n      transition: none;\n    }\n  }\n  .modal.show .modal-dialog {\n    -webkit-transform: none;\n    transform: none;\n  }\n  .modal.modal-static .modal-dialog {\n    -webkit-transform: scale(1.02);\n    transform: scale(1.02);\n  }\n  .modal-dialog-scrollable {\n    display: -ms-flexbox;\n    display: flex;\n    max-height: calc(100% - 1rem);\n  }\n  .modal-dialog-scrollable .modal-content {\n    max-height: calc(100vh - 1rem);\n    overflow: hidden;\n  }\n  .modal-dialog-scrollable .modal-footer,\n  .modal-dialog-scrollable .modal-header {\n    -ms-flex-negative: 0;\n    flex-shrink: 0;\n  }\n  .modal-dialog-scrollable .modal-body {\n    overflow-y: auto;\n  }\n  .modal-dialog-centered {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n    align-items: center;\n    min-height: calc(100% - 1rem);\n  }\n  .modal-dialog-centered::before {\n    display: block;\n    height: calc(100vh - 1rem);\n    height: -webkit-min-content;\n    height: -moz-min-content;\n    height: min-content;\n    content: '';\n  }\n  .modal-dialog-centered.modal-dialog-scrollable {\n    -ms-flex-direction: column;\n    flex-direction: column;\n    -ms-flex-pack: center;\n    justify-content: center;\n    height: 100%;\n  }\n  .modal-dialog-centered.modal-dialog-scrollable .modal-content {\n    max-height: none;\n  }\n  .modal-dialog-centered.modal-dialog-scrollable::before {\n    content: none;\n  }\n  .modal-content {\n    position: relative;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    width: 100%;\n    pointer-events: auto;\n    background-color: #fff;\n    background-clip: padding-box;\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    border-radius: 0.3rem;\n    outline: 0;\n  }\n  .modal-backdrop {\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: 1040;\n    width: 100vw;\n    height: 100vh;\n    background-color: #000;\n  }\n  .modal-backdrop.fade {\n    opacity: 0;\n  }\n  .modal-backdrop.show {\n    opacity: 0.5;\n  }\n  .modal-header {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: start;\n    align-items: flex-start;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n    padding: 1rem 1rem;\n    border-bottom: 1px solid #dee2e6;\n    border-top-left-radius: calc(0.3rem - 1px);\n    border-top-right-radius: calc(0.3rem - 1px);\n  }\n  .modal-header .close {\n    padding: 1rem 1rem;\n    margin: -1rem -1rem -1rem auto;\n  }\n  .modal-title {\n    margin-bottom: 0;\n    line-height: 1.5;\n  }\n  .modal-body {\n    position: relative;\n    -ms-flex: 1 1 auto;\n    flex: 1 1 auto;\n    padding: 1rem;\n  }\n  .modal-footer {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    -ms-flex-align: center;\n    align-items: center;\n    -ms-flex-pack: end;\n    justify-content: flex-end;\n    padding: 0.75rem;\n    border-top: 1px solid #dee2e6;\n    border-bottom-right-radius: calc(0.3rem - 1px);\n    border-bottom-left-radius: calc(0.3rem - 1px);\n  }\n  .modal-footer > * {\n    margin: 0.25rem;\n  }\n  .modal-scrollbar-measure {\n    position: absolute;\n    top: -9999px;\n    width: 50px;\n    height: 50px;\n    overflow: scroll;\n  }\n  @media (min-width: 576px) {\n    .modal-dialog {\n      max-width: 500px;\n      margin: 1.75rem auto;\n    }\n    .modal-dialog-scrollable {\n      max-height: calc(100% - 3.5rem);\n    }\n    .modal-dialog-scrollable .modal-content {\n      max-height: calc(100vh - 3.5rem);\n    }\n    .modal-dialog-centered {\n      min-height: calc(100% - 3.5rem);\n    }\n    .modal-dialog-centered::before {\n      height: calc(100vh - 3.5rem);\n      height: -webkit-min-content;\n      height: -moz-min-content;\n      height: min-content;\n    }\n    .modal-sm {\n      max-width: 300px;\n    }\n  }\n  @media (min-width: 992px) {\n    .modal-lg,\n    .modal-xl {\n      max-width: 800px;\n    }\n  }\n  @media (min-width: 1200px) {\n    .modal-xl {\n      max-width: 1140px;\n    }\n  }\n  .tooltip {\n    position: absolute;\n    z-index: 1070;\n    display: block;\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', 'Liberation Sans', sans-serif,\n      'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n    font-style: normal;\n    font-weight: 400;\n    line-height: 1.5;\n    text-align: left;\n    text-align: start;\n    text-decoration: none;\n    text-shadow: none;\n    text-transform: none;\n    letter-spacing: normal;\n    word-break: normal;\n    word-spacing: normal;\n    white-space: normal;\n    line-break: auto;\n    font-size: 0.875rem;\n    word-wrap: break-word;\n    opacity: 0;\n  }\n  .tooltip.show {\n    opacity: 0.9;\n  }\n  .tooltip .arrow {\n    position: absolute;\n    display: block;\n    width: 0.8rem;\n    height: 0.4rem;\n  }\n  .tooltip .arrow::before {\n    position: absolute;\n    content: '';\n    border-color: transparent;\n    border-style: solid;\n  }\n  .bs-tooltip-auto[x-placement^='top'],\n  .bs-tooltip-top {\n    padding: 0.4rem 0;\n  }\n  .bs-tooltip-auto[x-placement^='top'] .arrow,\n  .bs-tooltip-top .arrow {\n    bottom: 0;\n  }\n  .bs-tooltip-auto[x-placement^='top'] .arrow::before,\n  .bs-tooltip-top .arrow::before {\n    top: 0;\n    border-width: 0.4rem 0.4rem 0;\n    border-top-color: #000;\n  }\n  .bs-tooltip-auto[x-placement^='right'],\n  .bs-tooltip-right {\n    padding: 0 0.4rem;\n  }\n  .bs-tooltip-auto[x-placement^='right'] .arrow,\n  .bs-tooltip-right .arrow {\n    left: 0;\n    width: 0.4rem;\n    height: 0.8rem;\n  }\n  .bs-tooltip-auto[x-placement^='right'] .arrow::before,\n  .bs-tooltip-right .arrow::before {\n    right: 0;\n    border-width: 0.4rem 0.4rem 0.4rem 0;\n    border-right-color: #000;\n  }\n  .bs-tooltip-auto[x-placement^='bottom'],\n  .bs-tooltip-bottom {\n    padding: 0.4rem 0;\n  }\n  .bs-tooltip-auto[x-placement^='bottom'] .arrow,\n  .bs-tooltip-bottom .arrow {\n    top: 0;\n  }\n  .bs-tooltip-auto[x-placement^='bottom'] .arrow::before,\n  .bs-tooltip-bottom .arrow::before {\n    bottom: 0;\n    border-width: 0 0.4rem 0.4rem;\n    border-bottom-color: #000;\n  }\n  .bs-tooltip-auto[x-placement^='left'],\n  .bs-tooltip-left {\n    padding: 0 0.4rem;\n  }\n  .bs-tooltip-auto[x-placement^='left'] .arrow,\n  .bs-tooltip-left .arrow {\n    right: 0;\n    width: 0.4rem;\n    height: 0.8rem;\n  }\n  .bs-tooltip-auto[x-placement^='left'] .arrow::before,\n  .bs-tooltip-left .arrow::before {\n    left: 0;\n    border-width: 0.4rem 0 0.4rem 0.4rem;\n    border-left-color: #000;\n  }\n  .tooltip-inner {\n    max-width: 200px;\n    padding: 0.25rem 0.5rem;\n    color: #fff;\n    text-align: center;\n    background-color: #000;\n    border-radius: 0.25rem;\n  }\n  .popover {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 1060;\n    display: block;\n    max-width: 276px;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', 'Liberation Sans', sans-serif,\n      'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n    font-style: normal;\n    font-weight: 400;\n    line-height: 1.5;\n    text-align: left;\n    text-align: start;\n    text-decoration: none;\n    text-shadow: none;\n    text-transform: none;\n    letter-spacing: normal;\n    word-break: normal;\n    word-spacing: normal;\n    white-space: normal;\n    line-break: auto;\n    font-size: 0.875rem;\n    word-wrap: break-word;\n    background-color: #fff;\n    background-clip: padding-box;\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    border-radius: 0.3rem;\n  }\n  .popover .arrow {\n    position: absolute;\n    display: block;\n    width: 1rem;\n    height: 0.5rem;\n    margin: 0 0.3rem;\n  }\n  .popover .arrow::after,\n  .popover .arrow::before {\n    position: absolute;\n    display: block;\n    content: '';\n    border-color: transparent;\n    border-style: solid;\n  }\n  .bs-popover-auto[x-placement^='top'],\n  .bs-popover-top {\n    margin-bottom: 0.5rem;\n  }\n  .bs-popover-auto[x-placement^='top'] > .arrow,\n  .bs-popover-top > .arrow {\n    bottom: calc(-0.5rem - 1px);\n  }\n  .bs-popover-auto[x-placement^='top'] > .arrow::before,\n  .bs-popover-top > .arrow::before {\n    bottom: 0;\n    border-width: 0.5rem 0.5rem 0;\n    border-top-color: rgba(0, 0, 0, 0.25);\n  }\n  .bs-popover-auto[x-placement^='top'] > .arrow::after,\n  .bs-popover-top > .arrow::after {\n    bottom: 1px;\n    border-width: 0.5rem 0.5rem 0;\n    border-top-color: #fff;\n  }\n  .bs-popover-auto[x-placement^='right'],\n  .bs-popover-right {\n    margin-left: 0.5rem;\n  }\n  .bs-popover-auto[x-placement^='right'] > .arrow,\n  .bs-popover-right > .arrow {\n    left: calc(-0.5rem - 1px);\n    width: 0.5rem;\n    height: 1rem;\n    margin: 0.3rem 0;\n  }\n  .bs-popover-auto[x-placement^='right'] > .arrow::before,\n  .bs-popover-right > .arrow::before {\n    left: 0;\n    border-width: 0.5rem 0.5rem 0.5rem 0;\n    border-right-color: rgba(0, 0, 0, 0.25);\n  }\n  .bs-popover-auto[x-placement^='right'] > .arrow::after,\n  .bs-popover-right > .arrow::after {\n    left: 1px;\n    border-width: 0.5rem 0.5rem 0.5rem 0;\n    border-right-color: #fff;\n  }\n  .bs-popover-auto[x-placement^='bottom'],\n  .bs-popover-bottom {\n    margin-top: 0.5rem;\n  }\n  .bs-popover-auto[x-placement^='bottom'] > .arrow,\n  .bs-popover-bottom > .arrow {\n    top: calc(-0.5rem - 1px);\n  }\n  .bs-popover-auto[x-placement^='bottom'] > .arrow::before,\n  .bs-popover-bottom > .arrow::before {\n    top: 0;\n    border-width: 0 0.5rem 0.5rem 0.5rem;\n    border-bottom-color: rgba(0, 0, 0, 0.25);\n  }\n  .bs-popover-auto[x-placement^='bottom'] > .arrow::after,\n  .bs-popover-bottom > .arrow::after {\n    top: 1px;\n    border-width: 0 0.5rem 0.5rem 0.5rem;\n    border-bottom-color: #fff;\n  }\n  .bs-popover-auto[x-placement^='bottom'] .popover-header::before,\n  .bs-popover-bottom .popover-header::before {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    display: block;\n    width: 1rem;\n    margin-left: -0.5rem;\n    content: '';\n    border-bottom: 1px solid #f7f7f7;\n  }\n  .bs-popover-auto[x-placement^='left'],\n  .bs-popover-left {\n    margin-right: 0.5rem;\n  }\n  .bs-popover-auto[x-placement^='left'] > .arrow,\n  .bs-popover-left > .arrow {\n    right: calc(-0.5rem - 1px);\n    width: 0.5rem;\n    height: 1rem;\n    margin: 0.3rem 0;\n  }\n  .bs-popover-auto[x-placement^='left'] > .arrow::before,\n  .bs-popover-left > .arrow::before {\n    right: 0;\n    border-width: 0.5rem 0 0.5rem 0.5rem;\n    border-left-color: rgba(0, 0, 0, 0.25);\n  }\n  .bs-popover-auto[x-placement^='left'] > .arrow::after,\n  .bs-popover-left > .arrow::after {\n    right: 1px;\n    border-width: 0.5rem 0 0.5rem 0.5rem;\n    border-left-color: #fff;\n  }\n  .popover-header {\n    padding: 0.5rem 0.75rem;\n    margin-bottom: 0;\n    font-size: 1rem;\n    background-color: #f7f7f7;\n    border-bottom: 1px solid #ebebeb;\n    border-top-left-radius: calc(0.3rem - 1px);\n    border-top-right-radius: calc(0.3rem - 1px);\n  }\n  .popover-header:empty {\n    display: none;\n  }\n  .popover-body {\n    padding: 0.5rem 0.75rem;\n    color: #212529;\n  }\n  .carousel {\n    position: relative;\n  }\n  .carousel.pointer-event {\n    -ms-touch-action: pan-y;\n    touch-action: pan-y;\n  }\n  .carousel-inner {\n    position: relative;\n    width: 100%;\n    overflow: hidden;\n  }\n  .carousel-inner::after {\n    display: block;\n    clear: both;\n    content: '';\n  }\n  .carousel-item {\n    position: relative;\n    display: none;\n    float: left;\n    width: 100%;\n    margin-right: -100%;\n    -webkit-backface-visibility: hidden;\n    backface-visibility: hidden;\n    transition: -webkit-transform 0.6s ease-in-out;\n    transition: transform 0.6s ease-in-out;\n    transition:\n      transform 0.6s ease-in-out,\n      -webkit-transform 0.6s ease-in-out;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .carousel-item {\n      transition: none;\n    }\n  }\n  .carousel-item-next,\n  .carousel-item-prev,\n  .carousel-item.active {\n    display: block;\n  }\n  .active.carousel-item-right,\n  .carousel-item-next:not(.carousel-item-left) {\n    -webkit-transform: translateX(100%);\n    transform: translateX(100%);\n  }\n  .active.carousel-item-left,\n  .carousel-item-prev:not(.carousel-item-right) {\n    -webkit-transform: translateX(-100%);\n    transform: translateX(-100%);\n  }\n  .carousel-fade .carousel-item {\n    opacity: 0;\n    transition-property: opacity;\n    -webkit-transform: none;\n    transform: none;\n  }\n  .carousel-fade .carousel-item-next.carousel-item-left,\n  .carousel-fade .carousel-item-prev.carousel-item-right,\n  .carousel-fade .carousel-item.active {\n    z-index: 1;\n    opacity: 1;\n  }\n  .carousel-fade .active.carousel-item-left,\n  .carousel-fade .active.carousel-item-right {\n    z-index: 0;\n    opacity: 0;\n    transition: opacity 0s 0.6s;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .carousel-fade .active.carousel-item-left,\n    .carousel-fade .active.carousel-item-right {\n      transition: none;\n    }\n  }\n  .carousel-control-next,\n  .carousel-control-prev {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    z-index: 1;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n    align-items: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    width: 15%;\n    color: #fff;\n    text-align: center;\n    opacity: 0.5;\n    transition: opacity 0.15s ease;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .carousel-control-next,\n    .carousel-control-prev {\n      transition: none;\n    }\n  }\n  .carousel-control-next:focus,\n  .carousel-control-next:hover,\n  .carousel-control-prev:focus,\n  .carousel-control-prev:hover {\n    color: #fff;\n    text-decoration: none;\n    outline: 0;\n    opacity: 0.9;\n  }\n  .carousel-control-prev {\n    left: 0;\n  }\n  .carousel-control-next {\n    right: 0;\n  }\n  .carousel-control-next-icon,\n  .carousel-control-prev-icon {\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    background: 50%/100% 100% no-repeat;\n  }\n  .carousel-control-prev-icon {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath d='M5.25 0l-4 4 4 4 1.5-1.5L4.25 4l2.5-2.5L5.25 0z'/%3e%3c/svg%3e\");\n  }\n  .carousel-control-next-icon {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath d='M2.75 0l-1.5 1.5L3.75 4l-2.5 2.5L2.75 8l4-4-4-4z'/%3e%3c/svg%3e\");\n  }\n  .carousel-indicators {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 15;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-pack: center;\n    justify-content: center;\n    padding-left: 0;\n    margin-right: 15%;\n    margin-left: 15%;\n    list-style: none;\n  }\n  .carousel-indicators li {\n    box-sizing: content-box;\n    -ms-flex: 0 1 auto;\n    flex: 0 1 auto;\n    width: 30px;\n    height: 3px;\n    margin-right: 3px;\n    margin-left: 3px;\n    text-indent: -999px;\n    cursor: pointer;\n    background-color: #fff;\n    background-clip: padding-box;\n    border-top: 10px solid transparent;\n    border-bottom: 10px solid transparent;\n    opacity: 0.5;\n    transition: opacity 0.6s ease;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .carousel-indicators li {\n      transition: none;\n    }\n  }\n  .carousel-indicators .active {\n    opacity: 1;\n  }\n  .carousel-caption {\n    position: absolute;\n    right: 15%;\n    bottom: 20px;\n    left: 15%;\n    z-index: 10;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    color: #fff;\n    text-align: center;\n  }\n  @-webkit-keyframes spinner-border {\n    to {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes spinner-border {\n    to {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n  .spinner-border {\n    display: inline-block;\n    width: 2rem;\n    height: 2rem;\n    vertical-align: text-bottom;\n    border: 0.25em solid currentColor;\n    border-right-color: transparent;\n    border-radius: 50%;\n    -webkit-animation: 0.75s linear infinite spinner-border;\n    animation: 0.75s linear infinite spinner-border;\n  }\n  .spinner-border-sm {\n    width: 1rem;\n    height: 1rem;\n    border-width: 0.2em;\n  }\n  @-webkit-keyframes spinner-grow {\n    0% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n    50% {\n      opacity: 1;\n      -webkit-transform: none;\n      transform: none;\n    }\n  }\n  @keyframes spinner-grow {\n    0% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n    50% {\n      opacity: 1;\n      -webkit-transform: none;\n      transform: none;\n    }\n  }\n  .spinner-grow {\n    display: inline-block;\n    width: 2rem;\n    height: 2rem;\n    vertical-align: text-bottom;\n    background-color: currentColor;\n    border-radius: 50%;\n    opacity: 0;\n    -webkit-animation: 0.75s linear infinite spinner-grow;\n    animation: 0.75s linear infinite spinner-grow;\n  }\n  .spinner-grow-sm {\n    width: 1rem;\n    height: 1rem;\n  }\n  @media (prefers-reduced-motion: reduce) {\n    .spinner-border,\n    .spinner-grow {\n      -webkit-animation-duration: 1.5s;\n      animation-duration: 1.5s;\n    }\n  }\n  .align-baseline {\n    vertical-align: baseline !important;\n  }\n  .align-top {\n    vertical-align: top !important;\n  }\n  .align-middle {\n    vertical-align: middle !important;\n  }\n  .align-bottom {\n    vertical-align: bottom !important;\n  }\n  .align-text-bottom {\n    vertical-align: text-bottom !important;\n  }\n  .align-text-top {\n    vertical-align: text-top !important;\n  }\n  .bg-primary {\n    background-color: #007bff !important;\n  }\n  a.bg-primary:focus,\n  a.bg-primary:hover,\n  button.bg-primary:focus,\n  button.bg-primary:hover {\n    background-color: #0062cc !important;\n  }\n  .bg-secondary {\n    background-color: #6c757d !important;\n  }\n  a.bg-secondary:focus,\n  a.bg-secondary:hover,\n  button.bg-secondary:focus,\n  button.bg-secondary:hover {\n    background-color: #545b62 !important;\n  }\n  .bg-success {\n    background-color: #28a745 !important;\n  }\n  a.bg-success:focus,\n  a.bg-success:hover,\n  button.bg-success:focus,\n  button.bg-success:hover {\n    background-color: #1e7e34 !important;\n  }\n  .bg-info {\n    background-color: #17a2b8 !important;\n  }\n  a.bg-info:focus,\n  a.bg-info:hover,\n  button.bg-info:focus,\n  button.bg-info:hover {\n    background-color: #117a8b !important;\n  }\n  .bg-warning {\n    background-color: #ffc107 !important;\n  }\n  a.bg-warning:focus,\n  a.bg-warning:hover,\n  button.bg-warning:focus,\n  button.bg-warning:hover {\n    background-color: #d39e00 !important;\n  }\n  .bg-danger {\n    background-color: #dc3545 !important;\n  }\n  a.bg-danger:focus,\n  a.bg-danger:hover,\n  button.bg-danger:focus,\n  button.bg-danger:hover {\n    background-color: #bd2130 !important;\n  }\n  .bg-light {\n    background-color: #f8f9fa !important;\n  }\n  a.bg-light:focus,\n  a.bg-light:hover,\n  button.bg-light:focus,\n  button.bg-light:hover {\n    background-color: #dae0e5 !important;\n  }\n  .bg-dark {\n    background-color: #343a40 !important;\n  }\n  a.bg-dark:focus,\n  a.bg-dark:hover,\n  button.bg-dark:focus,\n  button.bg-dark:hover {\n    background-color: #1d2124 !important;\n  }\n  .bg-white {\n    background-color: #fff !important;\n  }\n  .bg-transparent {\n    background-color: transparent !important;\n  }\n  .border {\n    border: 1px solid #dee2e6 !important;\n  }\n  .border-top {\n    border-top: 1px solid #dee2e6 !important;\n  }\n  .border-right {\n    border-right: 1px solid #dee2e6 !important;\n  }\n  .border-bottom {\n    border-bottom: 1px solid #dee2e6 !important;\n  }\n  .border-left {\n    border-left: 1px solid #dee2e6 !important;\n  }\n  .border-0 {\n    border: 0 !important;\n  }\n  .border-top-0 {\n    border-top: 0 !important;\n  }\n  .border-right-0 {\n    border-right: 0 !important;\n  }\n  .border-bottom-0 {\n    border-bottom: 0 !important;\n  }\n  .border-left-0 {\n    border-left: 0 !important;\n  }\n  .border-primary {\n    border-color: #007bff !important;\n  }\n  .border-secondary {\n    border-color: #6c757d !important;\n  }\n  .border-success {\n    border-color: #28a745 !important;\n  }\n  .border-info {\n    border-color: #17a2b8 !important;\n  }\n  .border-warning {\n    border-color: #ffc107 !important;\n  }\n  .border-danger {\n    border-color: #dc3545 !important;\n  }\n  .border-light {\n    border-color: #f8f9fa !important;\n  }\n  .border-dark {\n    border-color: #343a40 !important;\n  }\n  .border-white {\n    border-color: #fff !important;\n  }\n  .rounded-sm {\n    border-radius: 0.2rem !important;\n  }\n  .rounded {\n    border-radius: 0.25rem !important;\n  }\n  .rounded-top {\n    border-top-left-radius: 0.25rem !important;\n    border-top-right-radius: 0.25rem !important;\n  }\n  .rounded-right {\n    border-top-right-radius: 0.25rem !important;\n    border-bottom-right-radius: 0.25rem !important;\n  }\n  .rounded-bottom {\n    border-bottom-right-radius: 0.25rem !important;\n    border-bottom-left-radius: 0.25rem !important;\n  }\n  .rounded-left {\n    border-top-left-radius: 0.25rem !important;\n    border-bottom-left-radius: 0.25rem !important;\n  }\n  .rounded-lg {\n    border-radius: 0.3rem !important;\n  }\n  .rounded-circle {\n    border-radius: 50% !important;\n  }\n  .rounded-pill {\n    border-radius: 50rem !important;\n  }\n  .rounded-0 {\n    border-radius: 0 !important;\n  }\n  .clearfix::after {\n    display: block;\n    clear: both;\n    content: '';\n  }\n  .d-none {\n    display: none !important;\n  }\n  .d-inline {\n    display: inline !important;\n  }\n  .d-inline-block {\n    display: inline-block !important;\n  }\n  .d-block {\n    display: block !important;\n  }\n  .d-table {\n    display: table !important;\n  }\n  .d-table-row {\n    display: table-row !important;\n  }\n  .d-table-cell {\n    display: table-cell !important;\n  }\n  .d-flex {\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-inline-flex {\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n  @media (min-width: 576px) {\n    .d-sm-none {\n      display: none !important;\n    }\n    .d-sm-inline {\n      display: inline !important;\n    }\n    .d-sm-inline-block {\n      display: inline-block !important;\n    }\n    .d-sm-block {\n      display: block !important;\n    }\n    .d-sm-table {\n      display: table !important;\n    }\n    .d-sm-table-row {\n      display: table-row !important;\n    }\n    .d-sm-table-cell {\n      display: table-cell !important;\n    }\n    .d-sm-flex {\n      display: -ms-flexbox !important;\n      display: flex !important;\n    }\n    .d-sm-inline-flex {\n      display: -ms-inline-flexbox !important;\n      display: inline-flex !important;\n    }\n  }\n  @media (min-width: 768px) {\n    .d-md-none {\n      display: none !important;\n    }\n    .d-md-inline {\n      display: inline !important;\n    }\n    .d-md-inline-block {\n      display: inline-block !important;\n    }\n    .d-md-block {\n      display: block !important;\n    }\n    .d-md-table {\n      display: table !important;\n    }\n    .d-md-table-row {\n      display: table-row !important;\n    }\n    .d-md-table-cell {\n      display: table-cell !important;\n    }\n    .d-md-flex {\n      display: -ms-flexbox !important;\n      display: flex !important;\n    }\n    .d-md-inline-flex {\n      display: -ms-inline-flexbox !important;\n      display: inline-flex !important;\n    }\n  }\n  @media (min-width: 992px) {\n    .d-lg-none {\n      display: none !important;\n    }\n    .d-lg-inline {\n      display: inline !important;\n    }\n    .d-lg-inline-block {\n      display: inline-block !important;\n    }\n    .d-lg-block {\n      display: block !important;\n    }\n    .d-lg-table {\n      display: table !important;\n    }\n    .d-lg-table-row {\n      display: table-row !important;\n    }\n    .d-lg-table-cell {\n      display: table-cell !important;\n    }\n    .d-lg-flex {\n      display: -ms-flexbox !important;\n      display: flex !important;\n    }\n    .d-lg-inline-flex {\n      display: -ms-inline-flexbox !important;\n      display: inline-flex !important;\n    }\n  }\n  @media (min-width: 1200px) {\n    .d-xl-none {\n      display: none !important;\n    }\n    .d-xl-inline {\n      display: inline !important;\n    }\n    .d-xl-inline-block {\n      display: inline-block !important;\n    }\n    .d-xl-block {\n      display: block !important;\n    }\n    .d-xl-table {\n      display: table !important;\n    }\n    .d-xl-table-row {\n      display: table-row !important;\n    }\n    .d-xl-table-cell {\n      display: table-cell !important;\n    }\n    .d-xl-flex {\n      display: -ms-flexbox !important;\n      display: flex !important;\n    }\n    .d-xl-inline-flex {\n      display: -ms-inline-flexbox !important;\n      display: inline-flex !important;\n    }\n  }\n  @media print {\n    .d-print-none {\n      display: none !important;\n    }\n    .d-print-inline {\n      display: inline !important;\n    }\n    .d-print-inline-block {\n      display: inline-block !important;\n    }\n    .d-print-block {\n      display: block !important;\n    }\n    .d-print-table {\n      display: table !important;\n    }\n    .d-print-table-row {\n      display: table-row !important;\n    }\n    .d-print-table-cell {\n      display: table-cell !important;\n    }\n    .d-print-flex {\n      display: -ms-flexbox !important;\n      display: flex !important;\n    }\n    .d-print-inline-flex {\n      display: -ms-inline-flexbox !important;\n      display: inline-flex !important;\n    }\n  }\n  .embed-responsive {\n    position: relative;\n    display: block;\n    width: 100%;\n    padding: 0;\n    overflow: hidden;\n  }\n  .embed-responsive::before {\n    display: block;\n    content: '';\n  }\n  .embed-responsive .embed-responsive-item,\n  .embed-responsive embed,\n  .embed-responsive iframe,\n  .embed-responsive object,\n  .embed-responsive video {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: 0;\n  }\n  .embed-responsive-21by9::before {\n    padding-top: 42.857143%;\n  }\n  .embed-responsive-16by9::before {\n    padding-top: 56.25%;\n  }\n  .embed-responsive-4by3::before {\n    padding-top: 75%;\n  }\n  .embed-responsive-1by1::before {\n    padding-top: 100%;\n  }\n  .flex-row {\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-column {\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-row-reverse {\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-column-reverse {\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .flex-fill {\n    -ms-flex: 1 1 auto !important;\n    flex: 1 1 auto !important;\n  }\n  .flex-grow-0 {\n    -ms-flex-positive: 0 !important;\n    flex-grow: 0 !important;\n  }\n  .flex-grow-1 {\n    -ms-flex-positive: 1 !important;\n    flex-grow: 1 !important;\n  }\n  .flex-shrink-0 {\n    -ms-flex-negative: 0 !important;\n    flex-shrink: 0 !important;\n  }\n  .flex-shrink-1 {\n    -ms-flex-negative: 1 !important;\n    flex-shrink: 1 !important;\n  }\n  .justify-content-start {\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-end {\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-center {\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-between {\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-start {\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-end {\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-center {\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-baseline {\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-stretch {\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n  @media (min-width: 576px) {\n    .flex-sm-row {\n      -ms-flex-direction: row !important;\n      flex-direction: row !important;\n    }\n    .flex-sm-column {\n      -ms-flex-direction: column !important;\n      flex-direction: column !important;\n    }\n    .flex-sm-row-reverse {\n      -ms-flex-direction: row-reverse !important;\n      flex-direction: row-reverse !important;\n    }\n    .flex-sm-column-reverse {\n      -ms-flex-direction: column-reverse !important;\n      flex-direction: column-reverse !important;\n    }\n    .flex-sm-wrap {\n      -ms-flex-wrap: wrap !important;\n      flex-wrap: wrap !important;\n    }\n    .flex-sm-nowrap {\n      -ms-flex-wrap: nowrap !important;\n      flex-wrap: nowrap !important;\n    }\n    .flex-sm-wrap-reverse {\n      -ms-flex-wrap: wrap-reverse !important;\n      flex-wrap: wrap-reverse !important;\n    }\n    .flex-sm-fill {\n      -ms-flex: 1 1 auto !important;\n      flex: 1 1 auto !important;\n    }\n    .flex-sm-grow-0 {\n      -ms-flex-positive: 0 !important;\n      flex-grow: 0 !important;\n    }\n    .flex-sm-grow-1 {\n      -ms-flex-positive: 1 !important;\n      flex-grow: 1 !important;\n    }\n    .flex-sm-shrink-0 {\n      -ms-flex-negative: 0 !important;\n      flex-shrink: 0 !important;\n    }\n    .flex-sm-shrink-1 {\n      -ms-flex-negative: 1 !important;\n      flex-shrink: 1 !important;\n    }\n    .justify-content-sm-start {\n      -ms-flex-pack: start !important;\n      justify-content: flex-start !important;\n    }\n    .justify-content-sm-end {\n      -ms-flex-pack: end !important;\n      justify-content: flex-end !important;\n    }\n    .justify-content-sm-center {\n      -ms-flex-pack: center !important;\n      justify-content: center !important;\n    }\n    .justify-content-sm-between {\n      -ms-flex-pack: justify !important;\n      justify-content: space-between !important;\n    }\n    .justify-content-sm-around {\n      -ms-flex-pack: distribute !important;\n      justify-content: space-around !important;\n    }\n    .align-items-sm-start {\n      -ms-flex-align: start !important;\n      align-items: flex-start !important;\n    }\n    .align-items-sm-end {\n      -ms-flex-align: end !important;\n      align-items: flex-end !important;\n    }\n    .align-items-sm-center {\n      -ms-flex-align: center !important;\n      align-items: center !important;\n    }\n    .align-items-sm-baseline {\n      -ms-flex-align: baseline !important;\n      align-items: baseline !important;\n    }\n    .align-items-sm-stretch {\n      -ms-flex-align: stretch !important;\n      align-items: stretch !important;\n    }\n    .align-content-sm-start {\n      -ms-flex-line-pack: start !important;\n      align-content: flex-start !important;\n    }\n    .align-content-sm-end {\n      -ms-flex-line-pack: end !important;\n      align-content: flex-end !important;\n    }\n    .align-content-sm-center {\n      -ms-flex-line-pack: center !important;\n      align-content: center !important;\n    }\n    .align-content-sm-between {\n      -ms-flex-line-pack: justify !important;\n      align-content: space-between !important;\n    }\n    .align-content-sm-around {\n      -ms-flex-line-pack: distribute !important;\n      align-content: space-around !important;\n    }\n    .align-content-sm-stretch {\n      -ms-flex-line-pack: stretch !important;\n      align-content: stretch !important;\n    }\n    .align-self-sm-auto {\n      -ms-flex-item-align: auto !important;\n      align-self: auto !important;\n    }\n    .align-self-sm-start {\n      -ms-flex-item-align: start !important;\n      align-self: flex-start !important;\n    }\n    .align-self-sm-end {\n      -ms-flex-item-align: end !important;\n      align-self: flex-end !important;\n    }\n    .align-self-sm-center {\n      -ms-flex-item-align: center !important;\n      align-self: center !important;\n    }\n    .align-self-sm-baseline {\n      -ms-flex-item-align: baseline !important;\n      align-self: baseline !important;\n    }\n    .align-self-sm-stretch {\n      -ms-flex-item-align: stretch !important;\n      align-self: stretch !important;\n    }\n  }\n  @media (min-width: 768px) {\n    .flex-md-row {\n      -ms-flex-direction: row !important;\n      flex-direction: row !important;\n    }\n    .flex-md-column {\n      -ms-flex-direction: column !important;\n      flex-direction: column !important;\n    }\n    .flex-md-row-reverse {\n      -ms-flex-direction: row-reverse !important;\n      flex-direction: row-reverse !important;\n    }\n    .flex-md-column-reverse {\n      -ms-flex-direction: column-reverse !important;\n      flex-direction: column-reverse !important;\n    }\n    .flex-md-wrap {\n      -ms-flex-wrap: wrap !important;\n      flex-wrap: wrap !important;\n    }\n    .flex-md-nowrap {\n      -ms-flex-wrap: nowrap !important;\n      flex-wrap: nowrap !important;\n    }\n    .flex-md-wrap-reverse {\n      -ms-flex-wrap: wrap-reverse !important;\n      flex-wrap: wrap-reverse !important;\n    }\n    .flex-md-fill {\n      -ms-flex: 1 1 auto !important;\n      flex: 1 1 auto !important;\n    }\n    .flex-md-grow-0 {\n      -ms-flex-positive: 0 !important;\n      flex-grow: 0 !important;\n    }\n    .flex-md-grow-1 {\n      -ms-flex-positive: 1 !important;\n      flex-grow: 1 !important;\n    }\n    .flex-md-shrink-0 {\n      -ms-flex-negative: 0 !important;\n      flex-shrink: 0 !important;\n    }\n    .flex-md-shrink-1 {\n      -ms-flex-negative: 1 !important;\n      flex-shrink: 1 !important;\n    }\n    .justify-content-md-start {\n      -ms-flex-pack: start !important;\n      justify-content: flex-start !important;\n    }\n    .justify-content-md-end {\n      -ms-flex-pack: end !important;\n      justify-content: flex-end !important;\n    }\n    .justify-content-md-center {\n      -ms-flex-pack: center !important;\n      justify-content: center !important;\n    }\n    .justify-content-md-between {\n      -ms-flex-pack: justify !important;\n      justify-content: space-between !important;\n    }\n    .justify-content-md-around {\n      -ms-flex-pack: distribute !important;\n      justify-content: space-around !important;\n    }\n    .align-items-md-start {\n      -ms-flex-align: start !important;\n      align-items: flex-start !important;\n    }\n    .align-items-md-end {\n      -ms-flex-align: end !important;\n      align-items: flex-end !important;\n    }\n    .align-items-md-center {\n      -ms-flex-align: center !important;\n      align-items: center !important;\n    }\n    .align-items-md-baseline {\n      -ms-flex-align: baseline !important;\n      align-items: baseline !important;\n    }\n    .align-items-md-stretch {\n      -ms-flex-align: stretch !important;\n      align-items: stretch !important;\n    }\n    .align-content-md-start {\n      -ms-flex-line-pack: start !important;\n      align-content: flex-start !important;\n    }\n    .align-content-md-end {\n      -ms-flex-line-pack: end !important;\n      align-content: flex-end !important;\n    }\n    .align-content-md-center {\n      -ms-flex-line-pack: center !important;\n      align-content: center !important;\n    }\n    .align-content-md-between {\n      -ms-flex-line-pack: justify !important;\n      align-content: space-between !important;\n    }\n    .align-content-md-around {\n      -ms-flex-line-pack: distribute !important;\n      align-content: space-around !important;\n    }\n    .align-content-md-stretch {\n      -ms-flex-line-pack: stretch !important;\n      align-content: stretch !important;\n    }\n    .align-self-md-auto {\n      -ms-flex-item-align: auto !important;\n      align-self: auto !important;\n    }\n    .align-self-md-start {\n      -ms-flex-item-align: start !important;\n      align-self: flex-start !important;\n    }\n    .align-self-md-end {\n      -ms-flex-item-align: end !important;\n      align-self: flex-end !important;\n    }\n    .align-self-md-center {\n      -ms-flex-item-align: center !important;\n      align-self: center !important;\n    }\n    .align-self-md-baseline {\n      -ms-flex-item-align: baseline !important;\n      align-self: baseline !important;\n    }\n    .align-self-md-stretch {\n      -ms-flex-item-align: stretch !important;\n      align-self: stretch !important;\n    }\n  }\n  @media (min-width: 992px) {\n    .flex-lg-row {\n      -ms-flex-direction: row !important;\n      flex-direction: row !important;\n    }\n    .flex-lg-column {\n      -ms-flex-direction: column !important;\n      flex-direction: column !important;\n    }\n    .flex-lg-row-reverse {\n      -ms-flex-direction: row-reverse !important;\n      flex-direction: row-reverse !important;\n    }\n    .flex-lg-column-reverse {\n      -ms-flex-direction: column-reverse !important;\n      flex-direction: column-reverse !important;\n    }\n    .flex-lg-wrap {\n      -ms-flex-wrap: wrap !important;\n      flex-wrap: wrap !important;\n    }\n    .flex-lg-nowrap {\n      -ms-flex-wrap: nowrap !important;\n      flex-wrap: nowrap !important;\n    }\n    .flex-lg-wrap-reverse {\n      -ms-flex-wrap: wrap-reverse !important;\n      flex-wrap: wrap-reverse !important;\n    }\n    .flex-lg-fill {\n      -ms-flex: 1 1 auto !important;\n      flex: 1 1 auto !important;\n    }\n    .flex-lg-grow-0 {\n      -ms-flex-positive: 0 !important;\n      flex-grow: 0 !important;\n    }\n    .flex-lg-grow-1 {\n      -ms-flex-positive: 1 !important;\n      flex-grow: 1 !important;\n    }\n    .flex-lg-shrink-0 {\n      -ms-flex-negative: 0 !important;\n      flex-shrink: 0 !important;\n    }\n    .flex-lg-shrink-1 {\n      -ms-flex-negative: 1 !important;\n      flex-shrink: 1 !important;\n    }\n    .justify-content-lg-start {\n      -ms-flex-pack: start !important;\n      justify-content: flex-start !important;\n    }\n    .justify-content-lg-end {\n      -ms-flex-pack: end !important;\n      justify-content: flex-end !important;\n    }\n    .justify-content-lg-center {\n      -ms-flex-pack: center !important;\n      justify-content: center !important;\n    }\n    .justify-content-lg-between {\n      -ms-flex-pack: justify !important;\n      justify-content: space-between !important;\n    }\n    .justify-content-lg-around {\n      -ms-flex-pack: distribute !important;\n      justify-content: space-around !important;\n    }\n    .align-items-lg-start {\n      -ms-flex-align: start !important;\n      align-items: flex-start !important;\n    }\n    .align-items-lg-end {\n      -ms-flex-align: end !important;\n      align-items: flex-end !important;\n    }\n    .align-items-lg-center {\n      -ms-flex-align: center !important;\n      align-items: center !important;\n    }\n    .align-items-lg-baseline {\n      -ms-flex-align: baseline !important;\n      align-items: baseline !important;\n    }\n    .align-items-lg-stretch {\n      -ms-flex-align: stretch !important;\n      align-items: stretch !important;\n    }\n    .align-content-lg-start {\n      -ms-flex-line-pack: start !important;\n      align-content: flex-start !important;\n    }\n    .align-content-lg-end {\n      -ms-flex-line-pack: end !important;\n      align-content: flex-end !important;\n    }\n    .align-content-lg-center {\n      -ms-flex-line-pack: center !important;\n      align-content: center !important;\n    }\n    .align-content-lg-between {\n      -ms-flex-line-pack: justify !important;\n      align-content: space-between !important;\n    }\n    .align-content-lg-around {\n      -ms-flex-line-pack: distribute !important;\n      align-content: space-around !important;\n    }\n    .align-content-lg-stretch {\n      -ms-flex-line-pack: stretch !important;\n      align-content: stretch !important;\n    }\n    .align-self-lg-auto {\n      -ms-flex-item-align: auto !important;\n      align-self: auto !important;\n    }\n    .align-self-lg-start {\n      -ms-flex-item-align: start !important;\n      align-self: flex-start !important;\n    }\n    .align-self-lg-end {\n      -ms-flex-item-align: end !important;\n      align-self: flex-end !important;\n    }\n    .align-self-lg-center {\n      -ms-flex-item-align: center !important;\n      align-self: center !important;\n    }\n    .align-self-lg-baseline {\n      -ms-flex-item-align: baseline !important;\n      align-self: baseline !important;\n    }\n    .align-self-lg-stretch {\n      -ms-flex-item-align: stretch !important;\n      align-self: stretch !important;\n    }\n  }\n  @media (min-width: 1200px) {\n    .flex-xl-row {\n      -ms-flex-direction: row !important;\n      flex-direction: row !important;\n    }\n    .flex-xl-column {\n      -ms-flex-direction: column !important;\n      flex-direction: column !important;\n    }\n    .flex-xl-row-reverse {\n      -ms-flex-direction: row-reverse !important;\n      flex-direction: row-reverse !important;\n    }\n    .flex-xl-column-reverse {\n      -ms-flex-direction: column-reverse !important;\n      flex-direction: column-reverse !important;\n    }\n    .flex-xl-wrap {\n      -ms-flex-wrap: wrap !important;\n      flex-wrap: wrap !important;\n    }\n    .flex-xl-nowrap {\n      -ms-flex-wrap: nowrap !important;\n      flex-wrap: nowrap !important;\n    }\n    .flex-xl-wrap-reverse {\n      -ms-flex-wrap: wrap-reverse !important;\n      flex-wrap: wrap-reverse !important;\n    }\n    .flex-xl-fill {\n      -ms-flex: 1 1 auto !important;\n      flex: 1 1 auto !important;\n    }\n    .flex-xl-grow-0 {\n      -ms-flex-positive: 0 !important;\n      flex-grow: 0 !important;\n    }\n    .flex-xl-grow-1 {\n      -ms-flex-positive: 1 !important;\n      flex-grow: 1 !important;\n    }\n    .flex-xl-shrink-0 {\n      -ms-flex-negative: 0 !important;\n      flex-shrink: 0 !important;\n    }\n    .flex-xl-shrink-1 {\n      -ms-flex-negative: 1 !important;\n      flex-shrink: 1 !important;\n    }\n    .justify-content-xl-start {\n      -ms-flex-pack: start !important;\n      justify-content: flex-start !important;\n    }\n    .justify-content-xl-end {\n      -ms-flex-pack: end !important;\n      justify-content: flex-end !important;\n    }\n    .justify-content-xl-center {\n      -ms-flex-pack: center !important;\n      justify-content: center !important;\n    }\n    .justify-content-xl-between {\n      -ms-flex-pack: justify !important;\n      justify-content: space-between !important;\n    }\n    .justify-content-xl-around {\n      -ms-flex-pack: distribute !important;\n      justify-content: space-around !important;\n    }\n    .align-items-xl-start {\n      -ms-flex-align: start !important;\n      align-items: flex-start !important;\n    }\n    .align-items-xl-end {\n      -ms-flex-align: end !important;\n      align-items: flex-end !important;\n    }\n    .align-items-xl-center {\n      -ms-flex-align: center !important;\n      align-items: center !important;\n    }\n    .align-items-xl-baseline {\n      -ms-flex-align: baseline !important;\n      align-items: baseline !important;\n    }\n    .align-items-xl-stretch {\n      -ms-flex-align: stretch !important;\n      align-items: stretch !important;\n    }\n    .align-content-xl-start {\n      -ms-flex-line-pack: start !important;\n      align-content: flex-start !important;\n    }\n    .align-content-xl-end {\n      -ms-flex-line-pack: end !important;\n      align-content: flex-end !important;\n    }\n    .align-content-xl-center {\n      -ms-flex-line-pack: center !important;\n      align-content: center !important;\n    }\n    .align-content-xl-between {\n      -ms-flex-line-pack: justify !important;\n      align-content: space-between !important;\n    }\n    .align-content-xl-around {\n      -ms-flex-line-pack: distribute !important;\n      align-content: space-around !important;\n    }\n    .align-content-xl-stretch {\n      -ms-flex-line-pack: stretch !important;\n      align-content: stretch !important;\n    }\n    .align-self-xl-auto {\n      -ms-flex-item-align: auto !important;\n      align-self: auto !important;\n    }\n    .align-self-xl-start {\n      -ms-flex-item-align: start !important;\n      align-self: flex-start !important;\n    }\n    .align-self-xl-end {\n      -ms-flex-item-align: end !important;\n      align-self: flex-end !important;\n    }\n    .align-self-xl-center {\n      -ms-flex-item-align: center !important;\n      align-self: center !important;\n    }\n    .align-self-xl-baseline {\n      -ms-flex-item-align: baseline !important;\n      align-self: baseline !important;\n    }\n    .align-self-xl-stretch {\n      -ms-flex-item-align: stretch !important;\n      align-self: stretch !important;\n    }\n  }\n  .float-left {\n    float: left !important;\n  }\n  .float-right {\n    float: right !important;\n  }\n  .float-none {\n    float: none !important;\n  }\n  @media (min-width: 576px) {\n    .float-sm-left {\n      float: left !important;\n    }\n    .float-sm-right {\n      float: right !important;\n    }\n    .float-sm-none {\n      float: none !important;\n    }\n  }\n  @media (min-width: 768px) {\n    .float-md-left {\n      float: left !important;\n    }\n    .float-md-right {\n      float: right !important;\n    }\n    .float-md-none {\n      float: none !important;\n    }\n  }\n  @media (min-width: 992px) {\n    .float-lg-left {\n      float: left !important;\n    }\n    .float-lg-right {\n      float: right !important;\n    }\n    .float-lg-none {\n      float: none !important;\n    }\n  }\n  @media (min-width: 1200px) {\n    .float-xl-left {\n      float: left !important;\n    }\n    .float-xl-right {\n      float: right !important;\n    }\n    .float-xl-none {\n      float: none !important;\n    }\n  }\n  .user-select-all {\n    -webkit-user-select: all !important;\n    -moz-user-select: all !important;\n    user-select: all !important;\n  }\n  .user-select-auto {\n    -webkit-user-select: auto !important;\n    -moz-user-select: auto !important;\n    -ms-user-select: auto !important;\n    user-select: auto !important;\n  }\n  .user-select-none {\n    -webkit-user-select: none !important;\n    -moz-user-select: none !important;\n    -ms-user-select: none !important;\n    user-select: none !important;\n  }\n  .overflow-auto {\n    overflow: auto !important;\n  }\n  .overflow-hidden {\n    overflow: hidden !important;\n  }\n  .position-static {\n    position: static !important;\n  }\n  .position-relative {\n    position: relative !important;\n  }\n  .position-absolute {\n    position: absolute !important;\n  }\n  .position-fixed {\n    position: fixed !important;\n  }\n  .position-sticky {\n    position: -webkit-sticky !important;\n    position: sticky !important;\n  }\n  .fixed-top {\n    position: fixed;\n    top: 0;\n    right: 0;\n    left: 0;\n    z-index: 1030;\n  }\n  .fixed-bottom {\n    position: fixed;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1030;\n  }\n  @supports ((position: -webkit-sticky) or (position: sticky)) {\n    .sticky-top {\n      position: -webkit-sticky;\n      position: sticky;\n      top: 0;\n      z-index: 1020;\n    }\n  }\n  .sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n  }\n  .sr-only-focusable:active,\n  .sr-only-focusable:focus {\n    position: static;\n    width: auto;\n    height: auto;\n    overflow: visible;\n    clip: auto;\n    white-space: normal;\n  }\n  .shadow-sm {\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  }\n  .shadow {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n  .shadow-lg {\n    box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175) !important;\n  }\n  .shadow-none {\n    box-shadow: none !important;\n  }\n  .w-25 {\n    width: 25% !important;\n  }\n  .w-50 {\n    width: 50% !important;\n  }\n  .w-75 {\n    width: 75% !important;\n  }\n  .w-100 {\n    width: 100% !important;\n  }\n  .w-auto {\n    width: auto !important;\n  }\n  .h-25 {\n    height: 25% !important;\n  }\n  .h-50 {\n    height: 50% !important;\n  }\n  .h-75 {\n    height: 75% !important;\n  }\n  .h-100 {\n    height: 100% !important;\n  }\n  .h-auto {\n    height: auto !important;\n  }\n  .mw-100 {\n    max-width: 100% !important;\n  }\n  .mh-100 {\n    max-height: 100% !important;\n  }\n  .min-vw-100 {\n    min-width: 100vw !important;\n  }\n  .min-vh-100 {\n    min-height: 100vh !important;\n  }\n  .vw-100 {\n    width: 100vw !important;\n  }\n  .vh-100 {\n    height: 100vh !important;\n  }\n  .m-0 {\n    margin: 0 !important;\n  }\n  .mt-0,\n  .my-0 {\n    margin-top: 0 !important;\n  }\n  .mr-0,\n  .mx-0 {\n    margin-right: 0 !important;\n  }\n  .mb-0,\n  .my-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-0,\n  .mx-0 {\n    margin-left: 0 !important;\n  }\n  .m-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-1,\n  .my-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-1,\n  .mx-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-1,\n  .my-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-1,\n  .mx-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-2,\n  .my-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-2,\n  .mx-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-2,\n  .my-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-2,\n  .mx-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-3 {\n    margin: 1rem !important;\n  }\n  .mt-3,\n  .my-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-3,\n  .mx-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-3,\n  .my-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-3,\n  .mx-3 {\n    margin-left: 1rem !important;\n  }\n  .m-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-4,\n  .my-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-4,\n  .mx-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-4,\n  .my-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-4,\n  .mx-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-5 {\n    margin: 3rem !important;\n  }\n  .mt-5,\n  .my-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-5,\n  .mx-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-5,\n  .my-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-5,\n  .mx-5 {\n    margin-left: 3rem !important;\n  }\n  .p-0 {\n    padding: 0 !important;\n  }\n  .pt-0,\n  .py-0 {\n    padding-top: 0 !important;\n  }\n  .pr-0,\n  .px-0 {\n    padding-right: 0 !important;\n  }\n  .pb-0,\n  .py-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-0,\n  .px-0 {\n    padding-left: 0 !important;\n  }\n  .p-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-1,\n  .py-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-1,\n  .px-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-1,\n  .py-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-1,\n  .px-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-2,\n  .py-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-2,\n  .px-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-2,\n  .py-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-2,\n  .px-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-3 {\n    padding: 1rem !important;\n  }\n  .pt-3,\n  .py-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-3,\n  .px-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-3,\n  .py-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-3,\n  .px-3 {\n    padding-left: 1rem !important;\n  }\n  .p-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-4,\n  .py-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-4,\n  .px-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-4,\n  .py-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-4,\n  .px-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-5 {\n    padding: 3rem !important;\n  }\n  .pt-5,\n  .py-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-5,\n  .px-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-5,\n  .py-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-5,\n  .px-5 {\n    padding-left: 3rem !important;\n  }\n  .m-n1 {\n    margin: -0.25rem !important;\n  }\n  .mt-n1,\n  .my-n1 {\n    margin-top: -0.25rem !important;\n  }\n  .mr-n1,\n  .mx-n1 {\n    margin-right: -0.25rem !important;\n  }\n  .mb-n1,\n  .my-n1 {\n    margin-bottom: -0.25rem !important;\n  }\n  .ml-n1,\n  .mx-n1 {\n    margin-left: -0.25rem !important;\n  }\n  .m-n2 {\n    margin: -0.5rem !important;\n  }\n  .mt-n2,\n  .my-n2 {\n    margin-top: -0.5rem !important;\n  }\n  .mr-n2,\n  .mx-n2 {\n    margin-right: -0.5rem !important;\n  }\n  .mb-n2,\n  .my-n2 {\n    margin-bottom: -0.5rem !important;\n  }\n  .ml-n2,\n  .mx-n2 {\n    margin-left: -0.5rem !important;\n  }\n  .m-n3 {\n    margin: -1rem !important;\n  }\n  .mt-n3,\n  .my-n3 {\n    margin-top: -1rem !important;\n  }\n  .mr-n3,\n  .mx-n3 {\n    margin-right: -1rem !important;\n  }\n  .mb-n3,\n  .my-n3 {\n    margin-bottom: -1rem !important;\n  }\n  .ml-n3,\n  .mx-n3 {\n    margin-left: -1rem !important;\n  }\n  .m-n4 {\n    margin: -1.5rem !important;\n  }\n  .mt-n4,\n  .my-n4 {\n    margin-top: -1.5rem !important;\n  }\n  .mr-n4,\n  .mx-n4 {\n    margin-right: -1.5rem !important;\n  }\n  .mb-n4,\n  .my-n4 {\n    margin-bottom: -1.5rem !important;\n  }\n  .ml-n4,\n  .mx-n4 {\n    margin-left: -1.5rem !important;\n  }\n  .m-n5 {\n    margin: -3rem !important;\n  }\n  .mt-n5,\n  .my-n5 {\n    margin-top: -3rem !important;\n  }\n  .mr-n5,\n  .mx-n5 {\n    margin-right: -3rem !important;\n  }\n  .mb-n5,\n  .my-n5 {\n    margin-bottom: -3rem !important;\n  }\n  .ml-n5,\n  .mx-n5 {\n    margin-left: -3rem !important;\n  }\n  .m-auto {\n    margin: auto !important;\n  }\n  .mt-auto,\n  .my-auto {\n    margin-top: auto !important;\n  }\n  .mr-auto,\n  .mx-auto {\n    margin-right: auto !important;\n  }\n  .mb-auto,\n  .my-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-auto,\n  .mx-auto {\n    margin-left: auto !important;\n  }\n  @media (min-width: 576px) {\n    .m-sm-0 {\n      margin: 0 !important;\n    }\n    .mt-sm-0,\n    .my-sm-0 {\n      margin-top: 0 !important;\n    }\n    .mr-sm-0,\n    .mx-sm-0 {\n      margin-right: 0 !important;\n    }\n    .mb-sm-0,\n    .my-sm-0 {\n      margin-bottom: 0 !important;\n    }\n    .ml-sm-0,\n    .mx-sm-0 {\n      margin-left: 0 !important;\n    }\n    .m-sm-1 {\n      margin: 0.25rem !important;\n    }\n    .mt-sm-1,\n    .my-sm-1 {\n      margin-top: 0.25rem !important;\n    }\n    .mr-sm-1,\n    .mx-sm-1 {\n      margin-right: 0.25rem !important;\n    }\n    .mb-sm-1,\n    .my-sm-1 {\n      margin-bottom: 0.25rem !important;\n    }\n    .ml-sm-1,\n    .mx-sm-1 {\n      margin-left: 0.25rem !important;\n    }\n    .m-sm-2 {\n      margin: 0.5rem !important;\n    }\n    .mt-sm-2,\n    .my-sm-2 {\n      margin-top: 0.5rem !important;\n    }\n    .mr-sm-2,\n    .mx-sm-2 {\n      margin-right: 0.5rem !important;\n    }\n    .mb-sm-2,\n    .my-sm-2 {\n      margin-bottom: 0.5rem !important;\n    }\n    .ml-sm-2,\n    .mx-sm-2 {\n      margin-left: 0.5rem !important;\n    }\n    .m-sm-3 {\n      margin: 1rem !important;\n    }\n    .mt-sm-3,\n    .my-sm-3 {\n      margin-top: 1rem !important;\n    }\n    .mr-sm-3,\n    .mx-sm-3 {\n      margin-right: 1rem !important;\n    }\n    .mb-sm-3,\n    .my-sm-3 {\n      margin-bottom: 1rem !important;\n    }\n    .ml-sm-3,\n    .mx-sm-3 {\n      margin-left: 1rem !important;\n    }\n    .m-sm-4 {\n      margin: 1.5rem !important;\n    }\n    .mt-sm-4,\n    .my-sm-4 {\n      margin-top: 1.5rem !important;\n    }\n    .mr-sm-4,\n    .mx-sm-4 {\n      margin-right: 1.5rem !important;\n    }\n    .mb-sm-4,\n    .my-sm-4 {\n      margin-bottom: 1.5rem !important;\n    }\n    .ml-sm-4,\n    .mx-sm-4 {\n      margin-left: 1.5rem !important;\n    }\n    .m-sm-5 {\n      margin: 3rem !important;\n    }\n    .mt-sm-5,\n    .my-sm-5 {\n      margin-top: 3rem !important;\n    }\n    .mr-sm-5,\n    .mx-sm-5 {\n      margin-right: 3rem !important;\n    }\n    .mb-sm-5,\n    .my-sm-5 {\n      margin-bottom: 3rem !important;\n    }\n    .ml-sm-5,\n    .mx-sm-5 {\n      margin-left: 3rem !important;\n    }\n    .p-sm-0 {\n      padding: 0 !important;\n    }\n    .pt-sm-0,\n    .py-sm-0 {\n      padding-top: 0 !important;\n    }\n    .pr-sm-0,\n    .px-sm-0 {\n      padding-right: 0 !important;\n    }\n    .pb-sm-0,\n    .py-sm-0 {\n      padding-bottom: 0 !important;\n    }\n    .pl-sm-0,\n    .px-sm-0 {\n      padding-left: 0 !important;\n    }\n    .p-sm-1 {\n      padding: 0.25rem !important;\n    }\n    .pt-sm-1,\n    .py-sm-1 {\n      padding-top: 0.25rem !important;\n    }\n    .pr-sm-1,\n    .px-sm-1 {\n      padding-right: 0.25rem !important;\n    }\n    .pb-sm-1,\n    .py-sm-1 {\n      padding-bottom: 0.25rem !important;\n    }\n    .pl-sm-1,\n    .px-sm-1 {\n      padding-left: 0.25rem !important;\n    }\n    .p-sm-2 {\n      padding: 0.5rem !important;\n    }\n    .pt-sm-2,\n    .py-sm-2 {\n      padding-top: 0.5rem !important;\n    }\n    .pr-sm-2,\n    .px-sm-2 {\n      padding-right: 0.5rem !important;\n    }\n    .pb-sm-2,\n    .py-sm-2 {\n      padding-bottom: 0.5rem !important;\n    }\n    .pl-sm-2,\n    .px-sm-2 {\n      padding-left: 0.5rem !important;\n    }\n    .p-sm-3 {\n      padding: 1rem !important;\n    }\n    .pt-sm-3,\n    .py-sm-3 {\n      padding-top: 1rem !important;\n    }\n    .pr-sm-3,\n    .px-sm-3 {\n      padding-right: 1rem !important;\n    }\n    .pb-sm-3,\n    .py-sm-3 {\n      padding-bottom: 1rem !important;\n    }\n    .pl-sm-3,\n    .px-sm-3 {\n      padding-left: 1rem !important;\n    }\n    .p-sm-4 {\n      padding: 1.5rem !important;\n    }\n    .pt-sm-4,\n    .py-sm-4 {\n      padding-top: 1.5rem !important;\n    }\n    .pr-sm-4,\n    .px-sm-4 {\n      padding-right: 1.5rem !important;\n    }\n    .pb-sm-4,\n    .py-sm-4 {\n      padding-bottom: 1.5rem !important;\n    }\n    .pl-sm-4,\n    .px-sm-4 {\n      padding-left: 1.5rem !important;\n    }\n    .p-sm-5 {\n      padding: 3rem !important;\n    }\n    .pt-sm-5,\n    .py-sm-5 {\n      padding-top: 3rem !important;\n    }\n    .pr-sm-5,\n    .px-sm-5 {\n      padding-right: 3rem !important;\n    }\n    .pb-sm-5,\n    .py-sm-5 {\n      padding-bottom: 3rem !important;\n    }\n    .pl-sm-5,\n    .px-sm-5 {\n      padding-left: 3rem !important;\n    }\n    .m-sm-n1 {\n      margin: -0.25rem !important;\n    }\n    .mt-sm-n1,\n    .my-sm-n1 {\n      margin-top: -0.25rem !important;\n    }\n    .mr-sm-n1,\n    .mx-sm-n1 {\n      margin-right: -0.25rem !important;\n    }\n    .mb-sm-n1,\n    .my-sm-n1 {\n      margin-bottom: -0.25rem !important;\n    }\n    .ml-sm-n1,\n    .mx-sm-n1 {\n      margin-left: -0.25rem !important;\n    }\n    .m-sm-n2 {\n      margin: -0.5rem !important;\n    }\n    .mt-sm-n2,\n    .my-sm-n2 {\n      margin-top: -0.5rem !important;\n    }\n    .mr-sm-n2,\n    .mx-sm-n2 {\n      margin-right: -0.5rem !important;\n    }\n    .mb-sm-n2,\n    .my-sm-n2 {\n      margin-bottom: -0.5rem !important;\n    }\n    .ml-sm-n2,\n    .mx-sm-n2 {\n      margin-left: -0.5rem !important;\n    }\n    .m-sm-n3 {\n      margin: -1rem !important;\n    }\n    .mt-sm-n3,\n    .my-sm-n3 {\n      margin-top: -1rem !important;\n    }\n    .mr-sm-n3,\n    .mx-sm-n3 {\n      margin-right: -1rem !important;\n    }\n    .mb-sm-n3,\n    .my-sm-n3 {\n      margin-bottom: -1rem !important;\n    }\n    .ml-sm-n3,\n    .mx-sm-n3 {\n      margin-left: -1rem !important;\n    }\n    .m-sm-n4 {\n      margin: -1.5rem !important;\n    }\n    .mt-sm-n4,\n    .my-sm-n4 {\n      margin-top: -1.5rem !important;\n    }\n    .mr-sm-n4,\n    .mx-sm-n4 {\n      margin-right: -1.5rem !important;\n    }\n    .mb-sm-n4,\n    .my-sm-n4 {\n      margin-bottom: -1.5rem !important;\n    }\n    .ml-sm-n4,\n    .mx-sm-n4 {\n      margin-left: -1.5rem !important;\n    }\n    .m-sm-n5 {\n      margin: -3rem !important;\n    }\n    .mt-sm-n5,\n    .my-sm-n5 {\n      margin-top: -3rem !important;\n    }\n    .mr-sm-n5,\n    .mx-sm-n5 {\n      margin-right: -3rem !important;\n    }\n    .mb-sm-n5,\n    .my-sm-n5 {\n      margin-bottom: -3rem !important;\n    }\n    .ml-sm-n5,\n    .mx-sm-n5 {\n      margin-left: -3rem !important;\n    }\n    .m-sm-auto {\n      margin: auto !important;\n    }\n    .mt-sm-auto,\n    .my-sm-auto {\n      margin-top: auto !important;\n    }\n    .mr-sm-auto,\n    .mx-sm-auto {\n      margin-right: auto !important;\n    }\n    .mb-sm-auto,\n    .my-sm-auto {\n      margin-bottom: auto !important;\n    }\n    .ml-sm-auto,\n    .mx-sm-auto {\n      margin-left: auto !important;\n    }\n  }\n  @media (min-width: 768px) {\n    .m-md-0 {\n      margin: 0 !important;\n    }\n    .mt-md-0,\n    .my-md-0 {\n      margin-top: 0 !important;\n    }\n    .mr-md-0,\n    .mx-md-0 {\n      margin-right: 0 !important;\n    }\n    .mb-md-0,\n    .my-md-0 {\n      margin-bottom: 0 !important;\n    }\n    .ml-md-0,\n    .mx-md-0 {\n      margin-left: 0 !important;\n    }\n    .m-md-1 {\n      margin: 0.25rem !important;\n    }\n    .mt-md-1,\n    .my-md-1 {\n      margin-top: 0.25rem !important;\n    }\n    .mr-md-1,\n    .mx-md-1 {\n      margin-right: 0.25rem !important;\n    }\n    .mb-md-1,\n    .my-md-1 {\n      margin-bottom: 0.25rem !important;\n    }\n    .ml-md-1,\n    .mx-md-1 {\n      margin-left: 0.25rem !important;\n    }\n    .m-md-2 {\n      margin: 0.5rem !important;\n    }\n    .mt-md-2,\n    .my-md-2 {\n      margin-top: 0.5rem !important;\n    }\n    .mr-md-2,\n    .mx-md-2 {\n      margin-right: 0.5rem !important;\n    }\n    .mb-md-2,\n    .my-md-2 {\n      margin-bottom: 0.5rem !important;\n    }\n    .ml-md-2,\n    .mx-md-2 {\n      margin-left: 0.5rem !important;\n    }\n    .m-md-3 {\n      margin: 1rem !important;\n    }\n    .mt-md-3,\n    .my-md-3 {\n      margin-top: 1rem !important;\n    }\n    .mr-md-3,\n    .mx-md-3 {\n      margin-right: 1rem !important;\n    }\n    .mb-md-3,\n    .my-md-3 {\n      margin-bottom: 1rem !important;\n    }\n    .ml-md-3,\n    .mx-md-3 {\n      margin-left: 1rem !important;\n    }\n    .m-md-4 {\n      margin: 1.5rem !important;\n    }\n    .mt-md-4,\n    .my-md-4 {\n      margin-top: 1.5rem !important;\n    }\n    .mr-md-4,\n    .mx-md-4 {\n      margin-right: 1.5rem !important;\n    }\n    .mb-md-4,\n    .my-md-4 {\n      margin-bottom: 1.5rem !important;\n    }\n    .ml-md-4,\n    .mx-md-4 {\n      margin-left: 1.5rem !important;\n    }\n    .m-md-5 {\n      margin: 3rem !important;\n    }\n    .mt-md-5,\n    .my-md-5 {\n      margin-top: 3rem !important;\n    }\n    .mr-md-5,\n    .mx-md-5 {\n      margin-right: 3rem !important;\n    }\n    .mb-md-5,\n    .my-md-5 {\n      margin-bottom: 3rem !important;\n    }\n    .ml-md-5,\n    .mx-md-5 {\n      margin-left: 3rem !important;\n    }\n    .p-md-0 {\n      padding: 0 !important;\n    }\n    .pt-md-0,\n    .py-md-0 {\n      padding-top: 0 !important;\n    }\n    .pr-md-0,\n    .px-md-0 {\n      padding-right: 0 !important;\n    }\n    .pb-md-0,\n    .py-md-0 {\n      padding-bottom: 0 !important;\n    }\n    .pl-md-0,\n    .px-md-0 {\n      padding-left: 0 !important;\n    }\n    .p-md-1 {\n      padding: 0.25rem !important;\n    }\n    .pt-md-1,\n    .py-md-1 {\n      padding-top: 0.25rem !important;\n    }\n    .pr-md-1,\n    .px-md-1 {\n      padding-right: 0.25rem !important;\n    }\n    .pb-md-1,\n    .py-md-1 {\n      padding-bottom: 0.25rem !important;\n    }\n    .pl-md-1,\n    .px-md-1 {\n      padding-left: 0.25rem !important;\n    }\n    .p-md-2 {\n      padding: 0.5rem !important;\n    }\n    .pt-md-2,\n    .py-md-2 {\n      padding-top: 0.5rem !important;\n    }\n    .pr-md-2,\n    .px-md-2 {\n      padding-right: 0.5rem !important;\n    }\n    .pb-md-2,\n    .py-md-2 {\n      padding-bottom: 0.5rem !important;\n    }\n    .pl-md-2,\n    .px-md-2 {\n      padding-left: 0.5rem !important;\n    }\n    .p-md-3 {\n      padding: 1rem !important;\n    }\n    .pt-md-3,\n    .py-md-3 {\n      padding-top: 1rem !important;\n    }\n    .pr-md-3,\n    .px-md-3 {\n      padding-right: 1rem !important;\n    }\n    .pb-md-3,\n    .py-md-3 {\n      padding-bottom: 1rem !important;\n    }\n    .pl-md-3,\n    .px-md-3 {\n      padding-left: 1rem !important;\n    }\n    .p-md-4 {\n      padding: 1.5rem !important;\n    }\n    .pt-md-4,\n    .py-md-4 {\n      padding-top: 1.5rem !important;\n    }\n    .pr-md-4,\n    .px-md-4 {\n      padding-right: 1.5rem !important;\n    }\n    .pb-md-4,\n    .py-md-4 {\n      padding-bottom: 1.5rem !important;\n    }\n    .pl-md-4,\n    .px-md-4 {\n      padding-left: 1.5rem !important;\n    }\n    .p-md-5 {\n      padding: 3rem !important;\n    }\n    .pt-md-5,\n    .py-md-5 {\n      padding-top: 3rem !important;\n    }\n    .pr-md-5,\n    .px-md-5 {\n      padding-right: 3rem !important;\n    }\n    .pb-md-5,\n    .py-md-5 {\n      padding-bottom: 3rem !important;\n    }\n    .pl-md-5,\n    .px-md-5 {\n      padding-left: 3rem !important;\n    }\n    .m-md-n1 {\n      margin: -0.25rem !important;\n    }\n    .mt-md-n1,\n    .my-md-n1 {\n      margin-top: -0.25rem !important;\n    }\n    .mr-md-n1,\n    .mx-md-n1 {\n      margin-right: -0.25rem !important;\n    }\n    .mb-md-n1,\n    .my-md-n1 {\n      margin-bottom: -0.25rem !important;\n    }\n    .ml-md-n1,\n    .mx-md-n1 {\n      margin-left: -0.25rem !important;\n    }\n    .m-md-n2 {\n      margin: -0.5rem !important;\n    }\n    .mt-md-n2,\n    .my-md-n2 {\n      margin-top: -0.5rem !important;\n    }\n    .mr-md-n2,\n    .mx-md-n2 {\n      margin-right: -0.5rem !important;\n    }\n    .mb-md-n2,\n    .my-md-n2 {\n      margin-bottom: -0.5rem !important;\n    }\n    .ml-md-n2,\n    .mx-md-n2 {\n      margin-left: -0.5rem !important;\n    }\n    .m-md-n3 {\n      margin: -1rem !important;\n    }\n    .mt-md-n3,\n    .my-md-n3 {\n      margin-top: -1rem !important;\n    }\n    .mr-md-n3,\n    .mx-md-n3 {\n      margin-right: -1rem !important;\n    }\n    .mb-md-n3,\n    .my-md-n3 {\n      margin-bottom: -1rem !important;\n    }\n    .ml-md-n3,\n    .mx-md-n3 {\n      margin-left: -1rem !important;\n    }\n    .m-md-n4 {\n      margin: -1.5rem !important;\n    }\n    .mt-md-n4,\n    .my-md-n4 {\n      margin-top: -1.5rem !important;\n    }\n    .mr-md-n4,\n    .mx-md-n4 {\n      margin-right: -1.5rem !important;\n    }\n    .mb-md-n4,\n    .my-md-n4 {\n      margin-bottom: -1.5rem !important;\n    }\n    .ml-md-n4,\n    .mx-md-n4 {\n      margin-left: -1.5rem !important;\n    }\n    .m-md-n5 {\n      margin: -3rem !important;\n    }\n    .mt-md-n5,\n    .my-md-n5 {\n      margin-top: -3rem !important;\n    }\n    .mr-md-n5,\n    .mx-md-n5 {\n      margin-right: -3rem !important;\n    }\n    .mb-md-n5,\n    .my-md-n5 {\n      margin-bottom: -3rem !important;\n    }\n    .ml-md-n5,\n    .mx-md-n5 {\n      margin-left: -3rem !important;\n    }\n    .m-md-auto {\n      margin: auto !important;\n    }\n    .mt-md-auto,\n    .my-md-auto {\n      margin-top: auto !important;\n    }\n    .mr-md-auto,\n    .mx-md-auto {\n      margin-right: auto !important;\n    }\n    .mb-md-auto,\n    .my-md-auto {\n      margin-bottom: auto !important;\n    }\n    .ml-md-auto,\n    .mx-md-auto {\n      margin-left: auto !important;\n    }\n  }\n  @media (min-width: 992px) {\n    .m-lg-0 {\n      margin: 0 !important;\n    }\n    .mt-lg-0,\n    .my-lg-0 {\n      margin-top: 0 !important;\n    }\n    .mr-lg-0,\n    .mx-lg-0 {\n      margin-right: 0 !important;\n    }\n    .mb-lg-0,\n    .my-lg-0 {\n      margin-bottom: 0 !important;\n    }\n    .ml-lg-0,\n    .mx-lg-0 {\n      margin-left: 0 !important;\n    }\n    .m-lg-1 {\n      margin: 0.25rem !important;\n    }\n    .mt-lg-1,\n    .my-lg-1 {\n      margin-top: 0.25rem !important;\n    }\n    .mr-lg-1,\n    .mx-lg-1 {\n      margin-right: 0.25rem !important;\n    }\n    .mb-lg-1,\n    .my-lg-1 {\n      margin-bottom: 0.25rem !important;\n    }\n    .ml-lg-1,\n    .mx-lg-1 {\n      margin-left: 0.25rem !important;\n    }\n    .m-lg-2 {\n      margin: 0.5rem !important;\n    }\n    .mt-lg-2,\n    .my-lg-2 {\n      margin-top: 0.5rem !important;\n    }\n    .mr-lg-2,\n    .mx-lg-2 {\n      margin-right: 0.5rem !important;\n    }\n    .mb-lg-2,\n    .my-lg-2 {\n      margin-bottom: 0.5rem !important;\n    }\n    .ml-lg-2,\n    .mx-lg-2 {\n      margin-left: 0.5rem !important;\n    }\n    .m-lg-3 {\n      margin: 1rem !important;\n    }\n    .mt-lg-3,\n    .my-lg-3 {\n      margin-top: 1rem !important;\n    }\n    .mr-lg-3,\n    .mx-lg-3 {\n      margin-right: 1rem !important;\n    }\n    .mb-lg-3,\n    .my-lg-3 {\n      margin-bottom: 1rem !important;\n    }\n    .ml-lg-3,\n    .mx-lg-3 {\n      margin-left: 1rem !important;\n    }\n    .m-lg-4 {\n      margin: 1.5rem !important;\n    }\n    .mt-lg-4,\n    .my-lg-4 {\n      margin-top: 1.5rem !important;\n    }\n    .mr-lg-4,\n    .mx-lg-4 {\n      margin-right: 1.5rem !important;\n    }\n    .mb-lg-4,\n    .my-lg-4 {\n      margin-bottom: 1.5rem !important;\n    }\n    .ml-lg-4,\n    .mx-lg-4 {\n      margin-left: 1.5rem !important;\n    }\n    .m-lg-5 {\n      margin: 3rem !important;\n    }\n    .mt-lg-5,\n    .my-lg-5 {\n      margin-top: 3rem !important;\n    }\n    .mr-lg-5,\n    .mx-lg-5 {\n      margin-right: 3rem !important;\n    }\n    .mb-lg-5,\n    .my-lg-5 {\n      margin-bottom: 3rem !important;\n    }\n    .ml-lg-5,\n    .mx-lg-5 {\n      margin-left: 3rem !important;\n    }\n    .p-lg-0 {\n      padding: 0 !important;\n    }\n    .pt-lg-0,\n    .py-lg-0 {\n      padding-top: 0 !important;\n    }\n    .pr-lg-0,\n    .px-lg-0 {\n      padding-right: 0 !important;\n    }\n    .pb-lg-0,\n    .py-lg-0 {\n      padding-bottom: 0 !important;\n    }\n    .pl-lg-0,\n    .px-lg-0 {\n      padding-left: 0 !important;\n    }\n    .p-lg-1 {\n      padding: 0.25rem !important;\n    }\n    .pt-lg-1,\n    .py-lg-1 {\n      padding-top: 0.25rem !important;\n    }\n    .pr-lg-1,\n    .px-lg-1 {\n      padding-right: 0.25rem !important;\n    }\n    .pb-lg-1,\n    .py-lg-1 {\n      padding-bottom: 0.25rem !important;\n    }\n    .pl-lg-1,\n    .px-lg-1 {\n      padding-left: 0.25rem !important;\n    }\n    .p-lg-2 {\n      padding: 0.5rem !important;\n    }\n    .pt-lg-2,\n    .py-lg-2 {\n      padding-top: 0.5rem !important;\n    }\n    .pr-lg-2,\n    .px-lg-2 {\n      padding-right: 0.5rem !important;\n    }\n    .pb-lg-2,\n    .py-lg-2 {\n      padding-bottom: 0.5rem !important;\n    }\n    .pl-lg-2,\n    .px-lg-2 {\n      padding-left: 0.5rem !important;\n    }\n    .p-lg-3 {\n      padding: 1rem !important;\n    }\n    .pt-lg-3,\n    .py-lg-3 {\n      padding-top: 1rem !important;\n    }\n    .pr-lg-3,\n    .px-lg-3 {\n      padding-right: 1rem !important;\n    }\n    .pb-lg-3,\n    .py-lg-3 {\n      padding-bottom: 1rem !important;\n    }\n    .pl-lg-3,\n    .px-lg-3 {\n      padding-left: 1rem !important;\n    }\n    .p-lg-4 {\n      padding: 1.5rem !important;\n    }\n    .pt-lg-4,\n    .py-lg-4 {\n      padding-top: 1.5rem !important;\n    }\n    .pr-lg-4,\n    .px-lg-4 {\n      padding-right: 1.5rem !important;\n    }\n    .pb-lg-4,\n    .py-lg-4 {\n      padding-bottom: 1.5rem !important;\n    }\n    .pl-lg-4,\n    .px-lg-4 {\n      padding-left: 1.5rem !important;\n    }\n    .p-lg-5 {\n      padding: 3rem !important;\n    }\n    .pt-lg-5,\n    .py-lg-5 {\n      padding-top: 3rem !important;\n    }\n    .pr-lg-5,\n    .px-lg-5 {\n      padding-right: 3rem !important;\n    }\n    .pb-lg-5,\n    .py-lg-5 {\n      padding-bottom: 3rem !important;\n    }\n    .pl-lg-5,\n    .px-lg-5 {\n      padding-left: 3rem !important;\n    }\n    .m-lg-n1 {\n      margin: -0.25rem !important;\n    }\n    .mt-lg-n1,\n    .my-lg-n1 {\n      margin-top: -0.25rem !important;\n    }\n    .mr-lg-n1,\n    .mx-lg-n1 {\n      margin-right: -0.25rem !important;\n    }\n    .mb-lg-n1,\n    .my-lg-n1 {\n      margin-bottom: -0.25rem !important;\n    }\n    .ml-lg-n1,\n    .mx-lg-n1 {\n      margin-left: -0.25rem !important;\n    }\n    .m-lg-n2 {\n      margin: -0.5rem !important;\n    }\n    .mt-lg-n2,\n    .my-lg-n2 {\n      margin-top: -0.5rem !important;\n    }\n    .mr-lg-n2,\n    .mx-lg-n2 {\n      margin-right: -0.5rem !important;\n    }\n    .mb-lg-n2,\n    .my-lg-n2 {\n      margin-bottom: -0.5rem !important;\n    }\n    .ml-lg-n2,\n    .mx-lg-n2 {\n      margin-left: -0.5rem !important;\n    }\n    .m-lg-n3 {\n      margin: -1rem !important;\n    }\n    .mt-lg-n3,\n    .my-lg-n3 {\n      margin-top: -1rem !important;\n    }\n    .mr-lg-n3,\n    .mx-lg-n3 {\n      margin-right: -1rem !important;\n    }\n    .mb-lg-n3,\n    .my-lg-n3 {\n      margin-bottom: -1rem !important;\n    }\n    .ml-lg-n3,\n    .mx-lg-n3 {\n      margin-left: -1rem !important;\n    }\n    .m-lg-n4 {\n      margin: -1.5rem !important;\n    }\n    .mt-lg-n4,\n    .my-lg-n4 {\n      margin-top: -1.5rem !important;\n    }\n    .mr-lg-n4,\n    .mx-lg-n4 {\n      margin-right: -1.5rem !important;\n    }\n    .mb-lg-n4,\n    .my-lg-n4 {\n      margin-bottom: -1.5rem !important;\n    }\n    .ml-lg-n4,\n    .mx-lg-n4 {\n      margin-left: -1.5rem !important;\n    }\n    .m-lg-n5 {\n      margin: -3rem !important;\n    }\n    .mt-lg-n5,\n    .my-lg-n5 {\n      margin-top: -3rem !important;\n    }\n    .mr-lg-n5,\n    .mx-lg-n5 {\n      margin-right: -3rem !important;\n    }\n    .mb-lg-n5,\n    .my-lg-n5 {\n      margin-bottom: -3rem !important;\n    }\n    .ml-lg-n5,\n    .mx-lg-n5 {\n      margin-left: -3rem !important;\n    }\n    .m-lg-auto {\n      margin: auto !important;\n    }\n    .mt-lg-auto,\n    .my-lg-auto {\n      margin-top: auto !important;\n    }\n    .mr-lg-auto,\n    .mx-lg-auto {\n      margin-right: auto !important;\n    }\n    .mb-lg-auto,\n    .my-lg-auto {\n      margin-bottom: auto !important;\n    }\n    .ml-lg-auto,\n    .mx-lg-auto {\n      margin-left: auto !important;\n    }\n  }\n  @media (min-width: 1200px) {\n    .m-xl-0 {\n      margin: 0 !important;\n    }\n    .mt-xl-0,\n    .my-xl-0 {\n      margin-top: 0 !important;\n    }\n    .mr-xl-0,\n    .mx-xl-0 {\n      margin-right: 0 !important;\n    }\n    .mb-xl-0,\n    .my-xl-0 {\n      margin-bottom: 0 !important;\n    }\n    .ml-xl-0,\n    .mx-xl-0 {\n      margin-left: 0 !important;\n    }\n    .m-xl-1 {\n      margin: 0.25rem !important;\n    }\n    .mt-xl-1,\n    .my-xl-1 {\n      margin-top: 0.25rem !important;\n    }\n    .mr-xl-1,\n    .mx-xl-1 {\n      margin-right: 0.25rem !important;\n    }\n    .mb-xl-1,\n    .my-xl-1 {\n      margin-bottom: 0.25rem !important;\n    }\n    .ml-xl-1,\n    .mx-xl-1 {\n      margin-left: 0.25rem !important;\n    }\n    .m-xl-2 {\n      margin: 0.5rem !important;\n    }\n    .mt-xl-2,\n    .my-xl-2 {\n      margin-top: 0.5rem !important;\n    }\n    .mr-xl-2,\n    .mx-xl-2 {\n      margin-right: 0.5rem !important;\n    }\n    .mb-xl-2,\n    .my-xl-2 {\n      margin-bottom: 0.5rem !important;\n    }\n    .ml-xl-2,\n    .mx-xl-2 {\n      margin-left: 0.5rem !important;\n    }\n    .m-xl-3 {\n      margin: 1rem !important;\n    }\n    .mt-xl-3,\n    .my-xl-3 {\n      margin-top: 1rem !important;\n    }\n    .mr-xl-3,\n    .mx-xl-3 {\n      margin-right: 1rem !important;\n    }\n    .mb-xl-3,\n    .my-xl-3 {\n      margin-bottom: 1rem !important;\n    }\n    .ml-xl-3,\n    .mx-xl-3 {\n      margin-left: 1rem !important;\n    }\n    .m-xl-4 {\n      margin: 1.5rem !important;\n    }\n    .mt-xl-4,\n    .my-xl-4 {\n      margin-top: 1.5rem !important;\n    }\n    .mr-xl-4,\n    .mx-xl-4 {\n      margin-right: 1.5rem !important;\n    }\n    .mb-xl-4,\n    .my-xl-4 {\n      margin-bottom: 1.5rem !important;\n    }\n    .ml-xl-4,\n    .mx-xl-4 {\n      margin-left: 1.5rem !important;\n    }\n    .m-xl-5 {\n      margin: 3rem !important;\n    }\n    .mt-xl-5,\n    .my-xl-5 {\n      margin-top: 3rem !important;\n    }\n    .mr-xl-5,\n    .mx-xl-5 {\n      margin-right: 3rem !important;\n    }\n    .mb-xl-5,\n    .my-xl-5 {\n      margin-bottom: 3rem !important;\n    }\n    .ml-xl-5,\n    .mx-xl-5 {\n      margin-left: 3rem !important;\n    }\n    .p-xl-0 {\n      padding: 0 !important;\n    }\n    .pt-xl-0,\n    .py-xl-0 {\n      padding-top: 0 !important;\n    }\n    .pr-xl-0,\n    .px-xl-0 {\n      padding-right: 0 !important;\n    }\n    .pb-xl-0,\n    .py-xl-0 {\n      padding-bottom: 0 !important;\n    }\n    .pl-xl-0,\n    .px-xl-0 {\n      padding-left: 0 !important;\n    }\n    .p-xl-1 {\n      padding: 0.25rem !important;\n    }\n    .pt-xl-1,\n    .py-xl-1 {\n      padding-top: 0.25rem !important;\n    }\n    .pr-xl-1,\n    .px-xl-1 {\n      padding-right: 0.25rem !important;\n    }\n    .pb-xl-1,\n    .py-xl-1 {\n      padding-bottom: 0.25rem !important;\n    }\n    .pl-xl-1,\n    .px-xl-1 {\n      padding-left: 0.25rem !important;\n    }\n    .p-xl-2 {\n      padding: 0.5rem !important;\n    }\n    .pt-xl-2,\n    .py-xl-2 {\n      padding-top: 0.5rem !important;\n    }\n    .pr-xl-2,\n    .px-xl-2 {\n      padding-right: 0.5rem !important;\n    }\n    .pb-xl-2,\n    .py-xl-2 {\n      padding-bottom: 0.5rem !important;\n    }\n    .pl-xl-2,\n    .px-xl-2 {\n      padding-left: 0.5rem !important;\n    }\n    .p-xl-3 {\n      padding: 1rem !important;\n    }\n    .pt-xl-3,\n    .py-xl-3 {\n      padding-top: 1rem !important;\n    }\n    .pr-xl-3,\n    .px-xl-3 {\n      padding-right: 1rem !important;\n    }\n    .pb-xl-3,\n    .py-xl-3 {\n      padding-bottom: 1rem !important;\n    }\n    .pl-xl-3,\n    .px-xl-3 {\n      padding-left: 1rem !important;\n    }\n    .p-xl-4 {\n      padding: 1.5rem !important;\n    }\n    .pt-xl-4,\n    .py-xl-4 {\n      padding-top: 1.5rem !important;\n    }\n    .pr-xl-4,\n    .px-xl-4 {\n      padding-right: 1.5rem !important;\n    }\n    .pb-xl-4,\n    .py-xl-4 {\n      padding-bottom: 1.5rem !important;\n    }\n    .pl-xl-4,\n    .px-xl-4 {\n      padding-left: 1.5rem !important;\n    }\n    .p-xl-5 {\n      padding: 3rem !important;\n    }\n    .pt-xl-5,\n    .py-xl-5 {\n      padding-top: 3rem !important;\n    }\n    .pr-xl-5,\n    .px-xl-5 {\n      padding-right: 3rem !important;\n    }\n    .pb-xl-5,\n    .py-xl-5 {\n      padding-bottom: 3rem !important;\n    }\n    .pl-xl-5,\n    .px-xl-5 {\n      padding-left: 3rem !important;\n    }\n    .m-xl-n1 {\n      margin: -0.25rem !important;\n    }\n    .mt-xl-n1,\n    .my-xl-n1 {\n      margin-top: -0.25rem !important;\n    }\n    .mr-xl-n1,\n    .mx-xl-n1 {\n      margin-right: -0.25rem !important;\n    }\n    .mb-xl-n1,\n    .my-xl-n1 {\n      margin-bottom: -0.25rem !important;\n    }\n    .ml-xl-n1,\n    .mx-xl-n1 {\n      margin-left: -0.25rem !important;\n    }\n    .m-xl-n2 {\n      margin: -0.5rem !important;\n    }\n    .mt-xl-n2,\n    .my-xl-n2 {\n      margin-top: -0.5rem !important;\n    }\n    .mr-xl-n2,\n    .mx-xl-n2 {\n      margin-right: -0.5rem !important;\n    }\n    .mb-xl-n2,\n    .my-xl-n2 {\n      margin-bottom: -0.5rem !important;\n    }\n    .ml-xl-n2,\n    .mx-xl-n2 {\n      margin-left: -0.5rem !important;\n    }\n    .m-xl-n3 {\n      margin: -1rem !important;\n    }\n    .mt-xl-n3,\n    .my-xl-n3 {\n      margin-top: -1rem !important;\n    }\n    .mr-xl-n3,\n    .mx-xl-n3 {\n      margin-right: -1rem !important;\n    }\n    .mb-xl-n3,\n    .my-xl-n3 {\n      margin-bottom: -1rem !important;\n    }\n    .ml-xl-n3,\n    .mx-xl-n3 {\n      margin-left: -1rem !important;\n    }\n    .m-xl-n4 {\n      margin: -1.5rem !important;\n    }\n    .mt-xl-n4,\n    .my-xl-n4 {\n      margin-top: -1.5rem !important;\n    }\n    .mr-xl-n4,\n    .mx-xl-n4 {\n      margin-right: -1.5rem !important;\n    }\n    .mb-xl-n4,\n    .my-xl-n4 {\n      margin-bottom: -1.5rem !important;\n    }\n    .ml-xl-n4,\n    .mx-xl-n4 {\n      margin-left: -1.5rem !important;\n    }\n    .m-xl-n5 {\n      margin: -3rem !important;\n    }\n    .mt-xl-n5,\n    .my-xl-n5 {\n      margin-top: -3rem !important;\n    }\n    .mr-xl-n5,\n    .mx-xl-n5 {\n      margin-right: -3rem !important;\n    }\n    .mb-xl-n5,\n    .my-xl-n5 {\n      margin-bottom: -3rem !important;\n    }\n    .ml-xl-n5,\n    .mx-xl-n5 {\n      margin-left: -3rem !important;\n    }\n    .m-xl-auto {\n      margin: auto !important;\n    }\n    .mt-xl-auto,\n    .my-xl-auto {\n      margin-top: auto !important;\n    }\n    .mr-xl-auto,\n    .mx-xl-auto {\n      margin-right: auto !important;\n    }\n    .mb-xl-auto,\n    .my-xl-auto {\n      margin-bottom: auto !important;\n    }\n    .ml-xl-auto,\n    .mx-xl-auto {\n      margin-left: auto !important;\n    }\n  }\n  .stretched-link::after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1;\n    pointer-events: auto;\n    content: '';\n    background-color: rgba(0, 0, 0, 0);\n  }\n  .text-monospace {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace !important;\n  }\n  .text-justify {\n    text-align: justify !important;\n  }\n  .text-wrap {\n    white-space: normal !important;\n  }\n  .text-nowrap {\n    white-space: nowrap !important;\n  }\n  .text-truncate {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n  .text-left {\n    text-align: left !important;\n  }\n  .text-right {\n    text-align: right !important;\n  }\n  .text-center {\n    text-align: center !important;\n  }\n  @media (min-width: 576px) {\n    .text-sm-left {\n      text-align: left !important;\n    }\n    .text-sm-right {\n      text-align: right !important;\n    }\n    .text-sm-center {\n      text-align: center !important;\n    }\n  }\n  @media (min-width: 768px) {\n    .text-md-left {\n      text-align: left !important;\n    }\n    .text-md-right {\n      text-align: right !important;\n    }\n    .text-md-center {\n      text-align: center !important;\n    }\n  }\n  @media (min-width: 992px) {\n    .text-lg-left {\n      text-align: left !important;\n    }\n    .text-lg-right {\n      text-align: right !important;\n    }\n    .text-lg-center {\n      text-align: center !important;\n    }\n  }\n  @media (min-width: 1200px) {\n    .text-xl-left {\n      text-align: left !important;\n    }\n    .text-xl-right {\n      text-align: right !important;\n    }\n    .text-xl-center {\n      text-align: center !important;\n    }\n  }\n  .text-lowercase {\n    text-transform: lowercase !important;\n  }\n  .text-uppercase {\n    text-transform: uppercase !important;\n  }\n  .text-capitalize {\n    text-transform: capitalize !important;\n  }\n  .font-weight-light {\n    font-weight: 300 !important;\n  }\n  .font-weight-lighter {\n    font-weight: lighter !important;\n  }\n  .font-weight-normal {\n    font-weight: 400 !important;\n  }\n  .font-weight-bold {\n    font-weight: 700 !important;\n  }\n  .font-weight-bolder {\n    font-weight: bolder !important;\n  }\n  .font-italic {\n    font-style: italic !important;\n  }\n  .text-white {\n    color: #fff !important;\n  }\n  .text-primary {\n    color: #007bff !important;\n  }\n  a.text-primary:focus,\n  a.text-primary:hover {\n    color: #0056b3 !important;\n  }\n  .text-secondary {\n    color: #6c757d !important;\n  }\n  a.text-secondary:focus,\n  a.text-secondary:hover {\n    color: #494f54 !important;\n  }\n  .text-success {\n    color: #28a745 !important;\n  }\n  a.text-success:focus,\n  a.text-success:hover {\n    color: #19692c !important;\n  }\n  .text-info {\n    color: #17a2b8 !important;\n  }\n  a.text-info:focus,\n  a.text-info:hover {\n    color: #0f6674 !important;\n  }\n  .text-warning {\n    color: #ffc107 !important;\n  }\n  a.text-warning:focus,\n  a.text-warning:hover {\n    color: #ba8b00 !important;\n  }\n  .text-danger {\n    color: #dc3545 !important;\n  }\n  a.text-danger:focus,\n  a.text-danger:hover {\n    color: #a71d2a !important;\n  }\n  .text-light {\n    color: #f8f9fa !important;\n  }\n  a.text-light:focus,\n  a.text-light:hover {\n    color: #cbd3da !important;\n  }\n  .text-dark {\n    color: #343a40 !important;\n  }\n  a.text-dark:focus,\n  a.text-dark:hover {\n    color: #121416 !important;\n  }\n  .text-body {\n    color: #212529 !important;\n  }\n  .text-muted {\n    color: #6c757d !important;\n  }\n  .text-black-50 {\n    color: rgba(0, 0, 0, 0.5) !important;\n  }\n  .text-white-50 {\n    color: rgba(255, 255, 255, 0.5) !important;\n  }\n  .text-hide {\n    font: 0/0 a;\n    color: transparent;\n    text-shadow: none;\n    background-color: transparent;\n    border: 0;\n  }\n  .text-decoration-none {\n    text-decoration: none !important;\n  }\n  .text-break {\n    word-break: break-word !important;\n    word-wrap: break-word !important;\n  }\n  .text-reset {\n    color: inherit !important;\n  }\n  .visible {\n    visibility: visible !important;\n  }\n  .invisible {\n    visibility: hidden !important;\n  }\n  @media print {\n    *,\n    ::after,\n    ::before {\n      text-shadow: none !important;\n      box-shadow: none !important;\n    }\n    a:not(.btn) {\n      text-decoration: underline;\n    }\n    abbr[title]::after {\n      content: ' (' attr(title) ')';\n    }\n    pre {\n      white-space: pre-wrap !important;\n    }\n    blockquote,\n    pre {\n      border: 1px solid #adb5bd;\n      page-break-inside: avoid;\n    }\n    thead {\n      display: table-header-group;\n    }\n    img,\n    tr {\n      page-break-inside: avoid;\n    }\n    h2,\n    h3,\n    p {\n      orphans: 3;\n      widows: 3;\n    }\n    h2,\n    h3 {\n      page-break-after: avoid;\n    }\n    @page {\n      size: a3;\n    }\n    body {\n      min-width: 992px !important;\n    }\n    .container {\n      min-width: 992px !important;\n    }\n    .navbar {\n      display: none;\n    }\n    .badge {\n      border: 1px solid #000;\n    }\n    .table {\n      border-collapse: collapse !important;\n    }\n    .table td,\n    .table th {\n      background-color: #fff !important;\n    }\n    .table-bordered td,\n    .table-bordered th {\n      border: 1px solid #dee2e6 !important;\n    }\n    .table-dark {\n      color: inherit;\n    }\n    .table-dark tbody + tbody,\n    .table-dark td,\n    .table-dark th,\n    .table-dark thead th {\n      border-color: #dee2e6;\n    }\n    .table .thead-dark th {\n      color: inherit;\n      border-color: #dee2e6;\n    }\n  }\n  /*# sourceMappingURL=bootstrap.min.css.map */\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "bootstrapStyles",
          "declaration": {
            "name": "bootstrapStyles",
            "module": "src/bridge/BridgeBase/bootstrap-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/bridge/BridgeBase/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BridgeBase",
          "members": [
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'"
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage"
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing"
            },
            {
              "kind": "field",
              "name": "thePConn"
            },
            {
              "kind": "field",
              "name": "children"
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "additionalProps"
            },
            {
              "kind": "field",
              "name": "actions"
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn"
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect."
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase"
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function"
            },
            {
              "kind": "method",
              "name": "addFormField"
            },
            {
              "kind": "method",
              "name": "removeFormField"
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component."
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined."
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component"
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component"
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions."
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it."
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates"
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent"
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn"
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in."
            },
            {
              "kind": "method",
              "name": "logChildren"
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BridgeBase",
          "declaration": {
            "name": "BridgeBase",
            "module": "src/bridge/BridgeBase/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/helpers/formatters/common.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getLocale",
          "parameters": [
            {
              "name": "locale"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getCurrentTimezone",
          "parameters": [
            {
              "name": "timezone"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getLocale",
          "declaration": {
            "name": "getLocale",
            "module": "src/helpers/formatters/common.ts"
          }
        },
        {
          "kind": "js",
          "name": "getCurrentTimezone",
          "declaration": {
            "name": "getCurrentTimezone",
            "module": "src/helpers/formatters/common.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ActionButtons/action-buttons-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "actionButtonsStyles",
          "default": "html`\n  <style>\n    .nq_button_grid {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "actionButtonsStyles",
          "declaration": {
            "name": "actionButtonsStyles",
            "module": "src/components/ActionButtons/action-buttons-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ActionButtons/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ActionButtons",
          "members": [
            {
              "kind": "field",
              "name": "arMainButtons",
              "type": {
                "text": "any"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arSecondaryButtons",
              "type": {
                "text": "any"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "mainButtons",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "secondaryButtons",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "aButtonsHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "_buttonClick",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "action-buttons-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "action-buttons-component",
          "declaration": {
            "name": "ActionButtons",
            "module": "src/components/ActionButtons/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ActionButtons",
            "module": "src/components/ActionButtons/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/AppEntry/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AppEntry",
          "members": [
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "'AppEntry'"
            },
            {
              "kind": "field",
              "name": "thePConnComponentName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "props",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "attribute": "props"
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "Boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "startPortal",
              "description": "kick off the application's portal that we're trying to serve up"
            },
            {
              "kind": "method",
              "name": "initialRender",
              "parameters": [
                {
                  "name": "inRenderObj",
                  "description": "the initial, top-level PConnect object to render"
                }
              ],
              "description": "Callback from onPCoreReady that's called once the top-level render object\nis ready to be rendered"
            }
          ],
          "attributes": [
            {
              "name": "props",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "fieldName": "props"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "app-entry",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "app-entry",
          "declaration": {
            "name": "AppEntry",
            "module": "src/components/AppEntry/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AppEntry",
            "module": "src/components/AppEntry/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/Assignment/assignment-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "assignmentStyles",
          "default": "html`\n  <style>\n    .boilerplate-class {\n      font-size: 16px;\n\n      background-color: var(--app-neutral-light-color);\n      padding: 1rem;\n      margin: 0.5rem;\n      border-radius: 0.6125rem;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "assignmentStyles",
          "declaration": {
            "name": "assignmentStyles",
            "module": "src/components/Assignment/assignment-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/Assignment/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Assignment",
          "members": [
            {
              "kind": "field",
              "name": "itemKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "itemKey"
            },
            {
              "kind": "field",
              "name": "arChildren",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "bHasNavigation",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bIsVertical",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "notificationOpened",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "toastMessage",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "arCurrentStepIndicies",
              "type": {
                "text": "number[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arNavigationSteps",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arMainButtons",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arSecondaryButtons",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "bReInit",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bInit",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "actionsAPI",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "finishAssignment",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "navigateToStep",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "cancelAssignment",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "showPage",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "bCancelPressed",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "configProps",
              "type": {
                "text": "any"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "containerName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "workID",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "currentCaseID",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "templateName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "assignmentHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "notificationHtml"
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "NotificationLitRenderer"
              }
            },
            {
              "kind": "method",
              "name": "close",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "initComponent"
            },
            {
              "kind": "method",
              "name": "createButtons"
            },
            {
              "kind": "method",
              "name": "findCurrentIndicies",
              "return": {
                "type": {
                  "text": "number[]"
                }
              },
              "parameters": [
                {
                  "name": "arStepperSteps",
                  "type": {
                    "text": "any[]"
                  }
                },
                {
                  "name": "arIndicies",
                  "type": {
                    "text": "number[]"
                  }
                },
                {
                  "name": "depth",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onActionButtonClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "buttonClick",
              "parameters": [
                {
                  "name": "sAction",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "sButtonType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formValid",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "showToast",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "String"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "itemKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "itemKey"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "assignment-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "assignment-component",
          "declaration": {
            "name": "Assignment",
            "module": "src/components/Assignment/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Assignment",
            "module": "src/components/Assignment/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/AssignmentCard/assignment-card-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "assignmentCardStyles",
          "default": "html`\n  <style>\n    .boilerplate-class {\n      font-size: 16px;\n\n      background-color: var(--app-neutral-light-color);\n      padding: 1rem;\n      margin: 0.5rem;\n      border-radius: 0.6125rem;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "assignmentCardStyles",
          "declaration": {
            "name": "assignmentCardStyles",
            "module": "src/components/AssignmentCard/assignment-card-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/AssignmentCard/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AssignmentCard",
          "members": [
            {
              "kind": "field",
              "name": "arMainButtons",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arSecondaryButtons",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arChildren",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "assignmentKids",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getAssignmentCardHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onActionButtonClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "assignment-card-component",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "assignment-card-component",
          "declaration": {
            "name": "AssignmentCard",
            "module": "src/components/AssignmentCard/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AssignmentCard",
            "module": "src/components/AssignmentCard/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/Attachment/attachment-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "attachmentStyles",
          "default": "html`\n  <style>\n    /* Due to shadow DOM scoping: from this component through all children, apply a background-color */\n\n    lion-button {\n      background-color: transparent;\n      padding-left: 0px;\n      color: var(--app-primary-color);\n    }\n\n    lion-button:disabled,\n    lion-button[disabled] {\n      color: var(--app-neutral-light-color);\n    }\n\n    .psdk-modal-file-selector {\n      border: 1px dashed var(--app-neutral-color);\n      width: 100%;\n      padding: 0.3rem;\n      text-align: center;\n      position: relative;\n    }\n\n    .psdk-full-width {\n      width: 100%;\n    }\n\n    .psdk-label-readonly {\n      opacity: 54%;\n      font-size: 0.7rem;\n    }\n\n    .psdk-data-readonly {\n      padding-top: 0.625rem;\n      width: 100%;\n    }\n\n    .psdk-attachment-list {\n      border: 1px solid var(--app-neutral-color);\n    }\n\n    ::ng-deep .mat-form-field-infix {\n      width: auto;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "attachmentStyles",
          "declaration": {
            "name": "attachmentStyles",
            "module": "src/components/Attachment/attachment-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/Attachment/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Attachment",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "bLoading",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bShowSelector",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "bShowJustDelete",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "type": {
                "text": "Object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "arFiles",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arFileList",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "removeFileFromList",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "arMenuList",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "att_valueRef",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "att_categoryName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAttachmentHtml"
            },
            {
              "kind": "method",
              "name": "_downloadFileFromList",
              "parameters": [
                {
                  "name": "fileObj",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "fileDownload"
            },
            {
              "kind": "method",
              "name": "getCurrentAttachmentsList",
              "parameters": [
                {
                  "name": "context"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_removeFileFromList",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "uploadMyFiles",
              "parameters": [
                {
                  "name": "$event"
                }
              ]
            },
            {
              "kind": "field",
              "name": "getNewListUtilityItemProps"
            },
            {
              "kind": "method",
              "name": "_onFileLoad",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onUploadProgress"
            },
            {
              "kind": "method",
              "name": "errorHandler"
            },
            {
              "kind": "method",
              "name": "getFiles",
              "return": {
                "type": {
                  "text": "any[]"
                }
              },
              "parameters": [
                {
                  "name": "arFiles",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setNewFiles",
              "parameters": [
                {
                  "name": "arFiles"
                }
              ]
            },
            {
              "kind": "method",
              "name": "validateMaxSize",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "fileObj"
                },
                {
                  "name": "maxSizeInMB"
                }
              ]
            },
            {
              "kind": "method",
              "name": "buildFilePropsFromResponse",
              "parameters": [
                {
                  "name": "respObj"
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "attachment-component",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "attachment-component",
          "declaration": {
            "name": "Attachment",
            "module": "src/components/Attachment/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Attachment",
            "module": "src/components/Attachment/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/Boilerplate/boilerplate-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "boilerplateStyles",
          "default": "html`\n  <style>\n    /* Due to shadow DOM scoping: from this component through all children, apply a background-color */\n    /*\n    * {\n      background-color: orange;\n    }\n*/\n\n    .boilerplate-class {\n      font-size: 16px;\n\n      background-color: var(--app-neutral-light-color);\n      padding: 1rem;\n      margin: 0.5rem;\n      border-radius: 0.6125rem;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "boilerplateStyles",
          "declaration": {
            "name": "boilerplateStyles",
            "module": "src/components/Boilerplate/boilerplate-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/Boilerplate/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Boilerplate",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "boilerplate-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "boilerplate-component",
          "declaration": {
            "name": "Boilerplate",
            "module": "src/components/Boilerplate/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Boilerplate",
            "module": "src/components/Boilerplate/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/CancelAlert/cancel-alert-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "cancelAlertStyles",
          "default": "html`\n  <style>\n    .psdk-cancel-alert-background {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      height: 100%;\n      width: 100%;\n      background-color: rgba(100, 100, 100, 0.4);\n      position: fixed;\n      z-index: 9999;\n      top: 0px;\n      left: 0px;\n    }\n\n    .psdk-cancel-alert-top {\n      display: table;\n      margin: auto;\n      min-width: 550px;\n      background-color: white;\n      border: 1px solid black;\n      border-radius: 10px;\n      padding: 20px;\n      box-shadow: 0 0 10px 3px #777;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cancelAlertStyles",
          "declaration": {
            "name": "cancelAlertStyles",
            "module": "src/components/CancelAlert/cancel-alert-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/CancelAlert/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CancelAlert",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "bShowAlert",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "heading",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "body1",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "body2",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "itemKey",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCancelAlertHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "dismissAlert"
            },
            {
              "kind": "method",
              "name": "sendMessage",
              "parameters": [
                {
                  "name": "sMessage",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_buttonClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "buttonClick",
              "parameters": [
                {
                  "name": "sAction",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "cancel-alert-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "cancel-alert-component",
          "declaration": {
            "name": "CancelAlert",
            "module": "src/components/CancelAlert/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CancelAlert",
            "module": "src/components/CancelAlert/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/CaseCreateStage/case-create-stage-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "caseCreateStageStyles",
          "default": "html`\n  <style>\n    .boilerplate-class {\n      font-size: 16px;\n\n      background-color: var(--app-neutral-light-color);\n      padding: 1rem;\n      margin: 0.5rem;\n      border-radius: 0.6125rem;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "caseCreateStageStyles",
          "declaration": {
            "name": "caseCreateStageStyles",
            "module": "src/components/CaseCreateStage/case-create-stage-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/CaseCreateStage/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CaseCreateStage",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "case-create-stage-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "case-create-stage-component",
          "declaration": {
            "name": "CaseCreateStage",
            "module": "src/components/CaseCreateStage/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CaseCreateStage",
            "module": "src/components/CaseCreateStage/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/DeferLoad/defer-load-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "deferLoadStyles",
          "default": "html`\n  <style>\n    /* used for div wrapper to allow loading indicator to center in the deferLoad wrapper div */\n    .container-for-progress {\n      position: relative;\n\n      background-color: var(--app-form-color);\n      margin-top: 16px;\n      margin-bottom: 16px;\n      padding: 0rem 0.625rem;\n      border-radius: 0.3125rem;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "deferLoadStyles",
          "declaration": {
            "name": "deferLoadStyles",
            "module": "src/components/DeferLoad/defer-load-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/DeferLoad/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DeferLoad",
          "members": [
            {
              "kind": "field",
              "name": "loadData",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "attribute": "loadData"
            },
            {
              "kind": "field",
              "name": "bShowDefer",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name"
            },
            {
              "kind": "field",
              "name": "componentName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "loadedPConn",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "loadViewCaseID",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "containerName",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "constants",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "CASE",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "PAGE",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "DATA",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "resourceType",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "isContainerPreview",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "deferLoadId",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "currentLoadedAssignment",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "isLoading",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "loadActiveTab"
            },
            {
              "kind": "field",
              "name": "getViewOptions"
            },
            {
              "kind": "method",
              "name": "onResponse",
              "parameters": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDeferLoadHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "loadData",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "fieldName": "loadData"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "defer-load-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "defer-load-component",
          "declaration": {
            "name": "DeferLoad",
            "module": "src/components/DeferLoad/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DeferLoad",
            "module": "src/components/DeferLoad/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/FlowContainer/flow-container-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "flowContainerStyles",
          "default": "html`\n  <style>\n    h2 {\n      font-size: 1.1rem;\n    }\n\n    .psdk-instruction-text {\n      font-size: 0.9rem;\n      font-weight: 400;\n      margin-bottom: 1rem;\n    }\n\n    .psdk-case-view-divider {\n      border-bottom: 0.0625rem solid var(--app-neutral-light-color);\n    }\n\n    .psdk-flow-container-top {\n      background-color: var(--app-form-color);\n      padding: 0rem 0.625rem 0.625rem 0.625rem;\n      border-radius: 0.3125rem;\n    }\n    .psdk-flow-container {\n      padding-left: 2.1875rem;\n    }\n\n    .psdk-message-card {\n      margin: 10px;\n      padding: 16px;\n    }\n\n    .psdk-message {\n      margin-top: 0.2rem;\n    }\n\n    .psdk-icon {\n      width: 3rem;\n      display: inline-block;\n      padding: 0rem 0.6rem;\n      filter: var(--app-primary-color-filter);\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "flowContainerStyles",
          "declaration": {
            "name": "flowContainerStyles",
            "module": "src/components/FlowContainer/flow-container-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/FlowContainer/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FlowContainer",
          "members": [
            {
              "kind": "field",
              "name": "buildName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "containerName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "instructionText",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "itemKey",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "configProps",
              "type": {
                "text": "Object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "arNewChildren",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "todo_showTodo",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "todo_caseInfoID",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "todo_showTodoList",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "todo_datasource"
            },
            {
              "kind": "field",
              "name": "todo_headerText",
              "type": {
                "text": "string"
              },
              "default": "'To do'"
            },
            {
              "kind": "field",
              "name": "todo_type",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "todo_context",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "caseMessages",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "bHasCaseMessages",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "checkSvg",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "svgCurrent",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "svgNotCurrent",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "newConfig",
              "type": {
                "text": "Object"
              },
              "default": "{}"
            },
            {
              "kind": "method",
              "name": "getBuildName",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "initContainer"
            },
            {
              "kind": "method",
              "name": "hasAssignments"
            },
            {
              "kind": "method",
              "name": "isCaseWideLocalAction"
            },
            {
              "kind": "method",
              "name": "hasChildCaseAssignments"
            },
            {
              "kind": "method",
              "name": "getActiveViewLabel"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "initComponent",
              "parameters": [
                {
                  "name": "bLoadChildren",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getTodoVisibilty"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "flowContainerHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "flow-container",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "flow-container",
          "declaration": {
            "name": "FlowContainer",
            "module": "src/components/FlowContainer/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FlowContainer",
            "module": "src/components/FlowContainer/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ModalViewContainer/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ModalViewContainer",
          "members": [
            {
              "kind": "field",
              "name": "arNewChildren",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "configProps",
              "type": {
                "text": "Object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "templateName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "buildName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "bShowModal",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "itemKey",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "oCaseInfo",
              "type": {
                "text": "Object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "routingInfoRef",
              "type": {
                "text": "Object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "createdViewPConn",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "bSubscribed",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "cancelPConn",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "bShowCancelAlert",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bAlertState",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getModalViewContainerHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getConfigObject",
              "parameters": [
                {
                  "name": "item"
                },
                {
                  "name": "pConnect"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onAlertState",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "showAlert",
              "parameters": [
                {
                  "name": "payload"
                }
              ]
            },
            {
              "kind": "method",
              "name": "hasContainerItems",
              "parameters": [
                {
                  "name": "routingInfo"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getKeyAndLatestItem",
              "parameters": [
                {
                  "name": "routinginfo"
                }
              ]
            },
            {
              "kind": "method",
              "name": "compareCaseInfoIsDifferent",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "oCurrentCaseInfo",
                  "type": {
                    "text": "Object"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "modal-view-container-component",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "modal-view-container-component",
          "declaration": {
            "name": "ModalViewContainer",
            "module": "src/components/ModalViewContainer/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ModalViewContainer",
            "module": "src/components/ModalViewContainer/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ModalViewContainer/modal-view-container-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "modalViewContainerStyles",
          "default": "html`\n  <style>\n    .psdk-dialog-background {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      height: 100%;\n      width: 100%;\n      background-color: rgba(100, 100, 100, 0.4);\n      position: fixed;\n      z-index: 999;\n      top: 0px;\n      left: 0px;\n    }\n\n    .psdk-modal-view-container-top {\n      display: table;\n      margin: auto;\n      min-width: 650px;\n      background-color: white;\n      border: 1px solid black;\n      border-radius: 10px;\n      padding: 20px;\n      box-shadow: 0 0 10px 3px #777;\n    }\n\n    .psdk-dialog-float {\n      position: absolute;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "modalViewContainerStyles",
          "declaration": {
            "name": "modalViewContainerStyles",
            "module": "src/components/ModalViewContainer/modal-view-container-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/MultiStep/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MultiStep",
          "members": [
            {
              "kind": "field",
              "name": "bIsVertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "bIsVertical"
            },
            {
              "kind": "field",
              "name": "arCurrentStepIndicies",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "arCurrentStepIndicies"
            },
            {
              "kind": "field",
              "name": "arMainButtons",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "arMainButtons"
            },
            {
              "kind": "field",
              "name": "arSecondaryButtons",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "arSecondaryButtons"
            },
            {
              "kind": "field",
              "name": "arChildren",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "attribute": "arChildren"
            },
            {
              "kind": "field",
              "name": "arNavigationSteps",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "attribute": "arNavigationSteps"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "assignmentCardHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getStepVerticalMarkerStyle",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "step",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "bSubStep",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getStepHorizontallMarkerStyle",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "step",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "bSubStep",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getStepMarkerStyle",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "step",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "bSubStep",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "verticalMultiStep",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "horizontalMultiStep",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "multiStepHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onActionButtonClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "bIsVertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "bIsVertical"
            },
            {
              "name": "arCurrentStepIndicies",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "arCurrentStepIndicies"
            },
            {
              "name": "arMainButtons",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "arMainButtons"
            },
            {
              "name": "arSecondaryButtons",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "arSecondaryButtons"
            },
            {
              "name": "arChildren",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "fieldName": "arChildren"
            },
            {
              "name": "arNavigationSteps",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "fieldName": "arNavigationSteps"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "multi-step-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "multi-step-component",
          "declaration": {
            "name": "MultiStep",
            "module": "src/components/MultiStep/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MultiStep",
            "module": "src/components/MultiStep/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/MultiStep/multi-step-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "multiStepStyles",
          "default": "html`\n  <style>\n    .psdk-vertical-step {\n      position: relative;\n      margin-left: 0.4375rem;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .psdk-vertical-assignment {\n      padding-left: 2rem;\n    }\n\n    /* makes the line between nodes*/\n    .psdk-vertical-step::before {\n      content: '';\n      display: block;\n      position: absolute;\n      z-index: 0;\n      width: 0.0625rem;\n      height: 100%;\n      top: calc(3 * 0.5rem);\n      background-color: var(--app-neutral-color);\n      transition: all calc(2 * 0.25s) cubic-bezier(0.4, 0.6, 0.1, 1);\n    }\n\n    /* hides line after later last node*/\n    .psdk-vertical-step:last-child::before {\n      display: none;\n    }\n\n    .psdk-vertical-header-step {\n      height: calc(6 * 0.5rem);\n      display: flex;\n      align-items: center;\n    }\n\n    .psdk-vertical-step-name {\n      margin-left: 0.5rem;\n    }\n\n    .psdk-vertical-marker {\n      margin-left: calc(0.9375rem / 2 * -1);\n      transition: all calc(2 * 0.25s) cubic-bezier(0.4, 0.6, 0.1, 1);\n      display: block;\n      position: relative;\n      z-index: 1;\n      width: 0.9375rem;\n      height: 0.9375rem;\n      border-radius: 100%;\n      background: white;\n    }\n\n    ::before {\n      box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n    }\n    .v-success {\n      border: 0.15rem solid var(--app-primary-color);\n    }\n\n    .v-sub {\n      margin-left: calc(0.4375rem / 2 * -1);\n      width: 0.4375rem;\n      height: 0.4375rem;\n    }\n\n    .v-current {\n      background: var(--app-primary-color);\n      border: 0.0625rem solid var(--app-primary-color);\n    }\n\n    .v-future {\n      border: 0.0625rem solid var(--app-neutral-color);\n    }\n\n    .psdk-horizontal-progress {\n      position: relative;\n      padding: calc(2 * 0.5rem) 0.5rem;\n    }\n\n    .psdk-horizontal-steps {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      width: 100%;\n    }\n\n    .psdk-horizontal-assignment {\n      padding-left: 2rem;\n    }\n\n    .psdk-horizontal-header-step {\n      padding: 0.5rem;\n      height: auto;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      flex-basis: 0;\n      max-width: 100%;\n      min-width: 0;\n    }\n\n    .psdk-horizontal-header-step-first {\n      padding: 0.5rem;\n      height: auto;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: flex-start;\n      flex-basis: 0;\n      max-width: 100%;\n      min-width: 0;\n    }\n\n    .psdk-horizontal-header-step-last {\n      padding: 0.5rem;\n      height: auto;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: flex-end;\n      flex-basis: 0;\n      max-width: 100%;\n      min-width: 0;\n    }\n\n    .psdk-horizontal-step-name {\n      margin-bottom: 0.5rem;\n      font-size: 0.875rem;\n      line-height: 1.2em;\n      text-transform: capitalize;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      transition: all calc(2 * 0.25s) cubic-bezier(0.4, 0.6, 0.1, 1);\n    }\n\n    .psdk-horizontal-marker {\n      transition: all calc(2 * 0.25s) cubic-bezier(0.4, 0.6, 0.1, 1);\n      display: block;\n      position: relative;\n      z-index: 1;\n      width: 0.9375rem;\n      height: 0.9375rem;\n      border-radius: 100%;\n      background: white;\n    }\n\n    .psdk-horizontal-bar {\n      position: absolute;\n      height: 0.0625rem;\n      bottom: 2rem;\n      background: #cfcfcf;\n      left: 2rem;\n      right: calc(2% + 0.8rem);\n    }\n\n    .h-success {\n      border: 0.15rem solid var(--app-primary-color);\n    }\n\n    .h-sub {\n      margin-left: calc(0.4375rem / 2 * -1);\n      width: 0.4375rem;\n      height: 0.4375rem;\n    }\n\n    .h-current {\n      background: var(--app-primary-color);\n      border: 0.0625rem solid var(--app-primary-color);\n    }\n\n    .h-future {\n      border: 0.0625rem solid var(--app-neutral-color);\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "multiStepStyles",
          "declaration": {
            "name": "multiStepStyles",
            "module": "src/components/MultiStep/multi-step-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/NavBar/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NavBar",
          "members": [
            {
              "kind": "field",
              "name": "appName",
              "attribute": "appName"
            },
            {
              "kind": "field",
              "name": "pages",
              "attribute": "pages"
            },
            {
              "kind": "field",
              "name": "caseTypes",
              "attribute": "caseTypes"
            },
            {
              "kind": "field",
              "name": "navPages"
            },
            {
              "kind": "field",
              "name": "navExpandCollapse"
            },
            {
              "kind": "field",
              "name": "bShowCaseTypes",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bShowOperatorButtons",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "portalName",
              "type": {
                "text": "string"
              },
              "default": "'User Portal'"
            },
            {
              "kind": "field",
              "name": "portalApp",
              "type": {
                "text": "string"
              },
              "default": "'App Name'"
            },
            {
              "kind": "field",
              "name": "portalLogoImage"
            },
            {
              "kind": "field",
              "name": "portalOperator"
            },
            {
              "kind": "field",
              "name": "portalOperatorInitials"
            },
            {
              "kind": "field",
              "name": "navIcon"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.               /\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "navPanelButtonClick",
              "parameters": [
                {
                  "name": "oPageData",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navPanelCreateButtonClick"
            },
            {
              "kind": "method",
              "name": "navPanelCreateCaseType",
              "parameters": [
                {
                  "name": "sCaseType",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "sFlowType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navPanelOperatorButtonClick"
            },
            {
              "kind": "method",
              "name": "navPanelLogoutClick"
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "appName",
              "fieldName": "appName"
            },
            {
              "name": "pages",
              "fieldName": "pages"
            },
            {
              "name": "caseTypes",
              "fieldName": "caseTypes"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "nav-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "nav-bar",
          "declaration": {
            "name": "NavBar",
            "module": "src/components/NavBar/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "NavBar",
            "module": "src/components/NavBar/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/NavBar/navbar-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "navbarStyles",
          "default": "html`\n  <style>\n    .psdk-nav-divider {\n      border-bottom: 0.0625rem solid var(--app-nav-color);\n      width: 100%;\n    }\n\n    .psdk-nav-header {\n      display: flex;\n      padding-top: 0.625rem;\n    }\n\n    .psdk-nav-logo {\n      /* override vertical-align coming in from Bootstrap \"reboot\" */\n      vertical-align: baseline;\n\n      width: 3.5rem;\n      margin-left: 0.5rem;\n      margin-right: 0.5rem;\n      margin-top: 0.25rem;\n      margin-bottom: 0.25rem;\n\n      padding-left: 0.5rem;\n      padding-right: 0.5rem;\n    }\n\n    /* background color white */\n    .psdk-nav-svg-icon {\n      filter: var(--app-white-color-filter);\n      width: 1.6rem;\n      padding-right: 0.625rem;\n    }\n\n    .psdk-nav-portal-info {\n      margin-top: 0.15rem;\n      margin-bottom: 0.25rem;\n      padding-left: 0.15rem;\n      padding-right: 0.5rem;\n    }\n\n    .psdk-nav-portal-name {\n      font-size: 1rem;\n    }\n\n    .psdk-nav-portal-app {\n      font-size: 1rem;\n    }\n\n    .psdk-appshell-nav {\n      top: 0px; /* JEA */\n      position: relative; /* JEA was fixed */\n      z-index: 3;\n      display: flex;\n      flex-direction: column;\n      justify-content: flex-start;\n      background: var(--app-nav-bg);\n      width: var(--app-nav-width);\n      height: 100%;\n      color: var(--app-nav-color);\n      overflow: hidden;\n      white-space: nowrap;\n      transition: width var(--transition-medium) var(--natural-ease);\n      will-change: width;\n    }\n\n    .psdk-appshell-nav:hover {\n      width: var(--app-nav-width-expanded);\n    }\n\n    .psdk-appshell-topnav {\n      display: flex;\n      flex-direction: column;\n      justify-content: flex-start;\n      background: var(--app-nav-bg);\n      width: var(--app-nav-width);\n      height: 15%;\n      color: var(--app-nav-color);\n      overflow: hidden;\n      white-space: nowrap;\n      transition: width var(--transition-medium) var(--natural-ease);\n      will-change: width;\n    }\n\n    .psdk-appshell-middlenav {\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      background: var(--app-nav-bg);\n      width: var(--app-nav-width);\n      height: 50%;\n      color: var(--app-nav-color);\n      overflow: hidden;\n      white-space: nowrap;\n      transition: width var(--transition-medium) var(--natural-ease);\n      will-change: width;\n    }\n\n    .psdk-appshell-bottom {\n      /* to make NavBar logout button stay fixed to bottom of window */\n      position: fixed;\n      bottom: 0px;\n      background: var(--app-nav-bg);\n      width: inherit;\n      border-top: 0.0625rem solid var(--app-nav-color);\n    }\n\n    /* Added for nav bar buttons to be like middlenav but with no additional flex direction and left justify */\n    .psdk-appshell-buttonnav {\n      /* display: flex;\n        flex-direction: row; */\n      border: none;\n      justify-content: left;\n      background: var(--app-nav-bg);\n      width: var(--app-nav-width);\n      height: 50%;\n      color: var(--app-nav-color);\n      overflow: hidden;\n      white-space: nowrap;\n      transition: width var(--transition-medium) var(--natural-ease);\n      will-change: width;\n    }\n\n    .psdk-nav-ul-middle {\n      display: block;\n      list-style-type: none;\n      margin: 0rem;\n      padding-inline-start: 30px;\n    }\n\n    .psdk-nav-li-middle {\n      box-sizing: border-box;\n      text-align: left;\n    }\n\n    .psdk-icon {\n      padding: 0rem 0.125rem;\n      min-width: unset;\n    }\n\n    .psdk-nav-button-span {\n      padding: 1rem;\n    }\n\n    .psdk-nav-oper-avatar {\n      margin: 0rem;\n      padding: 0rem;\n      min-width: 2.5rem;\n      min-height: 2.5rem;\n      max-width: 2.5rem;\n      max-height: 2.5rem;\n      border-radius: 50%;\n      justify-content: center;\n      align-items: center;\n      text-align: center;\n      display: inline-flex;\n      background: var(--app-neutral-color);\n      color: white;\n      font-weight: normal;\n      font-size: 1rem;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "navbarStyles",
          "declaration": {
            "name": "navbarStyles",
            "module": "src/components/NavBar/navbar-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/PreviewViewContainer/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PreviewViewContainer",
          "members": [
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "preview-view-container",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "preview-view-container",
          "declaration": {
            "name": "PreviewViewContainer",
            "module": "src/components/PreviewViewContainer/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "PreviewViewContainer",
            "module": "src/components/PreviewViewContainer/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/Pulse/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Pulse",
          "members": [
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "pulse-component",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "pulse-component",
          "declaration": {
            "name": "Pulse",
            "module": "src/components/Pulse/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Pulse",
            "module": "src/components/Pulse/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/Pulse/pulse-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "pulseStyles",
          "default": "html`\n  <style>\n    /* Due to shadow DOM scoping: from this component through all children, apply a background-color */\n\n    * {\n      background-color: lightskyblue;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "pulseStyles",
          "declaration": {
            "name": "pulseStyles",
            "module": "src/components/Pulse/pulse-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ReAuthenticationModal/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ReAuthenticationModal",
          "members": [
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "Boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "String"
              },
              "default": "'ReAuthenticationModal'"
            },
            {
              "kind": "method",
              "name": "launchReAuthenticationModal",
              "parameters": [
                {
                  "name": "reAuthProps"
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "reauthentication-modal-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "reauthentication-modal-component",
          "declaration": {
            "name": "ReAuthenticationModal",
            "module": "src/components/ReAuthenticationModal/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ReAuthenticationModal",
            "module": "src/components/ReAuthenticationModal/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/Reference/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Reference",
          "members": [
            {
              "kind": "field",
              "name": "displayOnlyFA",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "displayOnlyFA"
            },
            {
              "kind": "field",
              "name": "resolvedConfigProps",
              "type": {
                "text": "any"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "referencedViewComponent",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentToRender"
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "displayOnlyFA",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "displayOnlyFA"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "reference-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "reference-component",
          "declaration": {
            "name": "Reference",
            "module": "src/components/Reference/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Reference",
            "module": "src/components/Reference/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/Region/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Region",
          "members": [
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "region-component",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "region-component",
          "declaration": {
            "name": "Region",
            "module": "src/components/Region/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Region",
            "module": "src/components/Region/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/RootContainer/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RootContainer",
          "members": [
            {
              "kind": "field",
              "name": "previewViewContainerConn",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "modalViewContainerConn",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "createdPConnect",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "displayOnlyFA",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "displayOnlyFA"
            },
            {
              "kind": "field",
              "name": "isMashup",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "isMashup"
            },
            {
              "kind": "field",
              "name": "componentName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "newPConn",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getRootHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "displayOnlyFA",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "displayOnlyFA"
            },
            {
              "name": "isMashup",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "isMashup"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "root-container",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "root-container",
          "declaration": {
            "name": "RootContainer",
            "module": "src/components/RootContainer/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RootContainer",
            "module": "src/components/RootContainer/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/Stages/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Stages",
          "members": [
            {
              "kind": "field",
              "name": "checkSvgIcon",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "imagePath",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStageInnerHtml",
              "parameters": [
                {
                  "name": "stage",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getStageOuterHtml",
              "parameters": [
                {
                  "name": "stage",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "stagesHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "stages-component",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "stages-component",
          "declaration": {
            "name": "Stages",
            "module": "src/components/Stages/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Stages",
            "module": "src/components/Stages/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/Stages/stages-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "stagesStyles",
          "default": "html`\n  <style>\n    .psdk-stages-full {\n      display: block;\n    }\n\n    .psdk-stages-divider {\n      border-bottom: 0.0625rem solid var(--app-neutral-light-color);\n    }\n\n    .psdk-stages-icon {\n      width: 1.4rem;\n      display: inline-block;\n    }\n\n    .psdk-stages-bar {\n      margin: 1rem 0rem;\n      background-color: rgb(255, 255, 255);\n      border-radius: 0.5rem;\n      border: 0.0625rem solid var(--app-neutral-light-color);\n      overflow: hidden;\n      display: flex;\n    }\n\n    .psdk-stages-chevron {\n      position: relative;\n      height: calc(2rem);\n      padding: calc(1rem);\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      max-width: 100%;\n      min-width: 0px;\n      flex-grow: 1;\n      flex-shrink: 1;\n    }\n\n    .psdk-stages-chevron:not(:last-child)::after {\n      content: '';\n      position: absolute;\n      display: block;\n      z-index: 2;\n      width: calc(1.75rem);\n      height: calc(1.75rem);\n      right: calc(-0.4375rem);\n      background: inherit;\n      border-style: solid;\n      border-color: rgb(207, 207, 207);\n      border-width: 0.0625rem 0.0625rem 0px 0px;\n      border-radius: 0px calc(0.3125rem) 0px 0px;\n      transform: rotateZ(45deg) skew(15deg, 15deg);\n    }\n\n    .psdk-stages-inner-past {\n      color: black;\n    }\n\n    .psdk-stages-inner-present {\n      color: var(--app-primary-color);\n      font-weight: bold;\n    }\n    .psdk-stages-inner-future {\n      color: var(--app-neutral-color);\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "stagesStyles",
          "declaration": {
            "name": "stagesStyles",
            "module": "src/components/Stages/stages-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/VerticalTabs/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VerticalTabs",
          "members": [
            {
              "kind": "field",
              "name": "tabConfig",
              "type": {
                "text": "any"
              },
              "default": "[]",
              "attribute": "tabConfig"
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "method",
              "name": "getVerticalTabsHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "arTabs",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_tabClick",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "tabConfig",
              "type": {
                "text": "any"
              },
              "default": "[]",
              "fieldName": "tabConfig"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "vertical-tabs-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "vertical-tabs-component",
          "declaration": {
            "name": "VerticalTabs",
            "module": "src/components/VerticalTabs/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "VerticalTabs",
            "module": "src/components/VerticalTabs/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/VerticalTabs/vertical-tabs-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "verticalTabsStyles",
          "default": "html`\n  <style>\n    button {\n      background-color: transparent;\n    }\n\n    button:active,\n    input[type='button']:active,\n    button:focus,\n    input[type='button']:focus {\n      outline: none;\n    }\n\n    .psdk-vertical-tabs {\n      display: flex;\n      flex-direction: column;\n    }\n\n    .psdk-tab-selected {\n      position: relative;\n      background: none;\n      border: 0.125rem solid transparent;\n      border-style: inset;\n      cursor: pointer;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      border-style: solid;\n      color: #000000;\n      border-width: 0.0625rem 0;\n      border-color: #cfcfcf;\n      height: calc(5.5 * 0.5rem);\n      margin-top: -0.0625rem;\n      padding: 0 calc(2 * 0.5rem);\n      font-weight: bold;\n      white-space: nowrap;\n    }\n\n    .psdk-tab-selected::after {\n      content: '';\n      position: absolute;\n      display: block;\n      top: 0;\n      bottom: 0;\n      right: 0;\n      width: 0.25rem;\n      background: var(--app-primary-color);\n    }\n\n    .psdk-tab-unselected {\n      position: relative;\n      background: none;\n      border: 0.125rem solid transparent;\n      border-style: inset;\n      cursor: pointer;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      border-style: solid;\n      color: #000000;\n      border-width: 0.0625rem 0;\n      border-color: #cfcfcf;\n      height: calc(5.5 * 0.5rem);\n      margin-top: -0.0625rem;\n      padding: 0 calc(2 * 0.5rem);\n      font-weight: bold;\n      white-space: nowrap;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "verticalTabsStyles",
          "declaration": {
            "name": "verticalTabsStyles",
            "module": "src/components/VerticalTabs/vertical-tabs-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ToDo/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ToDo",
          "members": [
            {
              "kind": "field",
              "name": "caseInfoID",
              "attribute": "caseInfoID"
            },
            {
              "kind": "field",
              "name": "datasource",
              "attribute": "datasource"
            },
            {
              "kind": "field",
              "name": "headerText",
              "attribute": "headerText"
            },
            {
              "kind": "field",
              "name": "itemKey",
              "attribute": "itemKey"
            },
            {
              "kind": "field",
              "name": "showTodoList",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "showTodoList"
            },
            {
              "kind": "field",
              "name": "target"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'worklist'"
            },
            {
              "kind": "field",
              "name": "context",
              "attribute": "context"
            },
            {
              "kind": "field",
              "name": "myWorkList",
              "attribute": "myWorkList"
            },
            {
              "kind": "field",
              "name": "configProps"
            },
            {
              "kind": "field",
              "name": "currentUser"
            },
            {
              "kind": "field",
              "name": "currentUserInitials",
              "type": {
                "text": "string"
              },
              "default": "'--'"
            },
            {
              "kind": "field",
              "name": "assignmentCount"
            },
            {
              "kind": "field",
              "name": "arAssignments"
            },
            {
              "kind": "field",
              "name": "assignmentsSource",
              "attribute": "assignmentsSource"
            },
            {
              "kind": "field",
              "name": "bShowMore",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateToDo"
            },
            {
              "kind": "method",
              "name": "getID",
              "parameters": [
                {
                  "name": "assignment",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "topThreeAssignments",
              "parameters": [
                {
                  "name": "arList",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getCaseInfoAssignment",
              "parameters": [
                {
                  "name": "arList",
                  "type": {
                    "text": "any[]"
                  }
                },
                {
                  "name": "caseInfoID",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clickGo",
              "parameters": [
                {
                  "name": "inAssignmentArray",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_showMore"
            },
            {
              "kind": "method",
              "name": "_showLess"
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "caseInfoID",
              "fieldName": "caseInfoID"
            },
            {
              "name": "datasource",
              "fieldName": "datasource"
            },
            {
              "name": "headerText",
              "fieldName": "headerText"
            },
            {
              "name": "itemKey",
              "fieldName": "itemKey"
            },
            {
              "name": "showTodoList",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showTodoList"
            },
            {
              "name": "context",
              "fieldName": "context"
            },
            {
              "name": "myWorkList",
              "fieldName": "myWorkList"
            },
            {
              "name": "assignmentsSource",
              "fieldName": "assignmentsSource"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "todo-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "todo-component",
          "declaration": {
            "name": "ToDo",
            "module": "src/components/ToDo/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ToDo",
            "module": "src/components/ToDo/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ToDo/todo-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "todoStyles",
          "default": "html`\n  <style>\n    .psdk-display-divider {\n      border-bottom: 0.0625rem solid var(--app-neutral-light-color);\n    }\n\n    .psdk-todo {\n      padding: 0.5rem;\n    }\n\n    .psdk-todo-header {\n      display: inline-flex;\n    }\n\n    .psdk-todo-text {\n      padding: 0.5rem 0.625rem;\n      font-size: 1.1rem;\n      font-weight: bold;\n    }\n\n    .psdk-assignment-count {\n      background-color: var(--app-primary-light-color);\n      margin: 0.5rem;\n      border-radius: 45%;\n      padding: 0.15rem 0.4rem;\n    }\n\n    .psdk-todo-id {\n      color: var(--app-primary-color);\n      cursor: pointer;\n    }\n\n    .psdk-avatar {\n      margin: 0rem;\n      padding: 0rem;\n      min-width: 2.5rem;\n      min-height: 2.5rem;\n      max-width: 2.5rem;\n      max-height: 2.5rem;\n      border-radius: 50%;\n      justify-content: center;\n      align-items: center;\n      text-align: center;\n      display: flex;\n      background: var(--app-primary-color);\n      color: white;\n      font-weight: bold;\n      font-size: 1.25rem;\n    }\n\n    .psdk-todo-assignment {\n      display: inline-flex;\n      width: 100%;\n      padding: 0.625rem 0rem;\n    }\n\n    .psdk-todo-assignment-data {\n      display: inline-flex;\n    }\n\n    .psdk-todo-assignment-status {\n      background-color: var(--app-neutral-light-color);\n      border-radius: 0.125rem;\n      color: darkslategray;\n      font-size: 0.75rem;\n      font-weight: bold;\n      line-height: calc(0.5rem * 2.5);\n      height: calc(0.5rem * 2.5);\n      padding: 0 0.5rem;\n      text-transform: uppercase;\n    }\n\n    .psdk-todo-assignment-task {\n      color: var(--app-neutral-color);\n    }\n\n    .psdk-todo-assignment-action {\n      display: inline-flex;\n    }\n\n    .psdk-todo-card {\n      width: 100%;\n      padding-left: 0.625rem;\n    }\n\n    .psdk-todo-show-more {\n      width: 100%;\n      text-align: center;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "todoStyles",
          "declaration": {
            "name": "todoStyles",
            "module": "src/components/ToDo/todo-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/View/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "View",
          "members": [
            {
              "kind": "field",
              "name": "displayOnlyFA",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "displayOnlyFA"
            },
            {
              "kind": "field",
              "name": "templateName"
            },
            {
              "kind": "field",
              "name": "title"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "buildView"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "computeAdditionalProps",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "getPConnect",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "displayOnlyFA",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "displayOnlyFA"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "view-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "view-component",
          "declaration": {
            "name": "View",
            "module": "src/components/View/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "View",
            "module": "src/components/View/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/View/view-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "viewStyles",
          "default": "html`\n  <style>\n    h4 {\n      margin-top: 0.8rem;\n      margin-left: 0.8rem;\n    }\n\n    .psdk-view-top {\n      padding: 0;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "viewStyles",
          "declaration": {
            "name": "viewStyles",
            "module": "src/components/View/view-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ViewContainer/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ViewContainer",
          "members": [
            {
              "kind": "field",
              "name": "displayOnlyFA",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "displayOnlyFA"
            },
            {
              "kind": "field",
              "name": "templateName"
            },
            {
              "kind": "field",
              "name": "title",
              "default": "`${this.theComponentName}: placeholder`"
            },
            {
              "kind": "field",
              "name": "theBuildName"
            },
            {
              "kind": "field",
              "name": "context"
            },
            {
              "kind": "field",
              "name": "createdViewPConn"
            },
            {
              "kind": "field",
              "name": "routingInfo",
              "type": {
                "text": "string"
              },
              "default": "'default value'"
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "After calling registerAndSubscribe, this function is called whenever\nthe store changes.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "prepareDispatchObject",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Adapted from Angular SDK"
            },
            {
              "kind": "method",
              "name": "buildName",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "displayOnlyFA",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "displayOnlyFA"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "view-container",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "view-container",
          "declaration": {
            "name": "ViewContainer",
            "module": "src/components/ViewContainer/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ViewContainer",
            "module": "src/components/ViewContainer/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ViewContainer/view-container-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "viewContainerStyles",
          "default": "html`\n  <style>\n    h4 {\n      margin-top: 0.8rem;\n      margin-left: 0.8rem;\n    }\n\n    .psdk-view-container-top {\n      padding: 0;\n    }\n\n    .progress-box {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      height: 100%;\n      width: 100%;\n      background-color: rgba(245, 245, 245, 0.5); /* whitesmoke as rgba to let spinner be fully opaque */\n      position: fixed;\n      z-index: 99999;\n      top: 0rem;\n      left: 0rem;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "viewContainerStyles",
          "declaration": {
            "name": "viewContainerStyles",
            "module": "src/components/ViewContainer/view-container-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/hello-world/hello-world.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HelloWorldElem",
          "members": [
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "'default title'",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "'default description'",
              "attribute": "description"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "'default title'",
              "fieldName": "title"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "'default description'",
              "fieldName": "description"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "hello-world",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "hello-world",
          "declaration": {
            "name": "HelloWorldElem",
            "module": "src/components/hello-world/hello-world.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "HelloWorldElem",
            "module": "src/components/hello-world/hello-world.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getAllFields",
          "parameters": [
            {
              "name": "pConnect",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "filterForFieldValueList",
          "parameters": [
            {
              "name": "fields",
              "type": {
                "text": "any"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getAllFields",
          "declaration": {
            "name": "getAllFields",
            "module": "src/components/templates/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "filterForFieldValueList",
          "declaration": {
            "name": "filterForFieldValueList",
            "module": "src/components/templates/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/CaseSummaryFields/case-summary-fields-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "caseSummaryFieldsStyles",
          "default": "html`\n  <style>\n    .psdk-case-summary-fields {\n      padding: calc(2 * 0.5rem);\n      display: grid;\n      grid-row-gap: calc(2 * 0.5rem);\n    }\n\n    .psdk-case-summary-fields-primary {\n      grid-template-columns: 20ch 1fr;\n      display: grid;\n      grid-column-gap: calc(2 * 0.5rem);\n      grid-row-gap: calc(2 * 0.5rem);\n    }\n\n    .psdk-csf-primary-field {\n      display: grid;\n      grid-template-columns: 1fr;\n      grid-column-gap: calc(0 * 0.5rem);\n    }\n\n    .psdk-csf-primary-field-header {\n      word-break: break-word;\n      grid-column-start: 1;\n      grid-row-start: 1;\n      max-width: max-content;\n      font-size: 0.8125rem;\n      font-weight: 400;\n      color: rgba(0, 0, 0, 0.8);\n      font-family: 'Open Sans';\n    }\n\n    .psdk-csf-primary-field-data {\n      word-break: break-word;\n      grid-column-start: 1;\n      grid-row-start: 2;\n    }\n\n    .psdk-case-summary-fields-secondary {\n      width: 100%;\n      display: grid;\n      grid-template-columns: 1fr;\n      grid-column-gap: calc(2 * 0.5rem);\n      grid-row-gap: calc(1 * 0.5rem);\n    }\n\n    .psdk-csf-secondary-field {\n      display: grid;\n      grid-template-columns: 20ch 1fr;\n      grid-column-gap: calc(2 * 0.5rem);\n    }\n\n    .psdk-csf-secondary-field-header {\n      word-break: break-word;\n      grid-column-start: 1;\n      grid-row-start: 1;\n      max-width: max-content;\n      font-size: 0.8125rem;\n      font-weight: 400;\n      color: rgba(0, 0, 0, 0.8);\n      font-family: 'Open Sans';\n    }\n\n    .psdk-csf-secondary-field-data {\n      word-break: break-word;\n      grid-column-start: 2;\n      grid-row-start: 1;\n    }\n\n    span.psdk-csf-text-style {\n      font-size: 1.125rem;\n      font-weight: 600;\n      font-family: 'Open Sans';\n    }\n\n    span.psdk-csf-status-style {\n      background-color: #e9eef3;\n      border-radius: calc(0.25 * 0.5rem);\n      color: #4c5a67;\n      display: inline-block;\n      font-size: 0.75rem;\n      font-weight: bold;\n      line-height: calc(0.5rem * 2.5);\n      height: calc(0.5rem * 2.5);\n      padding: 0 0.5rem;\n      text-transform: uppercase;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "caseSummaryFieldsStyles",
          "declaration": {
            "name": "caseSummaryFieldsStyles",
            "module": "src/components/designSystemExtension/CaseSummaryFields/case-summary-fields-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/CaseSummaryFields/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SummaryItem",
          "members": [
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "status"
            },
            {
              "kind": "field",
              "name": "bShowStatus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "bShowStatus"
            },
            {
              "kind": "field",
              "name": "arPrimaryFields",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arSecondaryFields",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arPrimaryFieldsWithStatus",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "settingsSvgIcon",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "imagePath",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "elMenu",
              "type": {
                "text": "any"
              },
              "default": "null"
            },
            {
              "kind": "method",
              "name": "updatePrimaryWithStatus"
            },
            {
              "kind": "method",
              "name": "getFieldLabel",
              "parameters": [
                {
                  "name": "field",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getFieldValue",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "field",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPrimaryFieldsHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getSecondaryFieldsHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getCaseSummaryFieldsHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "status",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "status"
            },
            {
              "name": "bShowStatus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "bShowStatus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "case-summary-fields-extension",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "case-summary-fields-extension",
          "declaration": {
            "name": "SummaryItem",
            "module": "src/components/designSystemExtension/CaseSummaryFields/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SummaryItem",
            "module": "src/components/designSystemExtension/CaseSummaryFields/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/FieldGroup/field-group-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "fieldGroupStyles",
          "default": "html`\n  <style>\n    .field-group-title {\n      padding: 1em 0;\n      font-weight: 500;\n    }\n    .field-group-items {\n      display: flex;\n      flex-direction: column;\n      gap: 5px;\n    }\n    .field-group-item {\n      display: grid;\n      grid-template-columns: 16ch auto;\n      gap: calc(0.5rem) calc(1rem);\n    }\n    .field-group-item-label {\n      word-break: break-word;\n      max-width: max-content;\n      font-size: calc(0.8125rem);\n      font-weight: 600;\n      color: rgba(0, 0, 0, 0.6);\n    }\n    .field-group-item-value {\n      ord-break: break-word;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "fieldGroupStyles",
          "declaration": {
            "name": "fieldGroupStyles",
            "module": "src/components/designSystemExtension/FieldGroup/field-group-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/FieldGroup/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FieldGroup",
          "members": [
            {
              "kind": "field",
              "name": "item",
              "attribute": "item"
            },
            {
              "kind": "field",
              "name": "name",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "fields",
              "type": {
                "text": "any"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "formatItemValue",
              "parameters": [
                {
                  "name": "value"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getItems"
            }
          ],
          "attributes": [
            {
              "name": "item",
              "fieldName": "item"
            },
            {
              "name": "name",
              "fieldName": "name"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "field-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "field-group",
          "declaration": {
            "name": "FieldGroup",
            "module": "src/components/designSystemExtension/FieldGroup/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FieldGroup",
            "module": "src/components/designSystemExtension/FieldGroup/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/DetailsFields/details-fields-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "detailsFieldsStyles",
          "default": "html`\n  <style>\n    .psdk-grid-filter {\n      display: grid;\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n      column-gap: calc(2 * 0.5rem);\n      row-gap: calc(2 * 0.5rem);\n      align-items: center;\n      font-size: 0.875rem;\n    }\n\n    .psdk-field-label {\n      color: rgba(0, 0, 0, 0.54);\n      display: block;\n      font-weight: 400;\n    }\n\n    .psdk-details-group {\n      flex-direction: row;\n      justify-content: space-between;\n    }\n    .psdk-details-fields {\n      padding: calc(2 * 0.5rem);\n      grid-row-gap: calc(2 * 0.5rem);\n    }\n\n    .psdk-details-fields-primary {\n      width: 100%;\n      display: grid;\n      grid-template-columns: 1fr;\n      grid-column-gap: calc(2 * 0.5rem);\n      grid-row-gap: calc(1 * 0.5rem);\n    }\n\n    .psdk-details-fields-single {\n      display: grid;\n      grid-template-columns: 20ch 1fr;\n      grid-column-gap: calc(2 * 0.5rem);\n    }\n\n    .psdk-details-fields-label {\n      word-break: break-word;\n      grid-column-start: 1;\n      grid-row-start: 1;\n      max-width: max-content;\n      font-size: 0.8125rem;\n      font-weight: 400;\n      color: rgba(0, 0, 0, 0.8);\n      font-family: 'Open Sans';\n    }\n\n    .psdk-details-fields-value {\n      word-break: break-word;\n      grid-column-start: 2;\n      grid-row-start: 1;\n    }\n\n    span.psdk-details-text-style {\n      font-weight: 400;\n    }\n\n    span.psdk-details-status-style {\n      background-color: #e9eef3;\n      border-radius: calc(0.25 * 0.5rem);\n      color: #4c5a67;\n      display: inline-block;\n      font-size: 0.75rem;\n      font-weight: bold;\n      line-height: calc(0.5rem * 2.5);\n      height: calc(0.5rem * 2.5);\n      padding: 0 0.5rem;\n      text-transform: uppercase;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "detailsFieldsStyles",
          "declaration": {
            "name": "detailsFieldsStyles",
            "module": "src/components/designSystemExtension/DetailsFields/details-fields-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/DetailsFields/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DetailsFields",
          "members": [
            {
              "kind": "field",
              "name": "arFields",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "attribute": "arFields"
            },
            {
              "kind": "field",
              "name": "arFields2",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "attribute": "arFields2"
            },
            {
              "kind": "field",
              "name": "arFields3",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "attribute": "arFields3"
            },
            {
              "kind": "field",
              "name": "settingsSvgIcon",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "imagePath",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "elMenu",
              "type": {
                "text": "any"
              },
              "default": "null"
            },
            {
              "kind": "method",
              "name": "getFieldLabel",
              "parameters": [
                {
                  "name": "field",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getFieldValue",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "field",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getFieldsHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "arFields"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getDetailsFieldsHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "arFields",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "fieldName": "arFields"
            },
            {
              "name": "arFields2",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "fieldName": "arFields2"
            },
            {
              "name": "arFields3",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "fieldName": "arFields3"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "details-fields-extension",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "details-fields-extension",
          "declaration": {
            "name": "DetailsFields",
            "module": "src/components/designSystemExtension/DetailsFields/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DetailsFields",
            "module": "src/components/designSystemExtension/DetailsFields/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/FieldGroupList/field-group-list-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "fieldGroupListStyles",
          "default": "html`\n  <style>\n    .field-group-list-item-title {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 1em 0;\n      font-weight: 500;\n    }\n    .psdk-utility-button {\n      background: none;\n      border: none;\n      cursor: pointer;\n      display: flex;\n    }\n    .psdk-utility-card-action-svg-icon {\n      width: 1.4rem;\n    }\n    .btn {\n      display: inline-block;\n      text-align: center;\n      vertical-align: middle;\n      user-select: none;\n      background-color: transparent;\n      border: none;\n      padding: 0.375rem 0.75rem;\n      font-size: 1rem;\n    }\n    .btn-link {\n      font-weight: 400;\n      color: #007bff;\n      text-decoration: none;\n    }\n    .btn-link:hover {\n      color: #0056b3;\n      text-decoration: underline;\n      cursor: pointer;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "fieldGroupListStyles",
          "declaration": {
            "name": "fieldGroupListStyles",
            "module": "src/components/designSystemExtension/FieldGroupList/field-group-list-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/FieldGroupList/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FieldGroupList",
          "members": [
            {
              "kind": "field",
              "name": "items",
              "attribute": "items"
            },
            {
              "kind": "field",
              "name": "menuIconDelete",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "getChildRegionArray",
              "parameters": [
                {
                  "name": "child",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "description": "the metadata <em>name</em> that will cause a region to be returned",
                  "name": "inName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "addRecord"
            },
            {
              "kind": "method",
              "name": "deleteRecord",
              "parameters": [
                {
                  "name": "index"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "items",
              "fieldName": "items"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "field-group-list",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "field-group-list",
          "declaration": {
            "name": "FieldGroupList",
            "module": "src/components/designSystemExtension/FieldGroupList/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FieldGroupList",
            "module": "src/components/designSystemExtension/FieldGroupList/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/LionInputDateOnly/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LionInputDateOnly",
          "superclass": {
            "name": "LionInputDate",
            "package": "@lion/input-date"
          },
          "tagName": "lion-input-dateonly",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "lion-input-dateonly",
          "declaration": {
            "name": "LionInputDateOnly",
            "module": "src/components/designSystemExtension/LionInputDateOnly/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LionInputDateOnly",
            "module": "src/components/designSystemExtension/LionInputDateOnly/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/LionInputDateTime/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LionInputDatetime",
          "superclass": {
            "name": "LionInputDate",
            "package": "@lion/input-date"
          },
          "tagName": "lion-input-datetime",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "lion-input-datetime",
          "declaration": {
            "name": "LionInputDatetime",
            "module": "src/components/designSystemExtension/LionInputDateTime/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LionInputDatetime",
            "module": "src/components/designSystemExtension/LionInputDateTime/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/LionInputTimeOnly/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LionInputTimeOnly",
          "superclass": {
            "name": "LionInput",
            "package": "@lion/input"
          },
          "tagName": "lion-input-timeonly",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "lion-input-timeonly",
          "declaration": {
            "name": "LionInputTimeOnly",
            "module": "src/components/designSystemExtension/LionInputTimeOnly/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LionInputTimeOnly",
            "module": "src/components/designSystemExtension/LionInputTimeOnly/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/LionInputUrl/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LionInputUrl",
          "superclass": {
            "name": "LionInput",
            "package": "@lion/input"
          },
          "tagName": "lion-input-url",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "lion-input-url",
          "declaration": {
            "name": "LionInputUrl",
            "module": "src/components/designSystemExtension/LionInputUrl/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LionInputUrl",
            "module": "src/components/designSystemExtension/LionInputUrl/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/ListUtility/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ListUtility",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "bLoading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "bLoading"
            },
            {
              "kind": "field",
              "name": "count",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "arActions",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arItems",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "headerSvgIcon",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "settingsSvgIcon",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "imagePath",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "noItemsMessage",
              "type": {
                "text": "string"
              },
              "default": "'No Items'"
            },
            {
              "kind": "field",
              "name": "elMenu",
              "type": {
                "text": "any"
              },
              "default": "null"
            },
            {
              "kind": "method",
              "name": "getActionButtonMenuHtml",
              "parameters": [
                {
                  "name": "menuActions",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getItemsHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getListUtilityHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "_showActionMenu",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onViewAll",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleActionMenu",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "actionClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_clickAway",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "name"
            },
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "icon"
            },
            {
              "name": "bLoading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "bLoading"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "list-utility-extension",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "list-utility-extension",
          "declaration": {
            "name": "ListUtility",
            "module": "src/components/designSystemExtension/ListUtility/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ListUtility",
            "module": "src/components/designSystemExtension/ListUtility/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/ListUtility/list-utility-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "listUtilityStyles",
          "default": "html`\n  <style>\n    lion-button {\n      background-color: transparent;\n      padding-left: 0px;\n    }\n\n    .psdk-icon {\n      padding: 0rem 0.125rem;\n      min-width: unset;\n    }\n\n    .psdk-utility-divider {\n      border-bottom: 0.0625rem solid var(--app-neutral-light-color);\n    }\n\n    .psdk-utility-view-all {\n      width: 100%;\n      display: flex;\n      justify-content: center;\n      color: var(--app-primary-color);\n    }\n\n    .psdk-utility-count {\n      background: var(--app-primary-light-color);\n      border-radius: calc(1.125 * 0.5rem);\n      color: black;\n      display: inline-block;\n      font-size: 0.75rem;\n      font-weight: bold;\n      text-align: center;\n      width: 1.125rem;\n\n      vertical-align: top;\n      margin: 0 0 0.313rem 1rem;\n    }\n\n    .psdk-utility .header-text {\n      font-size: 1rem;\n      font-weight: bold;\n      padding-bottom: 0.3125rem;\n      text-align: left;\n      display: inline-block;\n    }\n\n    .psdk-utility .header-icon {\n      display: inline-block;\n    }\n\n    .psdk-utility {\n      width: 100%;\n      padding: 0.625rem 0rem;\n      text-align: left;\n      background-color: var(--app-form-color);\n      border-radius: 0.6125rem;\n      margin: 0.3125rem 0rem;\n      position: relative;\n    }\n    .psdk-utility .header {\n      text-align: left;\n      display: flex;\n      align-items: center;\n    }\n\n    .psdk-utility-svg-icon {\n      width: 1.4rem;\n      display: inline-block;\n    }\n\n    .psdk-settings-svg-icon {\n      width: 1.4rem;\n      display: inline-block;\n      filter: var(--app-primary-color-filter);\n    }\n\n    .psdk-utility .message {\n      text-align: center;\n    }\n\n    .psdk-utility-menu {\n      position: relative;\n      display: inline-block;\n      text-align: right;\n    }\n\n    .psdk-action-menu-content {\n      display: none;\n      position: absolute;\n      background-color: #f1f1f1;\n      left: calc(100% - 180px);\n      min-width: 160px;\n      box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n      z-index: 1;\n      text-align: left;\n    }\n\n    .psdk-action-menu-content.show {\n      display: block;\n    }\n\n    .psdk-action-menu-content a {\n      color: black;\n      padding: 12px 16px;\n      text-decoration: none;\n      display: block;\n    }\n\n    .psdk-action-menu-content a:hover {\n      background-color: #ddd;\n    }\n\n    .psdk-utility-card {\n      display: flex;\n      flex-direction: row;\n      padding: 0.5rem;\n    }\n\n    .psdk-utility-card-icon {\n      flex-grow: 1;\n      max-width: 2.813rem;\n    }\n\n    .psdk-utility-card-svg-icon {\n      width: 2.5rem;\n      display: inline-block;\n    }\n\n    .psdk-utility-card-main {\n      flex-grow: 2;\n      max-width: 16.563rem;\n    }\n\n    .psdk-utility-card-main-primary-url {\n      color: var(--app-primary-color);\n    }\n\n    .psdk-utility-card-main-primary-url .mat-button.mat-primary {\n      padding-left: 0px;\n    }\n\n    .psdk-utility-card-main-primary-label {\n      font-weight: bold;\n    }\n\n    .psdk-utility-card-actions {\n      flex-grow: 1;\n      text-align: right;\n    }\n\n    .psdk-utility-card-action-svg-icon {\n      width: 1.4rem;\n      display: inline-block;\n    }\n\n    .psdk-utility-card-actions-svg-icon {\n      width: 1.4rem;\n      display: inline-block;\n      vertical-align: middle;\n      filter: var(--app-primary-color-filter);\n    }\n\n    .psdk-utility-card-action-actions-svg-icon {\n      width: 1.4rem;\n      display: inline-block;\n      vertical-align: bottom;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "listUtilityStyles",
          "declaration": {
            "name": "listUtilityStyles",
            "module": "src/components/designSystemExtension/ListUtility/list-utility-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/Operator/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Operator",
          "members": [
            {
              "kind": "field",
              "name": "caseOpConfig",
              "attribute": "caseOpConfig"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "default": "''",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "String"
              },
              "default": "''",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "theDateTime",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "theId",
              "type": {
                "text": "String"
              },
              "default": "''",
              "attribute": "theId"
            },
            {
              "kind": "field",
              "name": "fields",
              "type": {
                "text": "any"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "bShowPopover",
              "type": {
                "text": "Boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "'Operator'"
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "Boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "Boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "hideOperator"
            },
            {
              "kind": "method",
              "name": "showOperator"
            },
            {
              "kind": "method",
              "name": "theRenderedDiv"
            },
            {
              "kind": "method",
              "name": "_clickAway",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "caseOpConfig",
              "fieldName": "caseOpConfig"
            },
            {
              "name": "label",
              "type": {
                "text": "String"
              },
              "default": "''",
              "fieldName": "label"
            },
            {
              "name": "name",
              "type": {
                "text": "String"
              },
              "default": "''",
              "fieldName": "name"
            },
            {
              "name": "theId",
              "type": {
                "text": "String"
              },
              "default": "''",
              "fieldName": "theId"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "operator-extension",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "operator-extension",
          "declaration": {
            "name": "Operator",
            "module": "src/components/designSystemExtension/Operator/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Operator",
            "module": "src/components/designSystemExtension/Operator/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/Operator/operator-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "operatorStyles",
          "default": "html`\n  <style>\n    .psdk-operator {\n      display: flex;\n      flex-direction: row;\n      /* font-size: 0.8rem; */\n      color: var(--app-neutral-color);\n    }\n\n    .psdk-operator-popover {\n      display: table;\n      margin: auto;\n      min-width: 100px;\n      background-color: white;\n      border: 1px solid black;\n      border-radius: 10px;\n      padding: 20px;\n      box-shadow: 0 0 10px 3px #777;\n      position: absolute;\n      z-index: 99;\n    }\n\n    .psdk-operator-name {\n      color: var(--app-neutral-color);\n    }\n\n    .psdk-operator-value {\n      padding-left: 5px;\n      color: var(--app-neutral-dark-color);\n    }\n\n    .psdk-single {\n      flex: 1;\n    }\n\n    .psdk-double {\n      flex: 2;\n    }\n\n    .psdk-top-pad {\n      padding-top: 10px;\n    }\n\n    dl {\n      display: grid;\n      grid-template-columns: auto 1fr;\n      grid-column-gap: calc(2 * 0.5rem);\n      grid-row-gap: calc(1 * 0.5rem);\n    }\n\n    dl::before,\n    dl::after {\n      box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n    }\n\n    dt {\n      max-width: 20ch;\n      grid-column-start: 1;\n    }\n\n    dd {\n      max-width: 75ch;\n      grid-column-start: 2;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "operatorStyles",
          "declaration": {
            "name": "operatorStyles",
            "module": "src/components/designSystemExtension/Operator/operator-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/ProgressIndicator/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ProgressExtension",
          "members": [],
          "superclass": {
            "name": "LionProgressIndicator",
            "package": "@lion/progress-indicator"
          },
          "tagName": "progress-extension",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "progress-extension",
          "declaration": {
            "name": "ProgressExtension",
            "module": "src/components/designSystemExtension/ProgressIndicator/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ProgressExtension",
            "module": "src/components/designSystemExtension/ProgressIndicator/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/SummaryItem/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SummaryItem",
          "members": [
            {
              "kind": "field",
              "name": "item",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "menuIconOverride",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "menuIconOverride"
            },
            {
              "kind": "field",
              "name": "menuIconOverrideAction",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "settingsSvgIcon",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "imagePath",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "elMenu",
              "type": {
                "text": "any"
              },
              "default": "null"
            },
            {
              "kind": "method",
              "name": "getActionButtonMenuHtml",
              "parameters": [
                {
                  "name": "menuActions",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getItemHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "_showActionMenu",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_actionClick",
              "parameters": [
                {
                  "name": "$event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onViewAll",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleActionMenu",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "actionClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_clickAway",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "menuIconOverride",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "menuIconOverride"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "case-summary-fields-extension",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "summary-item-extension",
          "declaration": {
            "name": "SummaryItem",
            "module": "src/components/designSystemExtension/SummaryItem/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SummaryItem",
            "module": "src/components/designSystemExtension/SummaryItem/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/SummaryItem/summary-item-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "summaryItemStyles",
          "default": "html`\n  <style>\n    lion-button {\n      background-color: transparent;\n      padding-left: 0px;\n    }\n\n    .psdk-icon {\n      padding: 0rem 0.125rem;\n      min-width: unset;\n    }\n\n    .psdk-utility-divider {\n      border-bottom: 0.0625rem solid var(--app-neutral-light-color);\n    }\n\n    .psdk-utility-view-all {\n      width: 100%;\n      display: flex;\n      justify-content: center;\n      color: var(--app-primary-color);\n    }\n\n    .psdk-utility-count {\n      background: var(--app-primary-light-color);\n      border-radius: calc(1.125 * 0.5rem);\n      color: black;\n      display: inline-block;\n      font-size: 0.75rem;\n      font-weight: bold;\n      text-align: center;\n      width: 1.125rem;\n\n      vertical-align: top;\n      margin: 0 0 0.313rem 1rem;\n    }\n\n    .psdk-utility .header-text {\n      font-size: 1rem;\n      font-weight: bold;\n      padding-bottom: 0.3125rem;\n      text-align: left;\n      display: inline-block;\n    }\n\n    .psdk-utility .header-icon {\n      display: inline-block;\n    }\n\n    .psdk-utility {\n      width: 100%;\n      padding: 0.625rem 0rem;\n      text-align: left;\n      background-color: var(--app-form-color);\n      border-radius: 0.6125rem;\n      margin: 0.3125rem 0rem;\n    }\n    .psdk-utility .header {\n      text-align: left;\n      display: flex;\n      align-items: center;\n    }\n\n    .psdk-utility-svg-icon {\n      width: 1.4rem;\n      display: inline-block;\n    }\n\n    .psdk-settings-svg-icon {\n      width: 1.4rem;\n      display: inline-block;\n      filter: var(--app-primary-color-filter);\n    }\n\n    .psdk-utility .message {\n      text-align: center;\n    }\n\n    .psdk-utility-menu {\n      position: relative;\n      display: inline-block;\n      text-align: right;\n    }\n\n    .psdk-action-menu-content {\n      display: none;\n      position: absolute;\n      background-color: #f1f1f1;\n      left: calc(100% - 180px);\n      min-width: 160px;\n      box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n      z-index: 1;\n      text-align: left;\n    }\n\n    .psdk-action-menu-content.show {\n      display: block;\n    }\n\n    .psdk-action-menu-content a {\n      color: black;\n      padding: 12px 16px;\n      text-decoration: none;\n      display: block;\n    }\n\n    .psdk-action-menu-content a:hover {\n      background-color: #ddd;\n    }\n\n    .psdk-utility-card {\n      display: flex;\n      flex-direction: row;\n      padding: 0.5rem 0rem 0.5rem 0.5rem;\n    }\n\n    .psdk-utility-card-icon {\n      flex-grow: 1;\n      max-width: 2.813rem;\n    }\n\n    .psdk-utility-card-svg-icon {\n      width: 2.5rem;\n      display: inline-block;\n    }\n\n    .psdk-utility-card-main {\n      flex-grow: 2;\n      max-width: 16.563rem;\n      margin: 0rem 0.3rem;\n    }\n\n    .psdk-utility-card-main-primary-url {\n      color: var(--app-primary-color);\n    }\n\n    .psdk-utility-card-main-primary-url .mat-button.mat-primary {\n      padding-left: 0px;\n    }\n\n    .psdk-utility-card-main-primary-label {\n      font-weight: bold;\n    }\n\n    .psdk-utility-card-actions {\n      flex-grow: 1;\n      text-align: right;\n    }\n\n    .psdk-utility-card-action-svg-icon {\n      width: 1.4rem;\n      display: inline-block;\n    }\n\n    .psdk-utility-card-actions-svg-icon {\n      width: 1.4rem;\n      display: inline-block;\n      vertical-align: middle;\n      filter: var(--app-primary-color-filter);\n    }\n\n    .psdk-utility-card-action-actions-svg-icon {\n      width: 1.4rem;\n      display: inline-block;\n      vertical-align: bottom;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "summaryItemStyles",
          "declaration": {
            "name": "summaryItemStyles",
            "module": "src/components/designSystemExtension/SummaryItem/summary-item-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/SummaryList/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SummaryList",
          "members": [
            {
              "kind": "field",
              "name": "arItems",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "menuIconOverride",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "menuIconOverride"
            },
            {
              "kind": "field",
              "name": "menuIconOverrideAction",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "getItemsHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "icon"
            },
            {
              "name": "menuIconOverride",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "menuIconOverride"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "summary-list-extension",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "summary-list-extension",
          "declaration": {
            "name": "SummaryList",
            "module": "src/components/designSystemExtension/SummaryList/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SummaryList",
            "module": "src/components/designSystemExtension/SummaryList/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/designSystemExtension/SummaryList/summary-list-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "summaryListStyles",
          "default": "html` <style></style> `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "summaryListStyles",
          "declaration": {
            "name": "summaryListStyles",
            "module": "src/components/designSystemExtension/SummaryList/summary-list-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/AutoComplete/autocomplete-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "autoCompleteStyles",
          "default": "html`\n  <style>\n    .psdk-full-width {\n      width: 100%;\n    }\n\n    .psdk-label-readonly {\n      font-size: 1rem;\n      display: block;\n      transform: translateY(-1.28125em) scale(0.75) perspective(100px) translateZ(0.001px);\n      -ms-transform: translateY(-1.28125em) scale(0.75);\n      width: 133.33333%;\n    }\n\n    .psdk-data-readonly {\n      padding-top: 0.625rem;\n      width: 100%;\n    }\n\n    .mat-form-field-infix {\n      width: auto;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "autoCompleteStyles",
          "declaration": {
            "name": "autoCompleteStyles",
            "module": "src/components/forms/AutoComplete/autocomplete-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/AutoComplete/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AutoComplete",
          "members": [
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "datasource",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "datasource"
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "dataList",
              "type": {
                "text": "any"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDisplayFieldsMetaData",
              "parameters": [
                {
                  "name": "columnList"
                }
              ]
            },
            {
              "kind": "method",
              "name": "preProcessColumns",
              "parameters": [
                {
                  "name": "columnList"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "buttonValue",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "fieldOnFocus",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getErrorMessage"
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "datasource",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "datasource"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "autocomplete-form",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "autocomplete-form",
          "declaration": {
            "name": "AutoComplete",
            "module": "src/components/forms/AutoComplete/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AutoComplete",
            "module": "src/components/forms/AutoComplete/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Checkbox/check-box-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "checkboxStyles",
          "default": "html`\n  <style>\n    .psdk-full-width {\n      min-width: 9.375rem;\n      width: 100%;\n      text-align: left;\n    }\n\n    .psdk-label-readonly {\n      top: 0rem;\n      margin-top: 0.625rem;\n      font-size: 0.875rem;\n      display: block;\n      transform: translateY(-1.28125em) scale(0.75) perspective(100px) translateZ(0.001px);\n      -ms-transform: translateY(-1.28125em) scale(0.75);\n      width: 133.33333%;\n    }\n\n    .psdk-data-readonly {\n      padding-top: 0.625rem;\n      width: 100%;\n    }\n\n    .check-box-form {\n      /* margin-left: 20px; */\n      margin-top: 15px;\n      margin-bottom: 5px;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "checkboxStyles",
          "declaration": {
            "name": "checkboxStyles",
            "module": "src/components/forms/Checkbox/check-box-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Checkbox/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CheckBox",
          "members": [
            {
              "kind": "field",
              "name": "bShowLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isChecked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "checkboxLabelPos",
              "type": {
                "text": "string"
              },
              "default": "'after'"
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "'default caption'"
            },
            {
              "kind": "field",
              "name": "theConfigProps",
              "type": {
                "text": "any"
              },
              "default": "{}"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleChecked"
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleChangeMultiMode",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "check-box-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "check-box-form",
          "declaration": {
            "name": "CheckBox",
            "module": "src/components/forms/Checkbox/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CheckBox",
            "module": "src/components/forms/Checkbox/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Date/date-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "dateStyles",
          "default": "html`\n  <style>\n    /* Due to shadow DOM scoping: from this component through all children, apply a background-color */\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dateStyles",
          "declaration": {
            "name": "dateStyles",
            "module": "src/components/forms/Date/date-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Date/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DateComponent",
          "members": [
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "date-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "date-form",
          "declaration": {
            "name": "DateComponent",
            "module": "src/components/forms/Date/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DateComponent",
            "module": "src/components/forms/Date/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Currency/currency-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "currencyStyles",
          "default": "html`\n  <style>\n    /* Due to shadow DOM scoping: from this component through all children, apply a background-color */\n    /*\n    * {\n      background-color: orange;\n    }\n*/\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "currencyStyles",
          "declaration": {
            "name": "currencyStyles",
            "module": "src/components/forms/Currency/currency-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Currency/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Currency",
          "members": [
            {
              "kind": "field",
              "name": "currencyISOCode",
              "type": {
                "text": "string"
              },
              "default": "'USD'"
            },
            {
              "kind": "field",
              "name": "bAllowDecimals",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "numberOptions",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "currency-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "currency-form",
          "declaration": {
            "name": "Currency",
            "module": "src/components/forms/Currency/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Currency",
            "module": "src/components/forms/Currency/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/DateTime/datetime-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "datetimeStyles",
          "default": "html`\n  <style>\n    /* Due to shadow DOM scoping: from this component through all children, apply a background-color */\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "datetimeStyles",
          "declaration": {
            "name": "datetimeStyles",
            "module": "src/components/forms/DateTime/datetime-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/DateTime/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DateTime",
          "members": [
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "datetime-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "datetime-form",
          "declaration": {
            "name": "DateTime",
            "module": "src/components/forms/DateTime/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DateTime",
            "module": "src/components/forms/DateTime/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Decimal/decimal-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "decimalStyles",
          "default": "html` <style></style> `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "decimalStyles",
          "declaration": {
            "name": "decimalStyles",
            "module": "src/components/forms/Decimal/decimal-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Decimal/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Decimal",
          "members": [
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "decimal-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "decimal-form",
          "declaration": {
            "name": "Decimal",
            "module": "src/components/forms/Decimal/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Decimal",
            "module": "src/components/forms/Decimal/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Dropdown/dropdown-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "dropdownStyles",
          "default": "html` <style></style> `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dropdownStyles",
          "declaration": {
            "name": "dropdownStyles",
            "module": "src/components/forms/Dropdown/dropdown-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Dropdown/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Dropdown",
          "members": [
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "datasource",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "datasource"
            },
            {
              "kind": "field",
              "name": "dataList",
              "type": {
                "text": "any"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "isSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "buttonValue",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getErrorMessage"
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "datasource",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "datasource"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "dropdown-form",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "dropdown-form",
          "declaration": {
            "name": "Dropdown",
            "module": "src/components/forms/Dropdown/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Dropdown",
            "module": "src/components/forms/Dropdown/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Email/email-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "emailStyles",
          "default": "html`\n  <style>\n    /* Bootstrap CSS classes utilised: form-group */\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "emailStyles",
          "declaration": {
            "name": "emailStyles",
            "module": "src/components/forms/Email/email-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Email/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Email",
          "members": [
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "email-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "email-form",
          "declaration": {
            "name": "Email",
            "module": "src/components/forms/Email/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Email",
            "module": "src/components/forms/Email/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/FormComponentBase/form-component-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "formComponentStyles",
          "default": "css`\n  /* Indicate that an element (typically a field on a form) needs to be fixed - validation problem */\n  .field-needs-attention {\n    border: 2px solid var(--app-error-light-color);\n    border-radius: 0.5rem;\n    padding: 5px;\n  }\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "formComponentStyles",
          "declaration": {
            "name": "formComponentStyles",
            "module": "src/components/forms/FormComponentBase/form-component-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/FormComponentBase/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormComponentBase",
          "members": [
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'"
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "annotatedLabel"
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "fieldOnClick"
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormComponentBase",
          "declaration": {
            "name": "FormComponentBase",
            "module": "src/components/forms/FormComponentBase/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/FormattedText/formatted-text-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "formattedTextStyles",
          "default": "html`\n  <style>\n    /* Bootstrap CSS classes utilised: form-group, form-control-plaintext, ml-3 */\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "formattedTextStyles",
          "declaration": {
            "name": "formattedTextStyles",
            "module": "src/components/forms/FormattedText/formatted-text-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/FormattedText/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormattedText",
          "members": [
            {
              "kind": "field",
              "name": "formatType",
              "type": {
                "text": "string"
              },
              "default": "'none'",
              "attribute": "formatType"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "value",
              "default": "undefined",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "hideLabel"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "string"
              },
              "default": "'stacked'",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "attribute": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "formatType",
              "type": {
                "text": "string"
              },
              "default": "'none'",
              "fieldName": "formatType"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label"
            },
            {
              "name": "value",
              "default": "undefined",
              "resolveInitializer": {
                "module": "src/components/forms/FormattedText/index.ts"
              },
              "fieldName": "value"
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "hideLabel"
            },
            {
              "name": "variant",
              "type": {
                "text": "string"
              },
              "default": "'stacked'",
              "fieldName": "variant"
            },
            {
              "name": "additionalProps",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "fieldName": "additionalProps"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "formatted-text-form",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "formatted-text-form",
          "declaration": {
            "name": "FormattedText",
            "module": "src/components/forms/FormattedText/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FormattedText",
            "module": "src/components/forms/FormattedText/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Percentage/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Percentage",
          "members": [
            {
              "kind": "field",
              "name": "numberOptions",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "percentage-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "percentage-form",
          "declaration": {
            "name": "Percentage",
            "module": "src/components/forms/Percentage/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Percentage",
            "module": "src/components/forms/Percentage/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Percentage/percentage-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "percentageStyles",
          "default": "html` <style></style> `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "percentageStyles",
          "declaration": {
            "name": "percentageStyles",
            "module": "src/components/forms/Percentage/percentage-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Phone/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Phone",
          "members": [
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "phone-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "phone-form",
          "declaration": {
            "name": "Phone",
            "module": "src/components/forms/Phone/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Phone",
            "module": "src/components/forms/Phone/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Phone/phone-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "phoneStyles",
          "default": "html`\n  <style>\n    /* Bootstrap CSS classes utilised: form-group */\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "phoneStyles",
          "declaration": {
            "name": "phoneStyles",
            "module": "src/components/forms/Phone/phone-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Integer/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Integer",
          "members": [
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "integer-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "integer-form",
          "declaration": {
            "name": "Integer",
            "module": "src/components/forms/Integer/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Integer",
            "module": "src/components/forms/Integer/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Integer/integer-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "integerStyles",
          "default": "html` <style></style> `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "integerStyles",
          "declaration": {
            "name": "integerStyles",
            "module": "src/components/forms/Integer/integer-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/RadioButtons/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RadioButtons",
          "members": [
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "isSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "buttonValue",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getErrorMessage"
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "radio-buttons-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "radio-buttons-form",
          "declaration": {
            "name": "RadioButtons",
            "module": "src/components/forms/RadioButtons/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RadioButtons",
            "module": "src/components/forms/RadioButtons/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/RadioButtons/radio-buttons-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "radioButtonStyles",
          "default": "html`\n  <style>\n    .psdk-label-readonly {\n      font-size: 1rem;\n      display: block;\n      transform: translateY(-1.28125em) scale(0.75) perspective(100px) translateZ(0.001px);\n      -ms-transform: translateY(-1.28125em) scale(0.75);\n      width: 133.33333%;\n    }\n\n    .psdk-data-readonly {\n      padding-top: 0.625rem;\n      width: 100%;\n    }\n\n    .mat-form-field-infix {\n      width: auto;\n    }\n\n    .psdk-radio-horizontal {\n      display: flex;\n      flex-direction: row;\n    }\n\n    .psdk-radio-vertical {\n      display: flex;\n      flex-direction: column;\n    }\n\n    .psdk-radio-button {\n      padding: 0.3125rem;\n    }\n\n    .psdk-radio-form {\n      width: 100%;\n    }\n\n    .psdk-radio-form .mat-form-field-underline {\n      background-color: transparent;\n    }\n\n    .psdk-radio-form .mat-form-field-label {\n      top: 0em;\n    }\n\n    .radio-group-form {\n      margin-left: 25px;\n      margin-top: 5px;\n      margin-bottom: 15px;\n    }\n\n    .radio-group-label {\n      color: var(--app-neutral-color);\n      font-weight: var(--font-weight-normal);\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "radioButtonStyles",
          "declaration": {
            "name": "radioButtonStyles",
            "module": "src/components/forms/RadioButtons/radio-buttons-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/SemanticLink/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SemanticLink",
          "members": [
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "displayMode"
            },
            {
              "kind": "field",
              "name": "label"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSingleReferenceHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "semantic-link",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "semantic-link",
          "declaration": {
            "name": "SemanticLink",
            "module": "src/components/forms/SemanticLink/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SemanticLink",
            "module": "src/components/forms/SemanticLink/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/SemanticLink/semantic-link-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "semanticLinkStyles",
          "default": "html`\n  <style>\n    .psdk-grid-filter {\n      display: grid;\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n      column-gap: calc(2 * 0.5rem);\n      row-gap: calc(2 * 0.5rem);\n      align-items: center;\n      font-size: 0.875rem;\n    }\n\n    .psdk-field-label {\n      color: rgba(0, 0, 0, 0.54);\n      display: block;\n      font-weight: 400;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "semanticLinkStyles",
          "declaration": {
            "name": "semanticLinkStyles",
            "module": "src/components/forms/SemanticLink/semantic-link-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/TextArea/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TextArea",
          "members": [
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "text-area-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "text-area-form",
          "declaration": {
            "name": "TextArea",
            "module": "src/components/forms/TextArea/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TextArea",
            "module": "src/components/forms/TextArea/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/TextArea/text-area-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "textAreaStyles",
          "default": "html` <style></style> `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "textAreaStyles",
          "declaration": {
            "name": "textAreaStyles",
            "module": "src/components/forms/TextArea/text-area-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Text/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Text",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "formatType",
              "type": {
                "text": "string"
              },
              "default": "'none'"
            },
            {
              "kind": "field",
              "name": "value",
              "default": "undefined",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "customFormat",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "customFormat"
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "attribute": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "decorator",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "decorator"
            },
            {
              "kind": "field",
              "name": "displayAs",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "displayAs"
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "testId",
              "attribute": "testId"
            },
            {
              "kind": "field",
              "name": "symbol",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "symbol"
            },
            {
              "kind": "field",
              "name": "symbolPosition",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "symbolPosition"
            },
            {
              "kind": "field",
              "name": "decimalPrecision",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "attribute": "decimalPrecision"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "formatNumber",
              "parameters": [
                {
                  "name": "text"
                }
              ]
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label"
            },
            {
              "name": "value",
              "default": "undefined",
              "resolveInitializer": {
                "module": "src/components/forms/Text/index.ts"
              },
              "fieldName": "value"
            },
            {
              "name": "customFormat",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "customFormat"
            },
            {
              "name": "additionalProps",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "fieldName": "additionalProps"
            },
            {
              "name": "decorator",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "decorator"
            },
            {
              "name": "displayAs",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "displayAs"
            },
            {
              "name": "testId",
              "fieldName": "testId"
            },
            {
              "name": "symbol",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "symbol"
            },
            {
              "name": "symbolPosition",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "symbolPosition"
            },
            {
              "name": "decimalPrecision",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "fieldName": "decimalPrecision"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "text-form",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "text-form",
          "declaration": {
            "name": "Text",
            "module": "src/components/forms/Text/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Text",
            "module": "src/components/forms/Text/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Text/text-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "textStyles",
          "default": "html`\n  <style>\n    /* Bootstrap CSS classes utilised: form-group, form-control-plaintext, ml-3 */\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "textStyles",
          "declaration": {
            "name": "textStyles",
            "module": "src/components/forms/Text/text-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/TextContent/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TextContent",
          "members": [
            {
              "kind": "field",
              "name": "displayAs"
            },
            {
              "kind": "field",
              "name": "content"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "text-content-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "text-content-form",
          "declaration": {
            "name": "TextContent",
            "module": "src/components/forms/TextContent/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TextContent",
            "module": "src/components/forms/TextContent/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/TextContent/text-content-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "textContentStyles",
          "default": "html` <style></style> `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "textContentStyles",
          "declaration": {
            "name": "textContentStyles",
            "module": "src/components/forms/TextContent/text-content-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/TextInput/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TextInput",
          "members": [
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "text-input-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "text-input-form",
          "declaration": {
            "name": "TextInput",
            "module": "src/components/forms/TextInput/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TextInput",
            "module": "src/components/forms/TextInput/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/TextInput/text-input-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "textInputStyles",
          "default": "html`\n  <style>\n    /* Bootstrap CSS classes utilised: form-group */\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "textInputStyles",
          "declaration": {
            "name": "textInputStyles",
            "module": "src/components/forms/TextInput/text-input-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Time/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Time",
          "members": [
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "time-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "time-form",
          "declaration": {
            "name": "Time",
            "module": "src/components/forms/Time/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Time",
            "module": "src/components/forms/Time/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/Time/time-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "timeStyles",
          "default": "html`\n  <style>\n    /* Due to shadow DOM scoping: from this component through all children, apply a background-color */\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "timeStyles",
          "declaration": {
            "name": "timeStyles",
            "module": "src/components/forms/Time/time-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/URL/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "URL",
          "members": [
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "url-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "url-form",
          "declaration": {
            "name": "URL",
            "module": "src/components/forms/URL/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "URL",
            "module": "src/components/forms/URL/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/URL/url-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "urlStyles",
          "default": "html` <style></style> `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "urlStyles",
          "declaration": {
            "name": "urlStyles",
            "module": "src/components/forms/URL/url-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/widgets/AppAnnouncement/app-announcement-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "appAnnouncementStyles",
          "default": "html`\n  <style>\n    h2 {\n      font-size: 1.2rem;\n      margin-block-start: 0rem;\n    }\n\n    h3 {\n      font-size: 1.1rem;\n    }\n    ul {\n      padding-inline-start: 20px;\n    }\n    .psdk-announcement {\n      background-color: var(--app-primary-light-color);\n      padding: 1rem;\n      margin: 0.5rem;\n      border-radius: 0.6125rem;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "appAnnouncementStyles",
          "declaration": {
            "name": "appAnnouncementStyles",
            "module": "src/components/widgets/AppAnnouncement/app-announcement-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/widgets/AppAnnouncement/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AppAnnouncement",
          "members": [
            {
              "kind": "field",
              "name": "header"
            },
            {
              "kind": "field",
              "name": "description"
            },
            {
              "kind": "field",
              "name": "arDetails",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "label"
            },
            {
              "kind": "field",
              "name": "whatsnewlink"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "app-announcement",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "app-announcement",
          "declaration": {
            "name": "AppAnnouncement",
            "module": "src/components/widgets/AppAnnouncement/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AppAnnouncement",
            "module": "src/components/widgets/AppAnnouncement/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/UserReference/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UserReference",
          "members": [
            {
              "kind": "field",
              "name": "userName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "dropDownDataSource",
              "type": {
                "text": "any"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "displayAs",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "SEARCH_BOX",
              "type": {
                "text": "string"
              },
              "default": "'Search box'"
            },
            {
              "kind": "field",
              "name": "DROPDOWN_LIST",
              "type": {
                "text": "string"
              },
              "default": "'Drop-down list'"
            },
            {
              "kind": "field",
              "name": "rawViewMetadata",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "viewName",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "firstChildMeta",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "OPERATORS_DP",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "userID",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "showAsFormattedText",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isUserNameAvailable"
            },
            {
              "kind": "field",
              "name": "getUserId"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "theRenderedDiv"
            },
            {
              "kind": "method",
              "name": "getData"
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "componentBaseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'FormComponentBase'",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bReadonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bRequired",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bVisible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "lionValidatorsArray",
              "type": {
                "text": "Object[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "controlName",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "annotatedLabel",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "testId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedvalues",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionList",
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionKey",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnClick",
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "fieldOnBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredFeedbackCondition",
              "parameters": [
                {
                  "name": "type"
                },
                {
                  "name": "meta"
                },
                {
                  "name": "originalCondition"
                }
              ],
              "inheritedFrom": {
                "name": "FormComponentBase",
                "module": "src/components/forms/FormComponentBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormComponentBase",
            "module": "/src/components/forms/FormComponentBase"
          },
          "tagName": "user-reference-form",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "user-reference-form",
          "declaration": {
            "name": "UserReference",
            "module": "src/components/forms/UserReference/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "UserReference",
            "module": "src/components/forms/UserReference/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/UserReference/user-reference-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "userReferenceStyles",
          "default": "html`\n  <style>\n    /* Due to shadow DOM scoping: from this component through all children, apply a background-color */\n    /*\n    * {\n      background-color: orange;\n    }\n*/\n    .psdk-user-reference {\n      display: flex;\n      flex-direction: row;\n      font-size: 0.8rem;\n      color: var(--app-neutral-color);\n    }\n    .psdk-single {\n      flex: 1;\n    }\n\n    .psdk-double {\n      flex: 2;\n    }\n\n    .psdk-top-pad {\n      padding-top: 10px;\n    }\n\n    dt {\n      flex: 1;\n    }\n\n    dd {\n      flex: 2;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "userReferenceStyles",
          "declaration": {
            "name": "userReferenceStyles",
            "module": "src/components/forms/UserReference/user-reference-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/widgets/CaseHistory/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CaseHistory",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "waitingForData",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "fields",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "displayedColumns",
              "type": {
                "text": "array"
              },
              "default": "[\n      { label: 'Date', type: 'DateTime', fieldName: 'pxTimeCreated' },\n      { label: 'Description', type: 'TextInput', fieldName: 'pyMessageKey' },\n      { label: 'User', type: 'TextInput', fieldName: 'pyPerformer' }\n    ]"
            },
            {
              "kind": "field",
              "name": "rowData",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "computeRowData",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "rows"
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "case-history-widget",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "case-history-widget",
          "declaration": {
            "name": "CaseHistory",
            "module": "src/components/widgets/CaseHistory/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CaseHistory",
            "module": "src/components/widgets/CaseHistory/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/widgets/CaseOperator/case-operator-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "caseOperatorStyles",
          "default": "html`\n  <style>\n    /* Due to shadow DOM scoping: from this component through all children, apply a background-color */\n    /*\n    * {\n      background-color: palegoldenrod;\n    }\n*/\n\n    .psdk-operator {\n      display: flex;\n      flex-direction: row;\n      /* font-size: 0.8rem; */\n      color: var(--app-neutral-color);\n    }\n\n    .psdk-operator-popover {\n      display: table;\n      margin: auto;\n      min-width: 100px;\n      background-color: white;\n      border: 1px solid black;\n      border-radius: 10px;\n      padding: 20px;\n      box-shadow: 0 0 10px 3px #777;\n      position: absolute;\n      z-index: 99;\n    }\n\n    .psdk-operator-name {\n      color: var(--app-neutral-color);\n    }\n\n    .psdk-operator-value {\n      padding-left: 5px;\n      color: var(--app-neutral-dark-color);\n    }\n\n    .psdk-single {\n      flex: 1;\n    }\n\n    .psdk-double {\n      flex: 2;\n    }\n\n    .psdk-top-pad {\n      padding-top: 10px;\n    }\n\n    dl {\n      display: grid;\n      grid-template-columns: auto 1fr;\n      grid-column-gap: calc(2 * 0.5rem);\n      grid-row-gap: calc(1 * 0.5rem);\n    }\n\n    dl::before,\n    dl::after {\n      box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n    }\n\n    dt {\n      max-width: 20ch;\n      grid-column-start: 1;\n    }\n\n    dd {\n      max-width: 75ch;\n      grid-column-start: 2;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "caseOperatorStyles",
          "declaration": {
            "name": "caseOperatorStyles",
            "module": "src/components/widgets/CaseOperator/case-operator-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/widgets/CaseOperator/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CaseOperator",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "default": "'default label'",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "String"
              },
              "default": "'default name'",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "String"
              },
              "default": "''",
              "attribute": "helperText"
            },
            {
              "kind": "field",
              "name": "theId",
              "type": {
                "text": "String"
              },
              "default": "''",
              "attribute": "theId"
            },
            {
              "kind": "field",
              "name": "fields",
              "type": {
                "text": "any"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "bShowPopover",
              "type": {
                "text": "Boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "hideOperator"
            },
            {
              "kind": "method",
              "name": "showOperator"
            },
            {
              "kind": "method",
              "name": "theRenderedDiv"
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "String"
              },
              "default": "'default label'",
              "fieldName": "label"
            },
            {
              "name": "name",
              "type": {
                "text": "String"
              },
              "default": "'default name'",
              "fieldName": "name"
            },
            {
              "name": "helperText",
              "type": {
                "text": "String"
              },
              "default": "''",
              "fieldName": "helperText"
            },
            {
              "name": "theId",
              "type": {
                "text": "String"
              },
              "default": "''",
              "fieldName": "theId"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "case-operator-widget",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "case-operator-widget",
          "declaration": {
            "name": "CaseOperator",
            "module": "src/components/widgets/CaseOperator/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CaseOperator",
            "module": "src/components/widgets/CaseOperator/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/AppShell/appshell-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "appShellStyles",
          "default": "html`\n  <style>\n    .appshell-top {\n      display: flex;\n      background-color: var(--app-background-color);\n    }\n\n    .appshell-main {\n      position: relative;\n      min-height: 100vh;\n      display: block;\n      width: 100%;\n    }\n\n    .psdk-icon {\n      padding: 0rem 0.125rem;\n      min-width: unset;\n    }\n\n    .progress-box {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      height: 100%;\n      width: 100%;\n      background-color: whitesmoke;\n      position: fixed;\n      z-index: 999;\n      top: 0rem;\n      left: 0rem;\n      opacity: 0.5;\n    }\n\n    .progress-spinner {\n      text-align: center;\n    }\n\n    ::ng-deep snack-bar-container.snackbar-newline {\n      white-space: pre-line;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "appShellStyles",
          "declaration": {
            "name": "appShellStyles",
            "module": "src/components/templates/AppShell/appshell-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/AppShell/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AppShell",
          "members": [
            {
              "kind": "field",
              "name": "configProps"
            },
            {
              "kind": "field",
              "name": "pages"
            },
            {
              "kind": "field",
              "name": "caseTypes"
            },
            {
              "kind": "field",
              "name": "bShowAppShell",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "appName",
              "attribute": "appName"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "appName",
              "fieldName": "appName"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "app-shell",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "app-shell",
          "declaration": {
            "name": "AppShell",
            "module": "src/components/templates/AppShell/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AppShell",
            "module": "src/components/templates/AppShell/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/widgets/FileUtility/file-utility-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "fileUtilityStyles",
          "default": "html`\n  <style>\n    .psdk-dialog-background {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      height: 100%;\n      width: 100%;\n      background-color: rgba(100, 100, 100, 0.4);\n      position: fixed;\n      z-index: 999;\n      top: 0px;\n      left: 0px;\n    }\n\n    .psdk-modal-file-top {\n      display: table;\n      margin: auto;\n      min-width: 650px;\n      background-color: white;\n      border: 1px solid black;\n      border-radius: 10px;\n      padding: 20px;\n      box-shadow: 0 0 10px 3px #777;\n    }\n\n    .psdk-modal-link-top {\n      display: table;\n      margin: auto;\n      min-width: 650px;\n      background-color: white;\n      border: 1px solid black;\n      border-radius: 10px;\n      padding: 20px;\n      box-shadow: 0 0 10px 3px #777;\n    }\n\n    .psdk-modal-body {\n      max-height: 500px;\n      overflow-y: auto;\n      overflow-x: hidden;\n    }\n\n    .psdk-view-all-header {\n      display: flex;\n      justify-content: space-between;\n    }\n\n    .psdk-view-all-close-icon {\n      width: 1.5rem;\n    }\n\n    .psdk-view-all-body {\n      max-height: 500px;\n      overflow-y: auto;\n      overflow-x: hidden;\n    }\n\n    .psdk-links-two-column {\n      display: grid;\n      grid-template-columns: repeat(2, 1fr);\n      gap: calc(1rem);\n      flex: 2;\n    }\n\n    .psdk-modal-links-row {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n    }\n\n    .psdk-links-add-link {\n      padding: 15px;\n    }\n\n    ul {\n      columns: 2;\n      -webkit-columns: 2;\n      -moz-columns: 2;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "fileUtilityStyles",
          "declaration": {
            "name": "fileUtilityStyles",
            "module": "src/components/widgets/FileUtility/file-utility-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/widgets/FileUtility/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FileUtility",
          "members": [
            {
              "kind": "field",
              "name": "arFullListAttachments",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "lu_name",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "lu_icon",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "lu_bLoading",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "lu_count",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "lu_arActions",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "lu_arItems",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "va_arItems",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "lu_onViewAllFunction",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "bShowFileModal",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bShowLinkModal",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bShowViewAllModal",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "arFileMainButtons",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arFileSecondaryButtons",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arLinkMainButtons",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arLinkSecondaryButtons",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arFiles",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arFileList",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "removeFileFromList",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "arLinks",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arLinksList",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "removeLinksFromList",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "link_title",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "link_url",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "currentLink",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "currentUrl",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "closeSvgIcon",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "currentCaseID",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "addAttachmentsActions",
              "type": {
                "text": "any[]"
              },
              "default": "[\n    {\n      text: 'Add files',\n      id: 'addNewFiles',\n      onClick: () => this.createModal('addLocalFile')\n    },\n    {\n      text: 'Add links',\n      id: 'addNewLinks',\n      onClick: () => this.createModal('addLocalLink')\n    }\n  ]"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "caseHasChanged",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFilesHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getFileUtilityHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "_addLink"
            },
            {
              "kind": "method",
              "name": "_changeTitle",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_changeUrl",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onFileLoad",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "downloadFile",
              "parameters": [
                {
                  "name": "att",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "fileDownload"
            },
            {
              "kind": "method",
              "name": "cancelFile",
              "parameters": [
                {
                  "name": "attID",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deleteFile",
              "parameters": [
                {
                  "name": "att",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeFile",
              "parameters": [
                {
                  "name": "attID",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeNewFile",
              "parameters": [
                {
                  "name": "attID",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onViewAll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "arAttachments",
                  "default": "[]",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onAttachFiles",
              "parameters": [
                {
                  "name": "files"
                }
              ]
            },
            {
              "kind": "method",
              "name": "refreshAttachments",
              "parameters": [
                {
                  "name": "attachedFileID"
                }
              ]
            },
            {
              "kind": "method",
              "name": "onUploadProgress",
              "parameters": [
                {
                  "name": "file"
                }
              ]
            },
            {
              "kind": "method",
              "name": "errorHandler",
              "parameters": [
                {
                  "name": "isFetchedCanceled"
                },
                {
                  "name": "file"
                }
              ]
            },
            {
              "kind": "method",
              "name": "onAttachLinks",
              "parameters": [
                {
                  "name": "links"
                }
              ]
            },
            {
              "kind": "method",
              "name": "addAttachments",
              "parameters": [
                {
                  "name": "attsFromResp",
                  "default": "[]",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_removeFileFromList",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_removeLinksFromList",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "getNewListUtilityItemProps"
            },
            {
              "kind": "field",
              "name": "getListUtilityItemProps"
            },
            {
              "kind": "method",
              "name": "_onViewAll"
            },
            {
              "kind": "method",
              "name": "_clickAway",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_closeViewAll"
            },
            {
              "kind": "method",
              "name": "createModal",
              "parameters": [
                {
                  "name": "modalType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createModalButtons"
            },
            {
              "kind": "method",
              "name": "uploadMyFiles",
              "parameters": [
                {
                  "name": "$event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getFiles",
              "return": {
                "type": {
                  "text": "any[]"
                }
              },
              "parameters": [
                {
                  "name": "arFiles",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setNewFiles",
              "parameters": [
                {
                  "name": "arFiles"
                }
              ]
            },
            {
              "kind": "method",
              "name": "validateMaxSize",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "fileObj"
                },
                {
                  "name": "maxSizeInMB"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getIconFromFileType",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "fileType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onFileActionButtonClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onLinkActionButtonClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearOutFiles"
            },
            {
              "kind": "method",
              "name": "clearOutLinks"
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "file-utility-component",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "file-utility-component",
          "declaration": {
            "name": "FileUtility",
            "module": "src/components/widgets/FileUtility/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FileUtility",
            "module": "src/components/widgets/FileUtility/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/CaseSummary/case-summary-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "caseSummaryStyles",
          "default": "html`\n  <style>\n    .psdk-case-summary-info-box {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-evenly;\n    }\n\n    .psdk-case-summary-data {\n      flex: 1;\n    }\n\n    .psdk-case-view-label {\n      font-size: 1rem;\n      display: block;\n      transform: translateY(0.2em) scale(0.75) perspective(100px) translateZ(0.001px);\n      -ms-transform: translateY(0.2em) scale(0.75);\n      width: 133.33333%;\n    }\n\n    .psdk-label-readonly {\n      font-size: 1rem;\n      display: block;\n      /*        \n        transform: translateY(-1.28125em) scale(.75) perspective(100px) translateZ(.001px);\n        -ms-transform: translateY(-1.28125em) scale(.75);\n*/\n      width: 133.33333%;\n    }\n\n    .psdk-data-readonly {\n      padding-top: 0.625rem;\n      width: 100%;\n    }\n\n    .psdk-status {\n      background-color: var(--app-primary-color);\n      color: white;\n      padding: 0;\n      margin-top: 0.625rem;\n      width: fit-content;\n    }\n\n    .mat-form-field-infix {\n      width: auto;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "caseSummaryStyles",
          "declaration": {
            "name": "caseSummaryStyles",
            "module": "src/components/templates/CaseSummary/case-summary-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/CaseSummary/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CaseSummary",
          "members": [
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "showStatus",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "arPrimaryFields",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arSecondaryFields",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "sOldPrimaryMeta",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "sOldSecondaryMeta",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "rawMetaChanged",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildRegionArray",
              "return": {
                "type": {
                  "text": "Object[]"
                }
              },
              "parameters": [
                {
                  "name": "inName",
                  "type": {
                    "text": "String"
                  },
                  "description": "the metadata <em>name</em> that will cause a region to be returned"
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "case-summary-template",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "case-summary-template",
          "declaration": {
            "name": "CaseSummary",
            "module": "src/components/templates/CaseSummary/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CaseSummary",
            "module": "src/components/templates/CaseSummary/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/CaseView/case-view-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "caseViewStyles",
          "default": "html`\n  <style>\n    /* See https://www.npmjs.com/package/@material/mwc-top-app-bar-fixed for info about applying colors */\n    mwc-top-app-bar-fixed {\n      --mdc-theme-primary: var(--app-primary-color);\n      --mdc-theme-on-primary: var(--app-form-color);\n    }\n\n    .psdk-case-view-label {\n      font-size: 1rem;\n      display: block;\n      transform: translateY(0.2em) scale(0.75) perspective(100px) translateZ(0.001px);\n      -ms-transform: translateY(0.2em) scale(0.75);\n      width: 133.33333%;\n    }\n\n    .psdk-case-view {\n      box-sizing: border-box;\n      display: flex;\n    }\n\n    .psdk-case-view-toolbar {\n      display: flex;\n      flex-direction: row;\n      color: var(--app-form-color);\n      background-color: var(--app-primary-color);\n      padding: 1rem;\n    }\n\n    .psdk-case-icon-div {\n      background-color: var(--app-primary-dark-color);\n      border-radius: 0.3rem;\n      padding: 0.5rem 0.5rem 0.5rem 0.5rem;\n    }\n    .psdk-case-svg-icon {\n      width: 2rem;\n      /* padding: 0rem 0.3125rem; */\n      filter: var(--app-white-color-filter);\n    }\n\n    .psdk-case-view-heading {\n      display: block;\n      text-align: left;\n      padding-left: 0.75rem;\n    }\n\n    .psdk-case-view-heading-id {\n      font-size: 0.9rem;\n      font-weight: 300;\n      line-height: 1.5rem;\n    }\n\n    .psdk-case-view-heading-h1 {\n      font-size: 1.1rem;\n      line-height: 1.5rem;\n      font-weight: 500;\n    }\n\n    .psdk-case-view-info-box {\n      display: flex;\n      flex-direction: row;\n      padding: 0rem 0.3125rem 0rem 0rem;\n    }\n\n    .psdk-case-view-info {\n      flex: 0 0 auto;\n      width: 25rem;\n      float: left;\n      padding: 0rem 0.3125rem 0rem 0rem;\n      height: 100%; /* Should be removed. Only for demonstration */\n      background-color: var (--app-form-color);\n    }\n\n    .psdk-case-view-main {\n      flex-grow: 2;\n      float: left;\n      padding: 0rem 0.3125rem;\n      height: 100%; /* Should be removed. Only for demonstration */\n    }\n\n    .psdk-case-view-buttons {\n      display: flex;\n      justify-content: flex-start;\n      padding: 0.3125rem;\n    }\n\n    .psdk-case-view-utilities {\n      margin: 0.625rem 0rem;\n      width: 21.875rem;\n      float: left;\n      padding: 0rem 0.3125rem;\n      height: 100%; /* Should be removed. Only for demonstration */\n    }\n\n    .psdk-case-view-divider {\n      border-bottom: 0.0625rem solid var(--app-neutral-light-color);\n    }\n\n    .psdk-status {\n      padding: 0.3125rem 0.3125rem;\n      background-color: var(--app-primary-color);\n      color: white;\n      width: fit-content;\n      margin: 0.625rem;\n    }\n\n    button {\n      margin: 0rem 0.3125rem;\n    }\n\n    .psdk-action-menu-content {\n      display: none;\n      position: absolute;\n      background-color: #f1f1f1;\n      left: 100px;\n      top: 100px;\n      min-width: 160px;\n      box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n      z-index: 1;\n      text-align: left;\n    }\n\n    .psdk-action-menu-content.show {\n      display: block;\n    }\n\n    .psdk-action-menu-content a {\n      color: black;\n      padding: 12px 16px;\n      text-decoration: none;\n      display: block;\n    }\n\n    .psdk-action-menu-content a:hover {\n      background-color: #ddd;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "caseViewStyles",
          "declaration": {
            "name": "caseViewStyles",
            "module": "src/components/templates/CaseView/case-view-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/CaseView/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CaseView",
          "members": [
            {
              "kind": "field",
              "name": "displayOnlyFA",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "displayOnlyFA"
            },
            {
              "kind": "field",
              "name": "heading"
            },
            {
              "kind": "field",
              "name": "caseClass"
            },
            {
              "kind": "field",
              "name": "id"
            },
            {
              "kind": "field",
              "name": "status"
            },
            {
              "kind": "field",
              "name": "svgCase"
            },
            {
              "kind": "field",
              "name": "tabData"
            },
            {
              "kind": "field",
              "name": "mainTabs"
            },
            {
              "kind": "field",
              "name": "mainTabData"
            },
            {
              "kind": "field",
              "name": "arAvailableActions",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arAvailableProcesses",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "caseTabs",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "elMenu",
              "type": {
                "text": "any"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "currentCaseID",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildRegionArray",
              "return": {
                "type": {
                  "text": "Object[]"
                }
              },
              "parameters": [
                {
                  "name": "inName",
                  "type": {
                    "text": "String"
                  },
                  "description": "the metadata <em>name</em> that will cause a region to be returned"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getActionButtonMenuHtml",
              "parameters": [
                {
                  "name": "availableActions",
                  "type": {
                    "text": "any[]"
                  }
                },
                {
                  "name": "availableProcesses",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getActionButtonsHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "hasCaseIDChanged",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_vTabClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_editClick"
            },
            {
              "kind": "method",
              "name": "_actionMenuActionsClick",
              "parameters": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_actionMenuProcessesClick",
              "parameters": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_showActionMenu",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleActionMenu",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_clickAway",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "displayOnlyFA",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "displayOnlyFA"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "case-view",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "case-view",
          "declaration": {
            "name": "CaseView",
            "module": "src/components/templates/CaseView/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CaseView",
            "module": "src/components/templates/CaseView/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/DataReference/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DataReference",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "showLabel",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "displayMode",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "allowAndPersistChangesInReviewMode",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "referenceType",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "displayAs",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "ruleClass",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "parameters",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "childrenToRender",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "dropDownDataSource",
              "type": {
                "text": "String"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "isDisplayModeEnabled",
              "type": {
                "text": "Boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "propsToUse",
              "type": {
                "text": "any"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "rawViewMetadata",
              "type": {
                "text": "any"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "viewName",
              "type": {
                "text": "String"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "firstChildMeta",
              "type": {
                "text": "any"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "refList",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "canBeChangedInReviewMode",
              "type": {
                "text": "Boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "propName",
              "type": {
                "text": "String"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "displaySingleRef",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "displayMultiref",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "firstChildPConnect",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "setupDataRefUI",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "handleSelection"
            },
            {
              "kind": "method",
              "name": "recreatedFirstChild",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "inChildPConn"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getDataReferenceHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "processChildrenToRender",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "convertChildToComponent",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "inChild"
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "data-reference-component",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "data-reference-component",
          "declaration": {
            "name": "DataReference",
            "module": "src/components/templates/DataReference/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DataReference",
            "module": "src/components/templates/DataReference/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/DefaultForm/default-form-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultFormStyles",
          "default": "html`\n  <style>\n    .psdk-default-form-one-column {\n      display: grid;\n      grid-template-columns: repeat(1, 1fr);\n      gap: calc(1rem);\n    }\n\n    .psdk-default-form-two-column {\n      display: grid;\n      grid-template-columns: repeat(2, 1fr);\n      gap: calc(1rem);\n    }\n\n    .psdk-default-form-three-column {\n      display: grid;\n      grid-template-columns: repeat(3, 1fr);\n      gap: calc(1rem);\n    }\n\n    .psdk-default-form-two-column .grid-column {\n      grid-column: 1 / span 2;\n    }\n\n    .psdk-default-form-three-column .grid-column {\n      grid-column: 1 / span 3;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultFormStyles",
          "declaration": {
            "name": "defaultFormStyles",
            "module": "src/components/templates/DefaultForm/default-form-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/DefaultForm/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DefaultForm",
          "members": [
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getKidsHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getDefaultFormHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "default-form-component",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "default-form-component",
          "declaration": {
            "name": "DefaultForm",
            "module": "src/components/templates/DefaultForm/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DefaultForm",
            "module": "src/components/templates/DefaultForm/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/Details/details-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "detailsStyles",
          "default": "html` <style></style> `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "detailsStyles",
          "declaration": {
            "name": "detailsStyles",
            "module": "src/components/templates/Details/details-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/Details/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Details",
          "members": [
            {
              "kind": "field",
              "name": "viewName",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "arFields",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "details-component",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "details-component",
          "declaration": {
            "name": "Details",
            "module": "src/components/templates/Details/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Details",
            "module": "src/components/templates/Details/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/DetailsTwoColumn/details-two-column-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "detailsTwoColumnStyles",
          "default": "html`\n  <style>\n    .psdk-grid-filter {\n      display: grid;\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n      column-gap: calc(2 * 0.5rem);\n      row-gap: calc(2 * 0.5rem);\n      align-items: start;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "detailsTwoColumnStyles",
          "declaration": {
            "name": "detailsTwoColumnStyles",
            "module": "src/components/templates/DetailsTwoColumn/details-two-column-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/DetailsTwoColumn/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DetailsTwoColumn",
          "members": [
            {
              "kind": "field",
              "name": "viewName",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "arFields",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arFields2",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arFields3",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "details-two-column-component",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "details-two-column-component",
          "declaration": {
            "name": "DetailsTwoColumn",
            "module": "src/components/templates/DetailsTwoColumn/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DetailsTwoColumn",
            "module": "src/components/templates/DetailsTwoColumn/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/FieldGroupTemplate/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FieldGroupTemplate",
          "members": [
            {
              "kind": "field",
              "name": "configProps",
              "attribute": "configProps"
            },
            {
              "kind": "field",
              "name": "contextClass"
            },
            {
              "kind": "field",
              "name": "referenceList"
            },
            {
              "kind": "field",
              "name": "readonlyMode",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "heading",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "pageReference",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "prevRefLength",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "addFieldGroupItem"
            },
            {
              "kind": "method",
              "name": "deleteFieldGroupItem",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getEditableFieldGroup"
            },
            {
              "kind": "method",
              "name": "getReadOnlyFieldGroup"
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "configProps",
              "fieldName": "configProps"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "field-group-template",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "field-group-template",
          "declaration": {
            "name": "FieldGroupTemplate",
            "module": "src/components/templates/FieldGroupTemplate/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FieldGroupTemplate",
            "module": "src/components/templates/FieldGroupTemplate/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/ListPage/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ListPage",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "list-page-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "list-page-component",
          "declaration": {
            "name": "ListPage",
            "module": "src/components/templates/ListPage/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ListPage",
            "module": "src/components/templates/ListPage/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/ListView/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ListView",
          "members": [
            {
              "kind": "field",
              "name": "searchIcon",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "fields",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "displayedColumns",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "columnHeaders",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "rowData",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "vaadinGridColumns",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "vaadinRowData",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "payload",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "attribute": "payload"
            },
            {
              "kind": "field",
              "name": "gridChoice",
              "type": {
                "text": "string"
              },
              "default": "'vaadin'"
            },
            {
              "kind": "field",
              "name": "bClickEventListenerAdded",
              "type": {
                "text": "Boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "waitingForData",
              "type": {
                "text": "Boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "selectedValue",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "rowClickAction",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "rowID",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "response",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "compositeKeys",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "getListData"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateFields",
              "return": {
                "type": {
                  "text": "any[]"
                }
              },
              "parameters": [
                {
                  "name": "arFields"
                },
                {
                  "name": "arColumns"
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateData",
              "return": {
                "type": {
                  "text": "any[]"
                }
              },
              "parameters": [
                {
                  "name": "listData",
                  "type": {
                    "text": "any[]"
                  }
                },
                {
                  "name": "fieldData",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getDisplayColums",
              "parameters": [
                {
                  "name": "fields",
                  "default": "[]"
                }
              ]
            },
            {
              "kind": "method",
              "name": "computeColumnHeaders",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "fields",
                  "default": "[]"
                }
              ]
            },
            {
              "kind": "method",
              "name": "computeRowData",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "rows"
                }
              ]
            },
            {
              "kind": "method",
              "name": "computeGridColumns_Vaadin",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "radioRender",
              "type": {
                "text": "GridColumnBodyLitRenderer<any>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "checkboxRender",
              "type": {
                "text": "GridColumnBodyLitRenderer<any>"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onRadioChange",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "onCheckboxClick",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "clickRowInGrid",
              "parameters": [
                {
                  "name": "inDetail",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "payload",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "fieldName": "payload"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "list-view-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "list-view-component",
          "declaration": {
            "name": "ListView",
            "module": "src/components/templates/ListView/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ListView",
            "module": "src/components/templates/ListView/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/ListView/list-view-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "listViewStyles",
          "default": "html`\n  <style>\n    /* Due to shadow DOM scoping: from this component through all children, apply a background-color */\n    /*\n    * {\n      background-color: cornflowerblue;\n    }\n*/\n    /* for vaadin-grid */\n\n    /* based on this thread: https://github.com/vaadin/vaadin-grid/issues/786 */\n    vaadin-grid tbody#items {\n      box-sizing: content-box;\n    }\n\n    vaadin-grid-cell-content {\n      cursor: pointer;\n    }\n\n    /* for use with \"table\" grid */\n    table {\n      width: 100%;\n      border-collapse: collapse;\n    }\n\n    table th {\n      padding: 5px;\n      border: 1px solid silver;\n    }\n\n    table td {\n      padding: 5px;\n      border: 1px solid silver;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "listViewStyles",
          "declaration": {
            "name": "listViewStyles",
            "module": "src/components/templates/ListView/list-view-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/MultiReferenceReadonly/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MultiReferenceReadonly",
          "members": [
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "label"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getMultiReferenceHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "multi-reference-readonly",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "multi-reference-readonly",
          "declaration": {
            "name": "MultiReferenceReadonly",
            "module": "src/components/templates/MultiReferenceReadonly/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MultiReferenceReadonly",
            "module": "src/components/templates/MultiReferenceReadonly/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/OneColumn/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "OneColumn",
          "members": [
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "one-column",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "one-column",
          "declaration": {
            "name": "OneColumn",
            "module": "src/components/templates/OneColumn/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "OneColumn",
            "module": "src/components/templates/OneColumn/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/OneColumn/one-column-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "oneColumnStyles",
          "default": "html`\n  <style>\n    * {\n      box-sizing: border-box;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "oneColumnStyles",
          "declaration": {
            "name": "oneColumnStyles",
            "module": "src/components/templates/OneColumn/one-column-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/OneColumnTab/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "OneColumnTab",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOneColumnTabHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "one-column-tab-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "one-column-tab-component",
          "declaration": {
            "name": "OneColumnTab",
            "module": "src/components/templates/OneColumnTab/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "OneColumnTab",
            "module": "src/components/templates/OneColumnTab/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/OneColumnTab/one-column-tab-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "oneColumnTabStyles",
          "default": "html` <style></style> `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "oneColumnTabStyles",
          "declaration": {
            "name": "oneColumnTabStyles",
            "module": "src/components/templates/OneColumnTab/one-column-tab-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/PromotedFilters/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PromotedFilters",
          "members": [
            {
              "kind": "field",
              "name": "viewName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "viewName"
            },
            {
              "kind": "field",
              "name": "filters",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "attribute": "filters"
            },
            {
              "kind": "field",
              "name": "listViewProps",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "attribute": "listViewProps"
            },
            {
              "kind": "field",
              "name": "pageClass",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "pageClass"
            },
            {
              "kind": "field",
              "name": "parameters",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "attribute": "parameters"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "'default value'"
            },
            {
              "kind": "field",
              "name": "localizedVal"
            },
            {
              "kind": "field",
              "name": "subscribeIdConst",
              "type": {
                "text": "String"
              },
              "default": "'FILTERS_CHANGE_SUBSCRIPTION'"
            },
            {
              "kind": "field",
              "name": "initTable",
              "type": {
                "text": "Boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "filtersProperties",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "transientItemID",
              "type": {
                "text": "any"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "payload",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "setTransientItemID"
            },
            {
              "kind": "method",
              "name": "clearFilterData"
            },
            {
              "kind": "method",
              "name": "getFilterData",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formatPromotedFilters",
              "parameters": [
                {
                  "name": "promotedFilters"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPromotedFiltersLabel",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getPromotedFiltersGrid",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getPromotedFiltersActions",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getPromotedFiltersListView",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "viewName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "viewName"
            },
            {
              "name": "filters",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "fieldName": "filters"
            },
            {
              "name": "listViewProps",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "fieldName": "listViewProps"
            },
            {
              "name": "pageClass",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "pageClass"
            },
            {
              "name": "parameters",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "fieldName": "parameters"
            },
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "promoted-filters-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "promoted-filters-component",
          "declaration": {
            "name": "PromotedFilters",
            "module": "src/components/templates/PromotedFilters/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "PromotedFilters",
            "module": "src/components/templates/PromotedFilters/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/PromotedFilters/promoted-filters-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "promotedFiltersStyles",
          "default": "html`\n  <style>\n    .psdk-grid-filter {\n      display: grid;\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n      column-gap: calc(2 * 0.5rem);\n      row-gap: calc(2 * 0.5rem);\n      align-items: start;\n    }\n    .action-button {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      margin-bottom: 1rem;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "promotedFiltersStyles",
          "declaration": {
            "name": "promotedFiltersStyles",
            "module": "src/components/templates/PromotedFilters/promoted-filters-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/SimpleTable/SimpleTableManual.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleTableManual",
          "members": [
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "readOnlyMode",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "editableMode",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "rowData",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "elementsData",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "referenceList",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "configProps",
              "type": {
                "text": "any"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "menuIconOverride",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "contextClass",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "rawFields",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "pageReference",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "requestedReadOnlyMode",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "showAddRowButton",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "fieldDefs",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "displayedColumns",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "processedFields",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "prevRefLength",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "getRowValue",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "inRowData",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "inColKey",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "generateRowsData"
            },
            {
              "kind": "method",
              "name": "formatRowsData",
              "parameters": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "kind": "method",
              "name": "buildElementsForTable"
            },
            {
              "kind": "method",
              "name": "getReadOnlyTable"
            },
            {
              "kind": "method",
              "name": "getEditableTable"
            },
            {
              "kind": "method",
              "name": "addRecord"
            },
            {
              "kind": "method",
              "name": "deleteRecord",
              "parameters": [
                {
                  "name": "index"
                }
              ]
            },
            {
              "kind": "method",
              "name": "results"
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "simple-table-manual",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "simple-table-manual",
          "declaration": {
            "name": "SimpleTableManual",
            "module": "src/components/templates/SimpleTable/SimpleTableManual.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SimpleTableManual",
            "module": "src/components/templates/SimpleTable/SimpleTableManual.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/SimpleTable/helpers.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TABLE_CELL",
          "type": {
            "text": "string"
          },
          "default": "'SdkRenderer'"
        },
        {
          "kind": "variable",
          "name": "DELETE_ICON",
          "type": {
            "text": "string"
          },
          "default": "'DeleteIcon'"
        },
        {
          "kind": "function",
          "name": "getContext",
          "parameters": [
            {
              "name": "thePConn"
            }
          ]
        },
        {
          "kind": "function",
          "name": "buildFieldsForTable",
          "parameters": [
            {
              "name": "configFields"
            },
            {
              "name": "fields"
            },
            {
              "name": "showDeleteButton"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TABLE_CELL",
          "declaration": {
            "name": "TABLE_CELL",
            "module": "src/components/templates/SimpleTable/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "DELETE_ICON",
          "declaration": {
            "name": "DELETE_ICON",
            "module": "src/components/templates/SimpleTable/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "getContext",
          "declaration": {
            "name": "getContext",
            "module": "src/components/templates/SimpleTable/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "buildFieldsForTable",
          "declaration": {
            "name": "buildFieldsForTable",
            "module": "src/components/templates/SimpleTable/helpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/SimpleTable/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleTable",
          "members": [
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "fieldGroupProps"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "simple-table-component",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "simple-table-component",
          "declaration": {
            "name": "SimpleTable",
            "module": "src/components/templates/SimpleTable/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SimpleTable",
            "module": "src/components/templates/SimpleTable/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/SimpleTable/simple-table-manual-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "simpleTableManualStyles",
          "default": "html`\n  <style>\n    .psdk-no-records {\n      text-align: center;\n    }\n\n    .label {\n      font-size: 1.1rem;\n    }\n\n    .results-count {\n      opacity: 0.7;\n      font-size: 0.8rem;\n      margin-inline-start: 0.625rem;\n    }\n\n    .psdk-utility-button {\n      background: none;\n      border: none;\n      cursor: pointer;\n    }\n\n    .psdk-utility-card-action-svg-icon {\n      width: 1.4rem;\n      margin-top: 7px;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "simpleTableManualStyles",
          "declaration": {
            "name": "simpleTableManualStyles",
            "module": "src/components/templates/SimpleTable/simple-table-manual-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/SimpleTableSelect/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleTableSelect",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "viewName",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "parameters",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "dataRelationshipContext",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "theComponentToRender",
              "type": {
                "text": "any"
              },
              "default": "nothing"
            },
            {
              "kind": "field",
              "name": "propsToUse",
              "type": {
                "text": "any"
              },
              "default": "{}"
            },
            {
              "kind": "method",
              "name": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSimpleTableSelectHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "simple-table-select",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "simple-table-select",
          "declaration": {
            "name": "SimpleTableSelect",
            "module": "src/components/templates/SimpleTableSelect/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SimpleTableSelect",
            "module": "src/components/templates/SimpleTableSelect/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/SingleReferenceReadonly/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SingleReferenceReadonly",
          "members": [
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSingleReferenceHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "single-reference-readonly",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "single-reference-readonly",
          "declaration": {
            "name": "SingleReferenceReadonly",
            "module": "src/components/templates/SingleReferenceReadonly/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SingleReferenceReadonly",
            "module": "src/components/templates/SingleReferenceReadonly/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/TwoColumnPage/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TwoColumnPage",
          "members": [
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "two-column-page",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "two-column-page",
          "declaration": {
            "name": "TwoColumnPage",
            "module": "src/components/templates/TwoColumnPage/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TwoColumnPage",
            "module": "src/components/templates/TwoColumnPage/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/TwoColumn/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TwoColumn",
          "members": [
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "two-column",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "two-column",
          "declaration": {
            "name": "TwoColumn",
            "module": "src/components/templates/TwoColumn/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TwoColumn",
            "module": "src/components/templates/TwoColumn/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/TwoColumn/two-column-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "twoColumnStyles",
          "default": "html`\n  <style>\n    * {\n      box-sizing: border-box;\n    }\n\n    .psdk-two-column {\n      display: flow-root;\n      height: 100%;\n    }\n\n    /* Create two equal columns that floats next to each other */\n    .psdk-two-column-column {\n      width: 50%;\n      float: left;\n      padding: 0rem 0.3125rem;\n      height: 100%;\n    }\n\n    .psdk-two-column-left {\n      float: left;\n      min-width: 50%;\n      padding: 0rem 0.3125rem;\n    }\n\n    .psdk-two-column-right {\n      float: left;\n      width: 50%;\n      padding: 0rem 0.3125rem;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "twoColumnStyles",
          "declaration": {
            "name": "twoColumnStyles",
            "module": "src/components/templates/TwoColumn/two-column-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/templates/WideNarrowPage/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WideNarrowPage",
          "members": [
            {
              "kind": "method",
              "name": "updateSelf",
              "description": "updateSelf"
            },
            {
              "kind": "method",
              "name": "onStateChange",
              "description": "The `onStateChange()` method will be called when the state is updated.\n Override this method in each class that extends BridgeBase.\n This implementation can be used for common code that should be done for\n all components that are derived from BridgeBase",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "pConn",
              "attribute": "pConn",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bDebug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "bLogging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theStore",
              "type": {
                "text": "any"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentProps",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseComponentName",
              "type": {
                "text": "string"
              },
              "default": "'BridgeBase'",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentId",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "storeUnsubscribe",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "validateMessage",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "theComponentStyleTemplate",
              "type": {
                "text": "any"
              },
              "default": "nothing",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "thePConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "children",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderTemplates",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "additionalProps",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "field",
              "name": "localCallback",
              "type": {
                "text": "Function"
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizePConnect",
              "description": "Every component derived from BridgeBase will have \"pConn\" provided in the component declaration put in the DOM.\nEx: <root-container .pConn=${this.pConn}></root-container>`;\nSometimes this is simply a JS object with a getPConnect() function (which returns a PConnect object).\nOther times, the PConnect object itself is passed in.\n\nThis method is called in the BridgeBase connectedCallback to normalize things so every derived object can just\naccess this.thePConn to get the PConnect object.\n\nThis method also performs other component setup that's shared amongst all components derived from BridgeBase.\nFor example, it sets this.children to store the children of the given PConnect.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStore",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "parameters": [
                {
                  "name": "bLogMsg",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, will write the stringified state to the console for debugging/inspection"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerAndSubscribeComponent",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Registers the component with the bridge. Registration performs the following:\n 1. Initialize this component's theComponentProps to {}\n\n 2. assign's component's actions (via processActions)\n\n 3. subscribes the component to the Store and assigns the unsubscribe function",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFormField",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToStore",
              "parameters": [
                {
                  "name": "inCallback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The component's callback function (typically called onStateChange) that will\nbe called when the store changes."
                }
              ],
              "description": "Subscribe this component to the store",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldComponentUpdate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns **true** if the component's entry in ___componentPropsArr___ is\nthe same as the properties that are current associated with the component (___inComp___) passed in.\nAs a side effect, the component's entry in ___componentPropsArr___ is updated.\n**Note**: It is assumed that the incoming component has the following:\n(a) a bridgeComponentID _string_ property used as lookup key in ___componentPropsArr___\nand (b) a ___pConn$___ property used to access functions called in ___getComponentProps___",
              "parameters": [
                {
                  "description": "The component asking if it should update itself",
                  "name": "inComp"
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProps",
              "return": {
                "type": {
                  "text": "Object"
                }
              },
              "description": "Gets the Component's properties that are used (a) to populate this.theComponentProps\n and (b) to determine whether the component should update itself (re-render).\nThis is the full set of properties that are tracked in Redux for this component.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentProp",
              "parameters": [
                {
                  "name": "inProp",
                  "default": "''",
                  "description": "The property being requested."
                }
              ],
              "description": "Returns the value of requested property for the component if it exists.\nOtherwise, return undefined.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getCurrentCompleteProps",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "changeHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered a change event.\nNote that the Constellation JS Engine requires that changeHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "eventHandler",
              "parameters": [
                {
                  "name": "inComp",
                  "description": "The component calling the event"
                },
                {
                  "name": "event",
                  "description": "The event"
                }
              ],
              "description": "Can be called when the component has encountered an event (such as blur)\nNote that the Constellation JS Engine requires that eventHandler as its 1st param\nas the component",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "processActions",
              "description": "processActions exposes all actions in the metadata.\nAttaches common handler (eventHandler) for all actions.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "prepareForRender",
              "parameters": [
                {
                  "name": "inDisplayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Since we are often using the technique of iterating over this.renderTemplates to render\n a component derived from BridgeBase, we need to prepare the component for a \"fresh\"\n render at the beginning of each render. This will perform common tasks such as re-initializing\n this.renderTemplates to an empty array (and optionally adding any common templates to be rendered)\n If a child component render fails to call this, this.renderTemplates accumulates templates that\n ends up making the component render multiple times since the previous render templates would\n remain in the array\n\nAdded an optional inDisplayOnlyFA argument that's **only** if you uncomment the line\n that renders an extra div showing which component is rendered where. This was added to\n assist in debugging the /embedded use case when some components are set to only show\n the FlowAction and not the rest of the UI around it.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "addChildTemplates",
              "description": "iterates over this.children to add appropriate templates to this.renderTemplates",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getChildTemplateArray",
              "parameters": [
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "iterates over this.children and returns an array of templates where each entry in the array\nrepresents a child of this compononent",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateForTemplate",
              "parameters": [
                {
                  "name": "inTemplate",
                  "type": {
                    "text": "String"
                  },
                  "description": "the Requested template"
                },
                {
                  "name": "inPConnToUse",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "displayOnlyFA",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Returns the appropriate template literal for the requested (Pega template component.\nIt uses this component's thePConnect as .pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "getComponentFromConfigObj",
              "static": true,
              "parameters": [
                {
                  "name": "inConfigObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "the Constellation component configuration object (typically\nreturned from createComponent) for which you want to get back the associated\nlit-html component. The inConfigObj object is an object with the getPConnect() method"
                }
              ],
              "description": "Returns the lit-html component associated with the PConnect that's passed in.",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "logChildren",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            },
            {
              "kind": "method",
              "name": "consoleKidDump",
              "parameters": [
                {
                  "name": "pConn",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "level",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "kidNum",
                  "default": "1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ],
          "superclass": {
            "name": "BridgeBase",
            "module": "/src/bridge/BridgeBase"
          },
          "tagName": "wide-narrow-page",
          "customElement": true,
          "attributes": [
            {
              "name": "pConn",
              "fieldName": "pConn",
              "inheritedFrom": {
                "name": "BridgeBase",
                "module": "src/bridge/BridgeBase/index.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wide-narrow-page",
          "declaration": {
            "name": "WideNarrowPage",
            "module": "src/components/templates/WideNarrowPage/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WideNarrowPage",
            "module": "src/components/templates/WideNarrowPage/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/FullPortal/FullPortal/full-portal-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "fullPortalStyles",
          "default": "html` <style></style> `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "fullPortalStyles",
          "declaration": {
            "name": "fullPortalStyles",
            "module": "src/samples/FullPortal/FullPortal/full-portal-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/FullPortal/FullPortal/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FullPortal",
          "members": [
            {
              "kind": "method",
              "name": "getFullPortalHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "full-portal-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "full-portal-component",
          "declaration": {
            "name": "FullPortal",
            "module": "src/samples/FullPortal/FullPortal/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FullPortal",
            "module": "src/samples/FullPortal/FullPortal/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/Mashup/MashupBundleSwatch/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MashupBundleSwatch",
          "members": [
            {
              "kind": "field",
              "name": "swatchConfig"
            },
            {
              "kind": "field",
              "name": "labelPlay",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "labelLevel",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "labelChannelCount",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "labelChannelFull",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "labelBanner",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "labelDollars",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "labelCents",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "labelInternetSpeed",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "extraCalling",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "getButtonSwatchHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "_shopClick",
              "parameters": [
                {
                  "name": "sLevel",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "mashup-bundle-swatch-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "mashup-bundle-swatch-component",
          "declaration": {
            "name": "MashupBundleSwatch",
            "module": "src/samples/Mashup/MashupBundleSwatch/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MashupBundleSwatch",
            "module": "src/samples/Mashup/MashupBundleSwatch/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/Mashup/MashupBundleSwatch/mashup-bundle-swatch-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "mashupBundleSwatchStyles",
          "default": "html`\n  <style>\n    .cc-swatch-header {\n      display: flex;\n      flex-direction: row;\n    }\n\n    .cc-swatch-package {\n      display: flex;\n      flex-direction: column;\n      justify-content: space-around;\n      width: 260px;\n      height: 70px;\n      background-color: #333000;\n      padding: 5px;\n    }\n\n    .cc-swatch-package .cc-swatch-play {\n      letter-spacing: normal;\n      color: white;\n      font-size: 25px;\n    }\n\n    .cc-swatch-package .cc-swatch-level {\n      letter-spacing: normal;\n      color: white;\n      font-size: 28px;\n      font-weight: bold;\n    }\n\n    .cc-swatch-channels {\n      letter-spacing: normal;\n      background-color: var(--app-primary-color);\n      width: 100px;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-evenly;\n      align-items: center;\n    }\n\n    .cc-swatch-channels .cc-swatch-count {\n      letter-spacing: normal;\n      color: white;\n      font-size: 40px;\n      font-weight: bold;\n    }\n\n    .cc-swatch-channels .cc-swatch-label {\n      letter-spacing: normal;\n      color: white;\n      font-size: 17px;\n    }\n\n    .cc-swatch-body {\n      letter-spacing: normal;\n      border: 1px solid lightgray;\n      background-color: #fafafa;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      padding-bottom: 20px;\n    }\n\n    .cc-swatch-body .cc-swatch-banner {\n      letter-spacing: normal;\n      font-weight: bold;\n      font-size: 15px;\n      padding: 5px;\n    }\n\n    .cc-swatch-body .cc-swatch-price {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .cc-swatch-body .cc-swatch-from-group {\n      height: 90px;\n    }\n\n    .cc-swatch-body .cc-swatch-from {\n      color: var(--app-primary-color);\n      text-align: right;\n    }\n\n    .cc-swatch-body .cc-swatch-currency {\n      letter-spacing: normal;\n      color: var(--app-primary-color);\n      font-size: 30px;\n      font-weight: bold;\n      font-family: Tahoma;\n    }\n\n    .cc-swatch-body .cc-swatch-dollars {\n      letter-spacing: normal;\n      color: var(--app-primary-color);\n      font-size: 90px;\n      font-weight: bold;\n      font-family: Tahoma;\n    }\n\n    .cc-swatch-body .cc-swatch-monthly {\n      display: flex;\n      flex-direction: column;\n    }\n\n    .cc-swatch-body .cc-swatch-cents {\n      letter-spacing: normal;\n      color: var(--app-primary-color);\n      font-size: 20px;\n      font-weight: bold;\n    }\n\n    .cc-swatch-body .cc-swatch-shop-button {\n      color: white;\n      background-color: var(--app-secondary-color);\n      font-size: 25px;\n      font-weight: bold;\n      border-radius: 25px;\n      border: 0px;\n      margin: 20px;\n      padding: 10px 30px;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "mashupBundleSwatchStyles",
          "declaration": {
            "name": "mashupBundleSwatchStyles",
            "module": "src/samples/Mashup/MashupBundleSwatch/mashup-bundle-swatch-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/Mashup/MashupMain/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MashupMain",
          "members": [
            {
              "kind": "field",
              "name": "bHasPConnect",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "props"
            },
            {
              "kind": "method",
              "name": "getToolbarHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getMainHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getMashupMainHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "startMashup",
              "description": "kick off the Mashup that we're trying to serve up"
            },
            {
              "kind": "method",
              "name": "initialRender",
              "parameters": [
                {
                  "name": "inRenderObj",
                  "description": "the initial, top-level PConnect object to render"
                }
              ],
              "description": "Callback from onPCoreReady that's called once the top-level render object\nis ready to be rendered"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "mashup-main-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "mashup-main-component",
          "declaration": {
            "name": "MashupMain",
            "module": "src/samples/Mashup/MashupMain/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MashupMain",
            "module": "src/samples/Mashup/MashupMain/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/Mashup/MashupMain/mashup-main-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "mashupMainStyles",
          "default": "html`\n  <style>\n    .toolbar-spacer {\n      flex: 1 1 auto;\n    }\n\n    .progress-box {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      height: 100%;\n      width: 100%;\n      background-color: whitesmoke;\n      position: fixed;\n      z-index: 99999;\n      top: 0px;\n      left: 0px;\n      opacity: 0.5;\n    }\n\n    .progress-spinner {\n      text-align: center;\n    }\n\n    .example-container {\n      min-height: 100%;\n      height: 100%;\n    }\n\n    .psdk-aside {\n      height: calc(100% - 64px);\n      width: 12.5rem;\n      border-right: 1px solid lightgray;\n    }\n\n    .psdk-main {\n      height: calc(100% - 64px);\n      width: calc(100% - 12.5rem);\n    }\n\n    h1 {\n      font-size: 30px;\n    }\n\n    .cc-toolbar {\n      display: flex;\n      align-items: center;\n      height: 64px;\n      padding: 0px 20px;\n      width: 100%;\n      z-index: 5;\n      color: white;\n      background-color: var(--app-primary-color);\n    }\n\n    .cc-toolbar-row {\n      height: 100px;\n    }\n\n    .cc-main {\n      display: flex;\n      height: calc(100% - 100px);\n      top: 100px;\n      position: relative;\n    }\n\n    .cc-icon {\n      width: 40px;\n      margin-bottom: 10px;\n      filter: var(--app-white-color-filter);\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "mashupMainStyles",
          "declaration": {
            "name": "mashupMainStyles",
            "module": "src/samples/Mashup/MashupMain/mashup-main-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/Mashup/MashupMainScreen/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MashupMainScreen",
          "members": [
            {
              "kind": "field",
              "name": "pConn"
            },
            {
              "kind": "field",
              "name": "firstConfig",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "secondConfig",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "thirdConfig",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "showTriplePlayOptions",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "showPega",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "showResolution",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "cableInfo",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "cancelAssignment"
            },
            {
              "kind": "method",
              "name": "assignmentFinished"
            },
            {
              "kind": "method",
              "name": "getMashupMainScreenHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onShopNow",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "mashup-main-screen-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "mashup-main-screen-component",
          "declaration": {
            "name": "MashupMainScreen",
            "module": "src/samples/Mashup/MashupMainScreen/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MashupMainScreen",
            "module": "src/samples/Mashup/MashupMainScreen/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/Mashup/MashupMainScreen/mashup-main-screen-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "mashupMainScreenStyles",
          "default": "html`\n  <style>\n    .cc-banner {\n      font-size: 24px;\n      text-align: center;\n      width: 100%;\n      padding: 20px;\n    }\n\n    .cc-main-screen {\n      display: flex;\n      flex-direction: column;\n      height: calc(100% - 100px);\n      position: relative;\n      width: 100%;\n    }\n\n    .cc-main-div {\n      width: 100%;\n      height: 100%;\n      overflow-y: auto;\n      overflow-x: hidden;\n    }\n\n    .cc-work-button {\n      font-size: 22px;\n      color: var(--app-primary-color);\n      text-decoration: underline;\n      padding-top: 10px;\n    }\n\n    .cc-work-ready {\n      font-size: 22px;\n      padding: 20px 20px 0px 40px;\n    }\n\n    .cc-info {\n      display: flex;\n      flex-direction: row;\n    }\n\n    .cc-info-pega {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .cc-info-banner {\n      width: 50%;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n\n    .cc-info-banner-text {\n      font-size: 30px;\n      line-height: 40px;\n      padding: 20px 20px;\n      color: darkslategray;\n    }\n\n    .cc-info-image {\n      width: 700px;\n      margin: 20px;\n      border-radius: 10px;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "mashupMainScreenStyles",
          "declaration": {
            "name": "mashupMainScreenStyles",
            "module": "src/samples/Mashup/MashupMainScreen/mashup-main-screen-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/Mashup/MashupPortal/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MashupPortal",
          "members": [
            {
              "kind": "method",
              "name": "getSimplePortalHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "mashup-portal-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "mashup-portal-component",
          "declaration": {
            "name": "MashupPortal",
            "module": "src/samples/Mashup/MashupPortal/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MashupPortal",
            "module": "src/samples/Mashup/MashupPortal/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/Mashup/MashupPortal/mashup-portal-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "mashupPortalStyles",
          "default": "html`\n  <style>\n    .column {\n      height: 100%;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "mashupPortalStyles",
          "declaration": {
            "name": "mashupPortalStyles",
            "module": "src/samples/Mashup/MashupPortal/mashup-portal-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/Mashup/MashupResolutionScreen/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MashupResolutionScreen",
          "members": [
            {
              "kind": "method",
              "name": "getResolutionScreenHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "mashup-resolution-screen-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "mashup-resolution-screen-component",
          "declaration": {
            "name": "MashupResolutionScreen",
            "module": "src/samples/Mashup/MashupResolutionScreen/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MashupResolutionScreen",
            "module": "src/samples/Mashup/MashupResolutionScreen/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/Mashup/MashupResolutionScreen/mashup-resolution-sceen-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "mashupResolutionScreenStyles",
          "default": "html`\n  <style>\n    .cc-resolution {\n      display: flex;\n      flex-direction: row;\n    }\n\n    .cc-card {\n      display: flex;\n      flex-direction: column;\n      margin: 30px;\n      width: 50%;\n    }\n    .cc-header {\n      background-color: var(--app-primary-color);\n      border-top-left-radius: 10px;\n      border-top-right-radius: 10px;\n      padding: 30px;\n      color: white;\n      font-weight: bold;\n      font-size: 60px;\n    }\n\n    .cc-body {\n      font-size: 24px;\n      border: 1px solid var(--app-primary-color);\n      padding: 30px;\n    }\n\n    .cc-chat-image {\n      width: 700px;\n      border-radius: 10px;\n      margin: 30px;\n    }\n\n    .cc-chat-button {\n      color: white;\n      background-color: var(--app-secondary-color);\n      font-size: 25px;\n      font-weight: bold;\n      border-radius: 25px;\n      border: 0px;\n      margin: 20px;\n      padding: 10px 30px;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "mashupResolutionScreenStyles",
          "declaration": {
            "name": "mashupResolutionScreenStyles",
            "module": "src/samples/Mashup/MashupResolutionScreen/mashup-resolution-sceen-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/SimplePortal/SimpleMain/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleMain",
          "members": [
            {
              "kind": "field",
              "name": "props"
            },
            {
              "kind": "field",
              "name": "bHasPConnect",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bShowRoot",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "arCreateButtons",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arOpenWorkItems",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "showWork"
            },
            {
              "kind": "method",
              "name": "cancelAssignment"
            },
            {
              "kind": "method",
              "name": "assignmentFinished"
            },
            {
              "kind": "method",
              "name": "getToolbarHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getNavigationHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getCaseTypeButtons",
              "parameters": [
                {
                  "name": "arCaseTypes",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getWorkItems",
              "parameters": [
                {
                  "name": "results",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getSimpleMainHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "startMashup",
              "description": "kick off the Mashup that we're trying to serve up"
            },
            {
              "kind": "method",
              "name": "initialRender",
              "parameters": [
                {
                  "name": "inRenderObj",
                  "description": "the initial, top-level PConnect object to render"
                }
              ],
              "description": "Callback from onPCoreReady that's called once the top-level render object\nis ready to be rendered"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "simple-main-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "simple-main-component",
          "declaration": {
            "name": "SimpleMain",
            "module": "src/samples/SimplePortal/SimpleMain/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SimpleMain",
            "module": "src/samples/SimplePortal/SimpleMain/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/SimplePortal/SimpleMain/simple-main-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "simpleMainStyles",
          "default": "html`\n  <style>\n    h1 {\n      font-size: 20px;\n    }\n\n    .psdk-toolbar {\n      display: flex;\n      align-items: center;\n      height: 64px;\n      padding: 0px 20px;\n      width: 100%;\n      z-index: 5;\n      color: white;\n      background-color: var(--app-primary-color);\n    }\n\n    .psdk-main {\n      display: flex;\n      height: 100%;\n    }\n\n    .psdk-main-root {\n      height: 100%;\n      width: 100%;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "simpleMainStyles",
          "declaration": {
            "name": "simpleMainStyles",
            "module": "src/samples/SimplePortal/SimpleMain/simple-main-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/SimplePortal/SimplePortal/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimplePortal",
          "members": [
            {
              "kind": "method",
              "name": "getSimplePortalHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "simple-portal-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "simple-portal-component",
          "declaration": {
            "name": "SimplePortal",
            "module": "src/samples/SimplePortal/SimplePortal/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SimplePortal",
            "module": "src/samples/SimplePortal/SimplePortal/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/SimplePortal/SimplePortal/simple-portal-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "simplePortalStyles",
          "default": "html`\n  <style>\n    .column {\n      height: 100%;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "simplePortalStyles",
          "declaration": {
            "name": "simplePortalStyles",
            "module": "src/samples/SimplePortal/SimplePortal/simple-portal-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/SimplePortal/SimpleSideBar/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleSideBar",
          "members": [
            {
              "kind": "field",
              "name": "pConn"
            },
            {
              "kind": "field",
              "name": "arButtons",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "arWorkItems",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "getCaseTypes"
            },
            {
              "kind": "method",
              "name": "getWorkItems"
            },
            {
              "kind": "method",
              "name": "getSimpleSideBarHtml",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "buttonClick",
              "parameters": [
                {
                  "name": "oButtonData",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "workButtonClick",
              "parameters": [
                {
                  "name": "oButtonData",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "@lion/core"
          },
          "tagName": "simple-side-bar-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "simple-side-bar-component",
          "declaration": {
            "name": "SimpleSideBar",
            "module": "src/samples/SimplePortal/SimpleSideBar/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SimpleSideBar",
            "module": "src/samples/SimplePortal/SimpleSideBar/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/samples/SimplePortal/SimpleSideBar/simple-side-bar-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "simpleSideBarStyles",
          "default": "html`\n  <style>\n    h2 {\n      margin: 0px 0px;\n      font-size: 20px;\n    }\n\n    .psdk-create-work-button {\n      padding: 5px;\n    }\n\n    .psdk-open-work-button {\n      padding: 1px;\n    }\n\n    .psdk-create-work {\n      height: 100px;\n      overflow-y: auto;\n    }\n\n    .psdk-worklist {\n      height: calc(100% - 132px);\n      overflow-y: auto;\n    }\n\n    .psdk-btn-text {\n      text-align: left;\n    }\n  </style>\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "simpleSideBarStyles",
          "declaration": {
            "name": "simpleSideBarStyles",
            "module": "src/samples/SimplePortal/SimpleSideBar/simple-side-bar-styles.ts"
          }
        }
      ]
    }
  ]
}
